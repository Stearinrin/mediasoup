// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Boolean {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Boolean {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBoolean(bb:flatbuffers.ByteBuffer, obj?:Boolean):Boolean {
  return (obj || new Boolean()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBoolean(bb:flatbuffers.ByteBuffer, obj?:Boolean):Boolean {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Boolean()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startBoolean(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt8(0, value, 0);
}

static endBoolean(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBoolean(builder:flatbuffers.Builder, value:number):flatbuffers.Offset {
  Boolean.startBoolean(builder);
  Boolean.addValue(builder, value);
  return Boolean.endBoolean(builder);
}

unpack(): BooleanT {
  return new BooleanT(
    this.value()
  );
}


unpackTo(_o: BooleanT): void {
  _o.value = this.value();
}
}

export class BooleanT {
constructor(
  public value: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Boolean.createBoolean(builder,
    this.value
  );
}
}
