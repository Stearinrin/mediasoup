// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Rtx {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Rtx {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtx(bb:flatbuffers.ByteBuffer, obj?:Rtx):Rtx {
  return (obj || new Rtx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtx(bb:flatbuffers.ByteBuffer, obj?:Rtx):Rtx {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Rtx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ssrc():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startRtx(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSsrc(builder:flatbuffers.Builder, ssrc:number) {
  builder.addFieldInt32(0, ssrc, 0);
}

static endRtx(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRtx(builder:flatbuffers.Builder, ssrc:number):flatbuffers.Offset {
  Rtx.startRtx(builder);
  Rtx.addSsrc(builder, ssrc);
  return Rtx.endRtx(builder);
}

unpack(): RtxT {
  return new RtxT(
    this.ssrc()
  );
}


unpackTo(_o: RtxT): void {
  _o.ssrc = this.ssrc();
}
}

export class RtxT {
constructor(
  public ssrc: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Rtx.createRtx(builder,
    this.ssrc
  );
}
}
