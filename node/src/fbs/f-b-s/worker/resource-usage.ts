// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ResourceUsage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ResourceUsage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResourceUsage(bb:flatbuffers.ByteBuffer, obj?:ResourceUsage):ResourceUsage {
  return (obj || new ResourceUsage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResourceUsage(bb:flatbuffers.ByteBuffer, obj?:ResourceUsage):ResourceUsage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResourceUsage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ruUtime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruStime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruMaxrss():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruIxrss():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruIdrss():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruIsrss():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruMinflt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruMajflt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruNswap():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruInblock():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruOublock():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruMsgsnd():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruMsgrcv():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruNsignals():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruNvcsw():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ruNivcsw():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startResourceUsage(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addRuUtime(builder:flatbuffers.Builder, ruUtime:bigint) {
  builder.addFieldInt64(0, ruUtime, BigInt('0'));
}

static addRuStime(builder:flatbuffers.Builder, ruStime:bigint) {
  builder.addFieldInt64(1, ruStime, BigInt('0'));
}

static addRuMaxrss(builder:flatbuffers.Builder, ruMaxrss:bigint) {
  builder.addFieldInt64(2, ruMaxrss, BigInt('0'));
}

static addRuIxrss(builder:flatbuffers.Builder, ruIxrss:bigint) {
  builder.addFieldInt64(3, ruIxrss, BigInt('0'));
}

static addRuIdrss(builder:flatbuffers.Builder, ruIdrss:bigint) {
  builder.addFieldInt64(4, ruIdrss, BigInt('0'));
}

static addRuIsrss(builder:flatbuffers.Builder, ruIsrss:bigint) {
  builder.addFieldInt64(5, ruIsrss, BigInt('0'));
}

static addRuMinflt(builder:flatbuffers.Builder, ruMinflt:bigint) {
  builder.addFieldInt64(6, ruMinflt, BigInt('0'));
}

static addRuMajflt(builder:flatbuffers.Builder, ruMajflt:bigint) {
  builder.addFieldInt64(7, ruMajflt, BigInt('0'));
}

static addRuNswap(builder:flatbuffers.Builder, ruNswap:bigint) {
  builder.addFieldInt64(8, ruNswap, BigInt('0'));
}

static addRuInblock(builder:flatbuffers.Builder, ruInblock:bigint) {
  builder.addFieldInt64(9, ruInblock, BigInt('0'));
}

static addRuOublock(builder:flatbuffers.Builder, ruOublock:bigint) {
  builder.addFieldInt64(10, ruOublock, BigInt('0'));
}

static addRuMsgsnd(builder:flatbuffers.Builder, ruMsgsnd:bigint) {
  builder.addFieldInt64(11, ruMsgsnd, BigInt('0'));
}

static addRuMsgrcv(builder:flatbuffers.Builder, ruMsgrcv:bigint) {
  builder.addFieldInt64(12, ruMsgrcv, BigInt('0'));
}

static addRuNsignals(builder:flatbuffers.Builder, ruNsignals:bigint) {
  builder.addFieldInt64(13, ruNsignals, BigInt('0'));
}

static addRuNvcsw(builder:flatbuffers.Builder, ruNvcsw:bigint) {
  builder.addFieldInt64(14, ruNvcsw, BigInt('0'));
}

static addRuNivcsw(builder:flatbuffers.Builder, ruNivcsw:bigint) {
  builder.addFieldInt64(15, ruNivcsw, BigInt('0'));
}

static endResourceUsage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResourceUsage(builder:flatbuffers.Builder, ruUtime:bigint, ruStime:bigint, ruMaxrss:bigint, ruIxrss:bigint, ruIdrss:bigint, ruIsrss:bigint, ruMinflt:bigint, ruMajflt:bigint, ruNswap:bigint, ruInblock:bigint, ruOublock:bigint, ruMsgsnd:bigint, ruMsgrcv:bigint, ruNsignals:bigint, ruNvcsw:bigint, ruNivcsw:bigint):flatbuffers.Offset {
  ResourceUsage.startResourceUsage(builder);
  ResourceUsage.addRuUtime(builder, ruUtime);
  ResourceUsage.addRuStime(builder, ruStime);
  ResourceUsage.addRuMaxrss(builder, ruMaxrss);
  ResourceUsage.addRuIxrss(builder, ruIxrss);
  ResourceUsage.addRuIdrss(builder, ruIdrss);
  ResourceUsage.addRuIsrss(builder, ruIsrss);
  ResourceUsage.addRuMinflt(builder, ruMinflt);
  ResourceUsage.addRuMajflt(builder, ruMajflt);
  ResourceUsage.addRuNswap(builder, ruNswap);
  ResourceUsage.addRuInblock(builder, ruInblock);
  ResourceUsage.addRuOublock(builder, ruOublock);
  ResourceUsage.addRuMsgsnd(builder, ruMsgsnd);
  ResourceUsage.addRuMsgrcv(builder, ruMsgrcv);
  ResourceUsage.addRuNsignals(builder, ruNsignals);
  ResourceUsage.addRuNvcsw(builder, ruNvcsw);
  ResourceUsage.addRuNivcsw(builder, ruNivcsw);
  return ResourceUsage.endResourceUsage(builder);
}

unpack(): ResourceUsageT {
  return new ResourceUsageT(
    this.ruUtime(),
    this.ruStime(),
    this.ruMaxrss(),
    this.ruIxrss(),
    this.ruIdrss(),
    this.ruIsrss(),
    this.ruMinflt(),
    this.ruMajflt(),
    this.ruNswap(),
    this.ruInblock(),
    this.ruOublock(),
    this.ruMsgsnd(),
    this.ruMsgrcv(),
    this.ruNsignals(),
    this.ruNvcsw(),
    this.ruNivcsw()
  );
}


unpackTo(_o: ResourceUsageT): void {
  _o.ruUtime = this.ruUtime();
  _o.ruStime = this.ruStime();
  _o.ruMaxrss = this.ruMaxrss();
  _o.ruIxrss = this.ruIxrss();
  _o.ruIdrss = this.ruIdrss();
  _o.ruIsrss = this.ruIsrss();
  _o.ruMinflt = this.ruMinflt();
  _o.ruMajflt = this.ruMajflt();
  _o.ruNswap = this.ruNswap();
  _o.ruInblock = this.ruInblock();
  _o.ruOublock = this.ruOublock();
  _o.ruMsgsnd = this.ruMsgsnd();
  _o.ruMsgrcv = this.ruMsgrcv();
  _o.ruNsignals = this.ruNsignals();
  _o.ruNvcsw = this.ruNvcsw();
  _o.ruNivcsw = this.ruNivcsw();
}
}

export class ResourceUsageT {
constructor(
  public ruUtime: bigint = BigInt('0'),
  public ruStime: bigint = BigInt('0'),
  public ruMaxrss: bigint = BigInt('0'),
  public ruIxrss: bigint = BigInt('0'),
  public ruIdrss: bigint = BigInt('0'),
  public ruIsrss: bigint = BigInt('0'),
  public ruMinflt: bigint = BigInt('0'),
  public ruMajflt: bigint = BigInt('0'),
  public ruNswap: bigint = BigInt('0'),
  public ruInblock: bigint = BigInt('0'),
  public ruOublock: bigint = BigInt('0'),
  public ruMsgsnd: bigint = BigInt('0'),
  public ruMsgrcv: bigint = BigInt('0'),
  public ruNsignals: bigint = BigInt('0'),
  public ruNvcsw: bigint = BigInt('0'),
  public ruNivcsw: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ResourceUsage.createResourceUsage(builder,
    this.ruUtime,
    this.ruStime,
    this.ruMaxrss,
    this.ruIxrss,
    this.ruIdrss,
    this.ruIsrss,
    this.ruMinflt,
    this.ruMajflt,
    this.ruNswap,
    this.ruInblock,
    this.ruOublock,
    this.ruMsgsnd,
    this.ruMsgrcv,
    this.ruNsignals,
    this.ruNvcsw,
    this.ruNivcsw
  );
}
}
