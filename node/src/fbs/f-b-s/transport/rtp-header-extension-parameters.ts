// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RtpHeaderExtensionParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):RtpHeaderExtensionParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtpHeaderExtensionParameters(bb:flatbuffers.ByteBuffer, obj?:RtpHeaderExtensionParameters):RtpHeaderExtensionParameters {
  return (obj || new RtpHeaderExtensionParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtpHeaderExtensionParameters(bb:flatbuffers.ByteBuffer, obj?:RtpHeaderExtensionParameters):RtpHeaderExtensionParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RtpHeaderExtensionParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uri():string|null
uri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

encrypt():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

parameters():string|null
parameters(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parameters(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRtpHeaderExtensionParameters(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUri(builder:flatbuffers.Builder, uriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uriOffset, 0);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt8(1, id, 0);
}

static addEncrypt(builder:flatbuffers.Builder, encrypt:boolean) {
  builder.addFieldInt8(2, +encrypt, +false);
}

static addParameters(builder:flatbuffers.Builder, parametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, parametersOffset, 0);
}

static endRtpHeaderExtensionParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // uri
  return offset;
}

static createRtpHeaderExtensionParameters(builder:flatbuffers.Builder, uriOffset:flatbuffers.Offset, id:number, encrypt:boolean, parametersOffset:flatbuffers.Offset):flatbuffers.Offset {
  RtpHeaderExtensionParameters.startRtpHeaderExtensionParameters(builder);
  RtpHeaderExtensionParameters.addUri(builder, uriOffset);
  RtpHeaderExtensionParameters.addId(builder, id);
  RtpHeaderExtensionParameters.addEncrypt(builder, encrypt);
  RtpHeaderExtensionParameters.addParameters(builder, parametersOffset);
  return RtpHeaderExtensionParameters.endRtpHeaderExtensionParameters(builder);
}
}
