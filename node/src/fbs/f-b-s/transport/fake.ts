// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class fake {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):fake {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsfake(bb:flatbuffers.ByteBuffer, obj?:fake):fake {
  return (obj || new fake()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsfake(bb:flatbuffers.ByteBuffer, obj?:fake):fake {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new fake()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

foo():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startfake(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFoo(builder:flatbuffers.Builder, foo:number) {
  builder.addFieldInt8(0, foo, 0);
}

static endfake(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishfakeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedfakeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createfake(builder:flatbuffers.Builder, foo:number):flatbuffers.Offset {
  fake.startfake(builder);
  fake.addFoo(builder, foo);
  return fake.endfake(builder);
}
}
