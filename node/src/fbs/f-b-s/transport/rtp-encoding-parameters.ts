// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Rtx } from '../../f-b-s/transport/rtx';


export class RtpEncodingParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):RtpEncodingParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtpEncodingParameters(bb:flatbuffers.ByteBuffer, obj?:RtpEncodingParameters):RtpEncodingParameters {
  return (obj || new RtpEncodingParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtpEncodingParameters(bb:flatbuffers.ByteBuffer, obj?:RtpEncodingParameters):RtpEncodingParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RtpEncodingParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ssrc():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

rid():string|null
rid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

codecPayloadType():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

rtx(obj?:Rtx):Rtx|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Rtx()).__init(this.bb_pos + offset, this.bb!) : null;
}

dtx():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

scalabilityMode():string|null
scalabilityMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scalabilityMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scaleResolutionDownBy():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

maxBitrate():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startRtpEncodingParameters(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addSsrc(builder:flatbuffers.Builder, ssrc:number) {
  builder.addFieldInt32(0, ssrc, 0);
}

static addRid(builder:flatbuffers.Builder, ridOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ridOffset, 0);
}

static addCodecPayloadType(builder:flatbuffers.Builder, codecPayloadType:number) {
  builder.addFieldInt8(2, codecPayloadType, 0);
}

static addRtx(builder:flatbuffers.Builder, rtxOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, rtxOffset, 0);
}

static addDtx(builder:flatbuffers.Builder, dtx:boolean) {
  builder.addFieldInt8(4, +dtx, +false);
}

static addScalabilityMode(builder:flatbuffers.Builder, scalabilityModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, scalabilityModeOffset, 0);
}

static addScaleResolutionDownBy(builder:flatbuffers.Builder, scaleResolutionDownBy:number) {
  builder.addFieldInt8(6, scaleResolutionDownBy, 0);
}

static addMaxBitrate(builder:flatbuffers.Builder, maxBitrate:number) {
  builder.addFieldInt32(7, maxBitrate, 0);
}

static endRtpEncodingParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
