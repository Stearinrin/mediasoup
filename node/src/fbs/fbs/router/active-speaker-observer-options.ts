// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ActiveSpeakerObserverOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ActiveSpeakerObserverOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsActiveSpeakerObserverOptions(bb:flatbuffers.ByteBuffer, obj?:ActiveSpeakerObserverOptions):ActiveSpeakerObserverOptions {
  return (obj || new ActiveSpeakerObserverOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsActiveSpeakerObserverOptions(bb:flatbuffers.ByteBuffer, obj?:ActiveSpeakerObserverOptions):ActiveSpeakerObserverOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ActiveSpeakerObserverOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

interval():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startActiveSpeakerObserverOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addInterval(builder:flatbuffers.Builder, interval:number) {
  builder.addFieldInt16(0, interval, 0);
}

static endActiveSpeakerObserverOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createActiveSpeakerObserverOptions(builder:flatbuffers.Builder, interval:number):flatbuffers.Offset {
  ActiveSpeakerObserverOptions.startActiveSpeakerObserverOptions(builder);
  ActiveSpeakerObserverOptions.addInterval(builder, interval);
  return ActiveSpeakerObserverOptions.endActiveSpeakerObserverOptions(builder);
}

unpack(): ActiveSpeakerObserverOptionsT {
  return new ActiveSpeakerObserverOptionsT(
    this.interval()
  );
}


unpackTo(_o: ActiveSpeakerObserverOptionsT): void {
  _o.interval = this.interval();
}
}

export class ActiveSpeakerObserverOptionsT {
constructor(
  public interval: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ActiveSpeakerObserverOptions.createActiveSpeakerObserverOptions(builder,
    this.interval
  );
}
}
