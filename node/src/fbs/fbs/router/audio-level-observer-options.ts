// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class AudioLevelObserverOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AudioLevelObserverOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAudioLevelObserverOptions(bb:flatbuffers.ByteBuffer, obj?:AudioLevelObserverOptions):AudioLevelObserverOptions {
  return (obj || new AudioLevelObserverOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAudioLevelObserverOptions(bb:flatbuffers.ByteBuffer, obj?:AudioLevelObserverOptions):AudioLevelObserverOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AudioLevelObserverOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxEntries():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

threshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

interval():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startAudioLevelObserverOptions(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMaxEntries(builder:flatbuffers.Builder, maxEntries:number) {
  builder.addFieldInt16(0, maxEntries, 0);
}

static addThreshold(builder:flatbuffers.Builder, threshold:number) {
  builder.addFieldInt8(1, threshold, 0);
}

static addInterval(builder:flatbuffers.Builder, interval:number) {
  builder.addFieldInt16(2, interval, 0);
}

static endAudioLevelObserverOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAudioLevelObserverOptions(builder:flatbuffers.Builder, maxEntries:number, threshold:number, interval:number):flatbuffers.Offset {
  AudioLevelObserverOptions.startAudioLevelObserverOptions(builder);
  AudioLevelObserverOptions.addMaxEntries(builder, maxEntries);
  AudioLevelObserverOptions.addThreshold(builder, threshold);
  AudioLevelObserverOptions.addInterval(builder, interval);
  return AudioLevelObserverOptions.endAudioLevelObserverOptions(builder);
}

unpack(): AudioLevelObserverOptionsT {
  return new AudioLevelObserverOptionsT(
    this.maxEntries(),
    this.threshold(),
    this.interval()
  );
}


unpackTo(_o: AudioLevelObserverOptionsT): void {
  _o.maxEntries = this.maxEntries();
  _o.threshold = this.threshold();
  _o.interval = this.interval();
}
}

export class AudioLevelObserverOptionsT {
constructor(
  public maxEntries: number = 0,
  public threshold: number = 0,
  public interval: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return AudioLevelObserverOptions.createAudioLevelObserverOptions(builder,
    this.maxEntries,
    this.threshold,
    this.interval
  );
}
}
