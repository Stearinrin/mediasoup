// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TransportListenIp, TransportListenIpT } from '../../fbs/router/transport-listen-ip';


export class WebRtcTransportListenIndividual {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WebRtcTransportListenIndividual {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWebRtcTransportListenIndividual(bb:flatbuffers.ByteBuffer, obj?:WebRtcTransportListenIndividual):WebRtcTransportListenIndividual {
  return (obj || new WebRtcTransportListenIndividual()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWebRtcTransportListenIndividual(bb:flatbuffers.ByteBuffer, obj?:WebRtcTransportListenIndividual):WebRtcTransportListenIndividual {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WebRtcTransportListenIndividual()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

listenIps(index: number, obj?:TransportListenIp):TransportListenIp|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TransportListenIp()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

listenIpsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startWebRtcTransportListenIndividual(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addListenIps(builder:flatbuffers.Builder, listenIpsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, listenIpsOffset, 0);
}

static createListenIpsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startListenIpsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(1, port, 0);
}

static endWebRtcTransportListenIndividual(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // listen_ips
  return offset;
}

static createWebRtcTransportListenIndividual(builder:flatbuffers.Builder, listenIpsOffset:flatbuffers.Offset, port:number):flatbuffers.Offset {
  WebRtcTransportListenIndividual.startWebRtcTransportListenIndividual(builder);
  WebRtcTransportListenIndividual.addListenIps(builder, listenIpsOffset);
  WebRtcTransportListenIndividual.addPort(builder, port);
  return WebRtcTransportListenIndividual.endWebRtcTransportListenIndividual(builder);
}

unpack(): WebRtcTransportListenIndividualT {
  return new WebRtcTransportListenIndividualT(
    this.bb!.createObjList(this.listenIps.bind(this), this.listenIpsLength()),
    this.port()
  );
}


unpackTo(_o: WebRtcTransportListenIndividualT): void {
  _o.listenIps = this.bb!.createObjList(this.listenIps.bind(this), this.listenIpsLength());
  _o.port = this.port();
}
}

export class WebRtcTransportListenIndividualT {
constructor(
  public listenIps: (TransportListenIpT)[] = [],
  public port: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const listenIps = WebRtcTransportListenIndividual.createListenIpsVector(builder, builder.createObjectOffsetList(this.listenIps));

  return WebRtcTransportListenIndividual.createWebRtcTransportListenIndividual(builder,
    listenIps,
    this.port
  );
}
}
