// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StringString, StringStringT } from '../../fbs/common/string-string';
import { StringStringArray, StringStringArrayT } from '../../fbs/common/string-string-array';


export class RouterDumpResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RouterDumpResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRouterDumpResponse(bb:flatbuffers.ByteBuffer, obj?:RouterDumpResponse):RouterDumpResponse {
  return (obj || new RouterDumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRouterDumpResponse(bb:flatbuffers.ByteBuffer, obj?:RouterDumpResponse):RouterDumpResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RouterDumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

transportIds(index: number):string
transportIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
transportIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

transportIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rtpObserverIds(index: number):string
rtpObserverIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rtpObserverIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rtpObserverIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mapProducerIdConsumerIds(index: number, obj?:StringStringArray):StringStringArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new StringStringArray()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mapProducerIdConsumerIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mapConsumerIdProducerId(index: number, obj?:StringString):StringString|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new StringString()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mapConsumerIdProducerIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mapProducerIdObserverIds(index: number, obj?:StringStringArray):StringStringArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new StringStringArray()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mapProducerIdObserverIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mapDataProducerIdDataConsumerIds(index: number, obj?:StringStringArray):StringStringArray|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new StringStringArray()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mapDataProducerIdDataConsumerIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mapDataConsumerIdDataProducerId(index: number, obj?:StringString):StringString|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new StringString()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mapDataConsumerIdDataProducerIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRouterDumpResponse(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addTransportIds(builder:flatbuffers.Builder, transportIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, transportIdsOffset, 0);
}

static createTransportIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTransportIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRtpObserverIds(builder:flatbuffers.Builder, rtpObserverIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rtpObserverIdsOffset, 0);
}

static createRtpObserverIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRtpObserverIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMapProducerIdConsumerIds(builder:flatbuffers.Builder, mapProducerIdConsumerIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, mapProducerIdConsumerIdsOffset, 0);
}

static createMapProducerIdConsumerIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMapProducerIdConsumerIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMapConsumerIdProducerId(builder:flatbuffers.Builder, mapConsumerIdProducerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, mapConsumerIdProducerIdOffset, 0);
}

static createMapConsumerIdProducerIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMapConsumerIdProducerIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMapProducerIdObserverIds(builder:flatbuffers.Builder, mapProducerIdObserverIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, mapProducerIdObserverIdsOffset, 0);
}

static createMapProducerIdObserverIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMapProducerIdObserverIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMapDataProducerIdDataConsumerIds(builder:flatbuffers.Builder, mapDataProducerIdDataConsumerIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, mapDataProducerIdDataConsumerIdsOffset, 0);
}

static createMapDataProducerIdDataConsumerIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMapDataProducerIdDataConsumerIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMapDataConsumerIdDataProducerId(builder:flatbuffers.Builder, mapDataConsumerIdDataProducerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, mapDataConsumerIdDataProducerIdOffset, 0);
}

static createMapDataConsumerIdDataProducerIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMapDataConsumerIdDataProducerIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRouterDumpResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  return offset;
}

static createRouterDumpResponse(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, transportIdsOffset:flatbuffers.Offset, rtpObserverIdsOffset:flatbuffers.Offset, mapProducerIdConsumerIdsOffset:flatbuffers.Offset, mapConsumerIdProducerIdOffset:flatbuffers.Offset, mapProducerIdObserverIdsOffset:flatbuffers.Offset, mapDataProducerIdDataConsumerIdsOffset:flatbuffers.Offset, mapDataConsumerIdDataProducerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  RouterDumpResponse.startRouterDumpResponse(builder);
  RouterDumpResponse.addId(builder, idOffset);
  RouterDumpResponse.addTransportIds(builder, transportIdsOffset);
  RouterDumpResponse.addRtpObserverIds(builder, rtpObserverIdsOffset);
  RouterDumpResponse.addMapProducerIdConsumerIds(builder, mapProducerIdConsumerIdsOffset);
  RouterDumpResponse.addMapConsumerIdProducerId(builder, mapConsumerIdProducerIdOffset);
  RouterDumpResponse.addMapProducerIdObserverIds(builder, mapProducerIdObserverIdsOffset);
  RouterDumpResponse.addMapDataProducerIdDataConsumerIds(builder, mapDataProducerIdDataConsumerIdsOffset);
  RouterDumpResponse.addMapDataConsumerIdDataProducerId(builder, mapDataConsumerIdDataProducerIdOffset);
  return RouterDumpResponse.endRouterDumpResponse(builder);
}

unpack(): RouterDumpResponseT {
  return new RouterDumpResponseT(
    this.id(),
    this.bb!.createScalarList(this.transportIds.bind(this), this.transportIdsLength()),
    this.bb!.createScalarList(this.rtpObserverIds.bind(this), this.rtpObserverIdsLength()),
    this.bb!.createObjList(this.mapProducerIdConsumerIds.bind(this), this.mapProducerIdConsumerIdsLength()),
    this.bb!.createObjList(this.mapConsumerIdProducerId.bind(this), this.mapConsumerIdProducerIdLength()),
    this.bb!.createObjList(this.mapProducerIdObserverIds.bind(this), this.mapProducerIdObserverIdsLength()),
    this.bb!.createObjList(this.mapDataProducerIdDataConsumerIds.bind(this), this.mapDataProducerIdDataConsumerIdsLength()),
    this.bb!.createObjList(this.mapDataConsumerIdDataProducerId.bind(this), this.mapDataConsumerIdDataProducerIdLength())
  );
}


unpackTo(_o: RouterDumpResponseT): void {
  _o.id = this.id();
  _o.transportIds = this.bb!.createScalarList(this.transportIds.bind(this), this.transportIdsLength());
  _o.rtpObserverIds = this.bb!.createScalarList(this.rtpObserverIds.bind(this), this.rtpObserverIdsLength());
  _o.mapProducerIdConsumerIds = this.bb!.createObjList(this.mapProducerIdConsumerIds.bind(this), this.mapProducerIdConsumerIdsLength());
  _o.mapConsumerIdProducerId = this.bb!.createObjList(this.mapConsumerIdProducerId.bind(this), this.mapConsumerIdProducerIdLength());
  _o.mapProducerIdObserverIds = this.bb!.createObjList(this.mapProducerIdObserverIds.bind(this), this.mapProducerIdObserverIdsLength());
  _o.mapDataProducerIdDataConsumerIds = this.bb!.createObjList(this.mapDataProducerIdDataConsumerIds.bind(this), this.mapDataProducerIdDataConsumerIdsLength());
  _o.mapDataConsumerIdDataProducerId = this.bb!.createObjList(this.mapDataConsumerIdDataProducerId.bind(this), this.mapDataConsumerIdDataProducerIdLength());
}
}

export class RouterDumpResponseT {
constructor(
  public id: string|Uint8Array|null = null,
  public transportIds: (string)[] = [],
  public rtpObserverIds: (string)[] = [],
  public mapProducerIdConsumerIds: (StringStringArrayT)[] = [],
  public mapConsumerIdProducerId: (StringStringT)[] = [],
  public mapProducerIdObserverIds: (StringStringArrayT)[] = [],
  public mapDataProducerIdDataConsumerIds: (StringStringArrayT)[] = [],
  public mapDataConsumerIdDataProducerId: (StringStringT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const transportIds = RouterDumpResponse.createTransportIdsVector(builder, builder.createObjectOffsetList(this.transportIds));
  const rtpObserverIds = RouterDumpResponse.createRtpObserverIdsVector(builder, builder.createObjectOffsetList(this.rtpObserverIds));
  const mapProducerIdConsumerIds = RouterDumpResponse.createMapProducerIdConsumerIdsVector(builder, builder.createObjectOffsetList(this.mapProducerIdConsumerIds));
  const mapConsumerIdProducerId = RouterDumpResponse.createMapConsumerIdProducerIdVector(builder, builder.createObjectOffsetList(this.mapConsumerIdProducerId));
  const mapProducerIdObserverIds = RouterDumpResponse.createMapProducerIdObserverIdsVector(builder, builder.createObjectOffsetList(this.mapProducerIdObserverIds));
  const mapDataProducerIdDataConsumerIds = RouterDumpResponse.createMapDataProducerIdDataConsumerIdsVector(builder, builder.createObjectOffsetList(this.mapDataProducerIdDataConsumerIds));
  const mapDataConsumerIdDataProducerId = RouterDumpResponse.createMapDataConsumerIdDataProducerIdVector(builder, builder.createObjectOffsetList(this.mapDataConsumerIdDataProducerId));

  return RouterDumpResponse.createRouterDumpResponse(builder,
    id,
    transportIds,
    rtpObserverIds,
    mapProducerIdConsumerIds,
    mapConsumerIdProducerId,
    mapProducerIdObserverIds,
    mapDataProducerIdDataConsumerIds,
    mapDataConsumerIdDataProducerId
  );
}
}
