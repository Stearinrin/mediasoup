// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CloseRtpObserverRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CloseRtpObserverRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCloseRtpObserverRequest(bb:flatbuffers.ByteBuffer, obj?:CloseRtpObserverRequest):CloseRtpObserverRequest {
  return (obj || new CloseRtpObserverRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCloseRtpObserverRequest(bb:flatbuffers.ByteBuffer, obj?:CloseRtpObserverRequest):CloseRtpObserverRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CloseRtpObserverRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rtpObserverId():string|null
rtpObserverId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rtpObserverId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCloseRtpObserverRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRtpObserverId(builder:flatbuffers.Builder, rtpObserverIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rtpObserverIdOffset, 0);
}

static endCloseRtpObserverRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // rtp_observer_id
  return offset;
}

static createCloseRtpObserverRequest(builder:flatbuffers.Builder, rtpObserverIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  CloseRtpObserverRequest.startCloseRtpObserverRequest(builder);
  CloseRtpObserverRequest.addRtpObserverId(builder, rtpObserverIdOffset);
  return CloseRtpObserverRequest.endCloseRtpObserverRequest(builder);
}

unpack(): CloseRtpObserverRequestT {
  return new CloseRtpObserverRequestT(
    this.rtpObserverId()
  );
}


unpackTo(_o: CloseRtpObserverRequestT): void {
  _o.rtpObserverId = this.rtpObserverId();
}
}

export class CloseRtpObserverRequestT {
constructor(
  public rtpObserverId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const rtpObserverId = (this.rtpObserverId !== null ? builder.createString(this.rtpObserverId!) : 0);

  return CloseRtpObserverRequest.createCloseRtpObserverRequest(builder,
    rtpObserverId
  );
}
}
