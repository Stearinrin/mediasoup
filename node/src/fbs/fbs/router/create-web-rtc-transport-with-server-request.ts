// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { NumSctpStreams, NumSctpStreamsT } from '../../fbs/router/num-sctp-streams';


export class CreateWebRtcTransportWithServerRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CreateWebRtcTransportWithServerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCreateWebRtcTransportWithServerRequest(bb:flatbuffers.ByteBuffer, obj?:CreateWebRtcTransportWithServerRequest):CreateWebRtcTransportWithServerRequest {
  return (obj || new CreateWebRtcTransportWithServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCreateWebRtcTransportWithServerRequest(bb:flatbuffers.ByteBuffer, obj?:CreateWebRtcTransportWithServerRequest):CreateWebRtcTransportWithServerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CreateWebRtcTransportWithServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

transportId():string|null
transportId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transportId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

webRtcServerId():string|null
webRtcServerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
webRtcServerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enableUdp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enableTcp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

preferUdp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

preferTcp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

initialAvailableOutgoingBitrate():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

enableSctp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

numSctpStreams(obj?:NumSctpStreams):NumSctpStreams|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new NumSctpStreams()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

maxSctpMessageSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

sctpSendBufferSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

isDataChannel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

static startCreateWebRtcTransportWithServerRequest(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addTransportId(builder:flatbuffers.Builder, transportIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, transportIdOffset, 0);
}

static addWebRtcServerId(builder:flatbuffers.Builder, webRtcServerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, webRtcServerIdOffset, 0);
}

static addEnableUdp(builder:flatbuffers.Builder, enableUdp:boolean) {
  builder.addFieldInt8(2, +enableUdp, +false);
}

static addEnableTcp(builder:flatbuffers.Builder, enableTcp:boolean) {
  builder.addFieldInt8(3, +enableTcp, +false);
}

static addPreferUdp(builder:flatbuffers.Builder, preferUdp:boolean) {
  builder.addFieldInt8(4, +preferUdp, +false);
}

static addPreferTcp(builder:flatbuffers.Builder, preferTcp:boolean) {
  builder.addFieldInt8(5, +preferTcp, +false);
}

static addInitialAvailableOutgoingBitrate(builder:flatbuffers.Builder, initialAvailableOutgoingBitrate:number) {
  builder.addFieldInt32(6, initialAvailableOutgoingBitrate, 0);
}

static addEnableSctp(builder:flatbuffers.Builder, enableSctp:boolean) {
  builder.addFieldInt8(7, +enableSctp, +false);
}

static addNumSctpStreams(builder:flatbuffers.Builder, numSctpStreamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, numSctpStreamsOffset, 0);
}

static addMaxSctpMessageSize(builder:flatbuffers.Builder, maxSctpMessageSize:number) {
  builder.addFieldInt32(9, maxSctpMessageSize, 0);
}

static addSctpSendBufferSize(builder:flatbuffers.Builder, sctpSendBufferSize:number) {
  builder.addFieldInt32(10, sctpSendBufferSize, 0);
}

static addIsDataChannel(builder:flatbuffers.Builder, isDataChannel:boolean) {
  builder.addFieldInt8(11, +isDataChannel, +true);
}

static endCreateWebRtcTransportWithServerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // transport_id
  return offset;
}


unpack(): CreateWebRtcTransportWithServerRequestT {
  return new CreateWebRtcTransportWithServerRequestT(
    this.transportId(),
    this.webRtcServerId(),
    this.enableUdp(),
    this.enableTcp(),
    this.preferUdp(),
    this.preferTcp(),
    this.initialAvailableOutgoingBitrate(),
    this.enableSctp(),
    (this.numSctpStreams() !== null ? this.numSctpStreams()!.unpack() : null),
    this.maxSctpMessageSize(),
    this.sctpSendBufferSize(),
    this.isDataChannel()
  );
}


unpackTo(_o: CreateWebRtcTransportWithServerRequestT): void {
  _o.transportId = this.transportId();
  _o.webRtcServerId = this.webRtcServerId();
  _o.enableUdp = this.enableUdp();
  _o.enableTcp = this.enableTcp();
  _o.preferUdp = this.preferUdp();
  _o.preferTcp = this.preferTcp();
  _o.initialAvailableOutgoingBitrate = this.initialAvailableOutgoingBitrate();
  _o.enableSctp = this.enableSctp();
  _o.numSctpStreams = (this.numSctpStreams() !== null ? this.numSctpStreams()!.unpack() : null);
  _o.maxSctpMessageSize = this.maxSctpMessageSize();
  _o.sctpSendBufferSize = this.sctpSendBufferSize();
  _o.isDataChannel = this.isDataChannel();
}
}

export class CreateWebRtcTransportWithServerRequestT {
constructor(
  public transportId: string|Uint8Array|null = null,
  public webRtcServerId: string|Uint8Array|null = null,
  public enableUdp: boolean = false,
  public enableTcp: boolean = false,
  public preferUdp: boolean = false,
  public preferTcp: boolean = false,
  public initialAvailableOutgoingBitrate: number = 0,
  public enableSctp: boolean = false,
  public numSctpStreams: NumSctpStreamsT|null = null,
  public maxSctpMessageSize: number = 0,
  public sctpSendBufferSize: number = 0,
  public isDataChannel: boolean = true
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const transportId = (this.transportId !== null ? builder.createString(this.transportId!) : 0);
  const webRtcServerId = (this.webRtcServerId !== null ? builder.createString(this.webRtcServerId!) : 0);
  const numSctpStreams = (this.numSctpStreams !== null ? this.numSctpStreams!.pack(builder) : 0);

  CreateWebRtcTransportWithServerRequest.startCreateWebRtcTransportWithServerRequest(builder);
  CreateWebRtcTransportWithServerRequest.addTransportId(builder, transportId);
  CreateWebRtcTransportWithServerRequest.addWebRtcServerId(builder, webRtcServerId);
  CreateWebRtcTransportWithServerRequest.addEnableUdp(builder, this.enableUdp);
  CreateWebRtcTransportWithServerRequest.addEnableTcp(builder, this.enableTcp);
  CreateWebRtcTransportWithServerRequest.addPreferUdp(builder, this.preferUdp);
  CreateWebRtcTransportWithServerRequest.addPreferTcp(builder, this.preferTcp);
  CreateWebRtcTransportWithServerRequest.addInitialAvailableOutgoingBitrate(builder, this.initialAvailableOutgoingBitrate);
  CreateWebRtcTransportWithServerRequest.addEnableSctp(builder, this.enableSctp);
  CreateWebRtcTransportWithServerRequest.addNumSctpStreams(builder, numSctpStreams);
  CreateWebRtcTransportWithServerRequest.addMaxSctpMessageSize(builder, this.maxSctpMessageSize);
  CreateWebRtcTransportWithServerRequest.addSctpSendBufferSize(builder, this.sctpSendBufferSize);
  CreateWebRtcTransportWithServerRequest.addIsDataChannel(builder, this.isDataChannel);

  return CreateWebRtcTransportWithServerRequest.endCreateWebRtcTransportWithServerRequest(builder);
}
}
