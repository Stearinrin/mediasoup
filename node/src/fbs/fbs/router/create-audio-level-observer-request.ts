// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AudioLevelObserverOptions, AudioLevelObserverOptionsT } from '../../fbs/router/audio-level-observer-options';


export class CreateAudioLevelObserverRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CreateAudioLevelObserverRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCreateAudioLevelObserverRequest(bb:flatbuffers.ByteBuffer, obj?:CreateAudioLevelObserverRequest):CreateAudioLevelObserverRequest {
  return (obj || new CreateAudioLevelObserverRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCreateAudioLevelObserverRequest(bb:flatbuffers.ByteBuffer, obj?:CreateAudioLevelObserverRequest):CreateAudioLevelObserverRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CreateAudioLevelObserverRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rtpObserverId():string|null
rtpObserverId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rtpObserverId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

options(obj?:AudioLevelObserverOptions):AudioLevelObserverOptions|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new AudioLevelObserverOptions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startCreateAudioLevelObserverRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRtpObserverId(builder:flatbuffers.Builder, rtpObserverIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rtpObserverIdOffset, 0);
}

static addOptions(builder:flatbuffers.Builder, optionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, optionsOffset, 0);
}

static endCreateAudioLevelObserverRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // rtp_observer_id
  builder.requiredField(offset, 6) // options
  return offset;
}


unpack(): CreateAudioLevelObserverRequestT {
  return new CreateAudioLevelObserverRequestT(
    this.rtpObserverId(),
    (this.options() !== null ? this.options()!.unpack() : null)
  );
}


unpackTo(_o: CreateAudioLevelObserverRequestT): void {
  _o.rtpObserverId = this.rtpObserverId();
  _o.options = (this.options() !== null ? this.options()!.unpack() : null);
}
}

export class CreateAudioLevelObserverRequestT {
constructor(
  public rtpObserverId: string|Uint8Array|null = null,
  public options: AudioLevelObserverOptionsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const rtpObserverId = (this.rtpObserverId !== null ? builder.createString(this.rtpObserverId!) : 0);
  const options = (this.options !== null ? this.options!.pack(builder) : 0);

  CreateAudioLevelObserverRequest.startCreateAudioLevelObserverRequest(builder);
  CreateAudioLevelObserverRequest.addRtpObserverId(builder, rtpObserverId);
  CreateAudioLevelObserverRequest.addOptions(builder, options);

  return CreateAudioLevelObserverRequest.endCreateAudioLevelObserverRequest(builder);
}
}
