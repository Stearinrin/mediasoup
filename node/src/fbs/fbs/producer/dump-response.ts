// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MediaKind } from '../../fbs/rtp-parameters/media-kind';
import { RtpMapping, RtpMappingT } from '../../fbs/rtp-parameters/rtp-mapping';
import { RtpParameters, RtpParametersT } from '../../fbs/rtp-parameters/rtp-parameters';
import { Dump, DumpT } from '../../fbs/rtp-stream/dump';


export class DumpResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DumpResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDumpResponse(bb:flatbuffers.ByteBuffer, obj?:DumpResponse):DumpResponse {
  return (obj || new DumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDumpResponse(bb:flatbuffers.ByteBuffer, obj?:DumpResponse):DumpResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

kind():MediaKind {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MediaKind.ALL;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rtpParameters(obj?:RtpParameters):RtpParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new RtpParameters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rtpMapping(obj?:RtpMapping):RtpMapping|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new RtpMapping()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rtpStreams(index: number, obj?:Dump):Dump|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Dump()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rtpStreamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

traceEventTypes(index: number):string
traceEventTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
traceEventTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

traceEventTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

paused():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDumpResponse(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:MediaKind) {
  builder.addFieldInt8(1, kind, MediaKind.ALL);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addRtpParameters(builder:flatbuffers.Builder, rtpParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rtpParametersOffset, 0);
}

static addRtpMapping(builder:flatbuffers.Builder, rtpMappingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, rtpMappingOffset, 0);
}

static addRtpStreams(builder:flatbuffers.Builder, rtpStreamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rtpStreamsOffset, 0);
}

static createRtpStreamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRtpStreamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTraceEventTypes(builder:flatbuffers.Builder, traceEventTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, traceEventTypesOffset, 0);
}

static createTraceEventTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTraceEventTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPaused(builder:flatbuffers.Builder, paused:boolean) {
  builder.addFieldInt8(7, +paused, +false);
}

static endDumpResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  builder.requiredField(offset, 8) // type
  builder.requiredField(offset, 10) // rtp_parameters
  builder.requiredField(offset, 12) // rtp_mapping
  builder.requiredField(offset, 16) // trace_event_types
  return offset;
}


unpack(): DumpResponseT {
  return new DumpResponseT(
    this.id(),
    this.kind(),
    this.type(),
    (this.rtpParameters() !== null ? this.rtpParameters()!.unpack() : null),
    (this.rtpMapping() !== null ? this.rtpMapping()!.unpack() : null),
    this.bb!.createObjList(this.rtpStreams.bind(this), this.rtpStreamsLength()),
    this.bb!.createScalarList(this.traceEventTypes.bind(this), this.traceEventTypesLength()),
    this.paused()
  );
}


unpackTo(_o: DumpResponseT): void {
  _o.id = this.id();
  _o.kind = this.kind();
  _o.type = this.type();
  _o.rtpParameters = (this.rtpParameters() !== null ? this.rtpParameters()!.unpack() : null);
  _o.rtpMapping = (this.rtpMapping() !== null ? this.rtpMapping()!.unpack() : null);
  _o.rtpStreams = this.bb!.createObjList(this.rtpStreams.bind(this), this.rtpStreamsLength());
  _o.traceEventTypes = this.bb!.createScalarList(this.traceEventTypes.bind(this), this.traceEventTypesLength());
  _o.paused = this.paused();
}
}

export class DumpResponseT {
constructor(
  public id: string|Uint8Array|null = null,
  public kind: MediaKind = MediaKind.ALL,
  public type: string|Uint8Array|null = null,
  public rtpParameters: RtpParametersT|null = null,
  public rtpMapping: RtpMappingT|null = null,
  public rtpStreams: (DumpT)[] = [],
  public traceEventTypes: (string)[] = [],
  public paused: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const rtpParameters = (this.rtpParameters !== null ? this.rtpParameters!.pack(builder) : 0);
  const rtpMapping = (this.rtpMapping !== null ? this.rtpMapping!.pack(builder) : 0);
  const rtpStreams = DumpResponse.createRtpStreamsVector(builder, builder.createObjectOffsetList(this.rtpStreams));
  const traceEventTypes = DumpResponse.createTraceEventTypesVector(builder, builder.createObjectOffsetList(this.traceEventTypes));

  DumpResponse.startDumpResponse(builder);
  DumpResponse.addId(builder, id);
  DumpResponse.addKind(builder, this.kind);
  DumpResponse.addType(builder, type);
  DumpResponse.addRtpParameters(builder, rtpParameters);
  DumpResponse.addRtpMapping(builder, rtpMapping);
  DumpResponse.addRtpStreams(builder, rtpStreams);
  DumpResponse.addTraceEventTypes(builder, traceEventTypes);
  DumpResponse.addPaused(builder, this.paused);

  return DumpResponse.endDumpResponse(builder);
}
}
