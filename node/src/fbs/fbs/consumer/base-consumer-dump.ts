// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MediaKind } from '../../fbs/rtp-parameters/media-kind';
import { RtpEncodingParameters, RtpEncodingParametersT } from '../../fbs/rtp-parameters/rtp-encoding-parameters';
import { RtpParameters, RtpParametersT } from '../../fbs/rtp-parameters/rtp-parameters';


export class BaseConsumerDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BaseConsumerDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBaseConsumerDump(bb:flatbuffers.ByteBuffer, obj?:BaseConsumerDump):BaseConsumerDump {
  return (obj || new BaseConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBaseConsumerDump(bb:flatbuffers.ByteBuffer, obj?:BaseConsumerDump):BaseConsumerDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BaseConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

producerId():string|null
producerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
producerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

kind():MediaKind {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MediaKind.ALL;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rtpParameters(obj?:RtpParameters):RtpParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new RtpParameters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

consumableRtpEncodings(index: number, obj?:RtpEncodingParameters):RtpEncodingParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new RtpEncodingParameters()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

consumableRtpEncodingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

supportedCodecPayloadTypes(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

supportedCodecPayloadTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

supportedCodecPayloadTypesArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

traceEventTypes(index: number):string
traceEventTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
traceEventTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

traceEventTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

paused():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

producerPaused():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

priorty():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startBaseConsumerDump(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addProducerId(builder:flatbuffers.Builder, producerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, producerIdOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:MediaKind) {
  builder.addFieldInt8(2, kind, MediaKind.ALL);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, typeOffset, 0);
}

static addRtpParameters(builder:flatbuffers.Builder, rtpParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, rtpParametersOffset, 0);
}

static addConsumableRtpEncodings(builder:flatbuffers.Builder, consumableRtpEncodingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, consumableRtpEncodingsOffset, 0);
}

static createConsumableRtpEncodingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startConsumableRtpEncodingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSupportedCodecPayloadTypes(builder:flatbuffers.Builder, supportedCodecPayloadTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, supportedCodecPayloadTypesOffset, 0);
}

static createSupportedCodecPayloadTypesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSupportedCodecPayloadTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTraceEventTypes(builder:flatbuffers.Builder, traceEventTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, traceEventTypesOffset, 0);
}

static createTraceEventTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTraceEventTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPaused(builder:flatbuffers.Builder, paused:boolean) {
  builder.addFieldInt8(8, +paused, +false);
}

static addProducerPaused(builder:flatbuffers.Builder, producerPaused:boolean) {
  builder.addFieldInt8(9, +producerPaused, +false);
}

static addPriorty(builder:flatbuffers.Builder, priorty:number) {
  builder.addFieldInt8(10, priorty, 0);
}

static endBaseConsumerDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  builder.requiredField(offset, 6) // producer_id
  builder.requiredField(offset, 10) // type
  builder.requiredField(offset, 12) // rtp_parameters
  builder.requiredField(offset, 18) // trace_event_types
  return offset;
}


unpack(): BaseConsumerDumpT {
  return new BaseConsumerDumpT(
    this.id(),
    this.producerId(),
    this.kind(),
    this.type(),
    (this.rtpParameters() !== null ? this.rtpParameters()!.unpack() : null),
    this.bb!.createObjList(this.consumableRtpEncodings.bind(this), this.consumableRtpEncodingsLength()),
    this.bb!.createScalarList(this.supportedCodecPayloadTypes.bind(this), this.supportedCodecPayloadTypesLength()),
    this.bb!.createScalarList(this.traceEventTypes.bind(this), this.traceEventTypesLength()),
    this.paused(),
    this.producerPaused(),
    this.priorty()
  );
}


unpackTo(_o: BaseConsumerDumpT): void {
  _o.id = this.id();
  _o.producerId = this.producerId();
  _o.kind = this.kind();
  _o.type = this.type();
  _o.rtpParameters = (this.rtpParameters() !== null ? this.rtpParameters()!.unpack() : null);
  _o.consumableRtpEncodings = this.bb!.createObjList(this.consumableRtpEncodings.bind(this), this.consumableRtpEncodingsLength());
  _o.supportedCodecPayloadTypes = this.bb!.createScalarList(this.supportedCodecPayloadTypes.bind(this), this.supportedCodecPayloadTypesLength());
  _o.traceEventTypes = this.bb!.createScalarList(this.traceEventTypes.bind(this), this.traceEventTypesLength());
  _o.paused = this.paused();
  _o.producerPaused = this.producerPaused();
  _o.priorty = this.priorty();
}
}

export class BaseConsumerDumpT {
constructor(
  public id: string|Uint8Array|null = null,
  public producerId: string|Uint8Array|null = null,
  public kind: MediaKind = MediaKind.ALL,
  public type: string|Uint8Array|null = null,
  public rtpParameters: RtpParametersT|null = null,
  public consumableRtpEncodings: (RtpEncodingParametersT)[] = [],
  public supportedCodecPayloadTypes: (number)[] = [],
  public traceEventTypes: (string)[] = [],
  public paused: boolean = false,
  public producerPaused: boolean = false,
  public priorty: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const producerId = (this.producerId !== null ? builder.createString(this.producerId!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const rtpParameters = (this.rtpParameters !== null ? this.rtpParameters!.pack(builder) : 0);
  const consumableRtpEncodings = BaseConsumerDump.createConsumableRtpEncodingsVector(builder, builder.createObjectOffsetList(this.consumableRtpEncodings));
  const supportedCodecPayloadTypes = BaseConsumerDump.createSupportedCodecPayloadTypesVector(builder, this.supportedCodecPayloadTypes);
  const traceEventTypes = BaseConsumerDump.createTraceEventTypesVector(builder, builder.createObjectOffsetList(this.traceEventTypes));

  BaseConsumerDump.startBaseConsumerDump(builder);
  BaseConsumerDump.addId(builder, id);
  BaseConsumerDump.addProducerId(builder, producerId);
  BaseConsumerDump.addKind(builder, this.kind);
  BaseConsumerDump.addType(builder, type);
  BaseConsumerDump.addRtpParameters(builder, rtpParameters);
  BaseConsumerDump.addConsumableRtpEncodings(builder, consumableRtpEncodings);
  BaseConsumerDump.addSupportedCodecPayloadTypes(builder, supportedCodecPayloadTypes);
  BaseConsumerDump.addTraceEventTypes(builder, traceEventTypes);
  BaseConsumerDump.addPaused(builder, this.paused);
  BaseConsumerDump.addProducerPaused(builder, this.producerPaused);
  BaseConsumerDump.addPriorty(builder, this.priorty);

  return BaseConsumerDump.endBaseConsumerDump(builder);
}
}
