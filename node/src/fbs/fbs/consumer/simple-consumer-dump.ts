// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DumpResponse, DumpResponseT } from '../../fbs/consumer/dump-response';
import { Dump, DumpT } from '../../fbs/rtp-stream/dump';


export class SimpleConsumerDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SimpleConsumerDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSimpleConsumerDump(bb:flatbuffers.ByteBuffer, obj?:SimpleConsumerDump):SimpleConsumerDump {
  return (obj || new SimpleConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSimpleConsumerDump(bb:flatbuffers.ByteBuffer, obj?:SimpleConsumerDump):SimpleConsumerDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SimpleConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:DumpResponse):DumpResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DumpResponse()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rtpStream(obj?:Dump):Dump|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Dump()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSimpleConsumerDump(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addRtpStream(builder:flatbuffers.Builder, rtpStreamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rtpStreamOffset, 0);
}

static endSimpleConsumerDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // base
  builder.requiredField(offset, 6) // rtp_stream
  return offset;
}


unpack(): SimpleConsumerDumpT {
  return new SimpleConsumerDumpT(
    (this.base() !== null ? this.base()!.unpack() : null),
    (this.rtpStream() !== null ? this.rtpStream()!.unpack() : null)
  );
}


unpackTo(_o: SimpleConsumerDumpT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
  _o.rtpStream = (this.rtpStream() !== null ? this.rtpStream()!.unpack() : null);
}
}

export class SimpleConsumerDumpT {
constructor(
  public base: DumpResponseT|null = null,
  public rtpStream: DumpT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);
  const rtpStream = (this.rtpStream !== null ? this.rtpStream!.pack(builder) : 0);

  SimpleConsumerDump.startSimpleConsumerDump(builder);
  SimpleConsumerDump.addBase(builder, base);
  SimpleConsumerDump.addRtpStream(builder, rtpStream);

  return SimpleConsumerDump.endSimpleConsumerDump(builder);
}
}
