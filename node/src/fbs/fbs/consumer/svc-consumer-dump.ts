// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DumpResponse, DumpResponseT } from '../../fbs/consumer/dump-response';
import { Dump, DumpT } from '../../fbs/rtp-stream/dump';


export class SvcConsumerDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SvcConsumerDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSvcConsumerDump(bb:flatbuffers.ByteBuffer, obj?:SvcConsumerDump):SvcConsumerDump {
  return (obj || new SvcConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSvcConsumerDump(bb:flatbuffers.ByteBuffer, obj?:SvcConsumerDump):SvcConsumerDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SvcConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:DumpResponse):DumpResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DumpResponse()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rtpStream(obj?:Dump):Dump|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Dump()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

preferredSpatialLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

targetSpatialLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

currentSpatialLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

preferredTemporalLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

targetTemporalLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

currentTemporalLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startSvcConsumerDump(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addRtpStream(builder:flatbuffers.Builder, rtpStreamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rtpStreamOffset, 0);
}

static addPreferredSpatialLayer(builder:flatbuffers.Builder, preferredSpatialLayer:number) {
  builder.addFieldInt16(2, preferredSpatialLayer, 0);
}

static addTargetSpatialLayer(builder:flatbuffers.Builder, targetSpatialLayer:number) {
  builder.addFieldInt16(3, targetSpatialLayer, 0);
}

static addCurrentSpatialLayer(builder:flatbuffers.Builder, currentSpatialLayer:number) {
  builder.addFieldInt16(4, currentSpatialLayer, 0);
}

static addPreferredTemporalLayer(builder:flatbuffers.Builder, preferredTemporalLayer:number) {
  builder.addFieldInt16(5, preferredTemporalLayer, 0);
}

static addTargetTemporalLayer(builder:flatbuffers.Builder, targetTemporalLayer:number) {
  builder.addFieldInt16(6, targetTemporalLayer, 0);
}

static addCurrentTemporalLayer(builder:flatbuffers.Builder, currentTemporalLayer:number) {
  builder.addFieldInt16(7, currentTemporalLayer, 0);
}

static endSvcConsumerDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // base
  builder.requiredField(offset, 6) // rtp_stream
  return offset;
}


unpack(): SvcConsumerDumpT {
  return new SvcConsumerDumpT(
    (this.base() !== null ? this.base()!.unpack() : null),
    (this.rtpStream() !== null ? this.rtpStream()!.unpack() : null),
    this.preferredSpatialLayer(),
    this.targetSpatialLayer(),
    this.currentSpatialLayer(),
    this.preferredTemporalLayer(),
    this.targetTemporalLayer(),
    this.currentTemporalLayer()
  );
}


unpackTo(_o: SvcConsumerDumpT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
  _o.rtpStream = (this.rtpStream() !== null ? this.rtpStream()!.unpack() : null);
  _o.preferredSpatialLayer = this.preferredSpatialLayer();
  _o.targetSpatialLayer = this.targetSpatialLayer();
  _o.currentSpatialLayer = this.currentSpatialLayer();
  _o.preferredTemporalLayer = this.preferredTemporalLayer();
  _o.targetTemporalLayer = this.targetTemporalLayer();
  _o.currentTemporalLayer = this.currentTemporalLayer();
}
}

export class SvcConsumerDumpT {
constructor(
  public base: DumpResponseT|null = null,
  public rtpStream: DumpT|null = null,
  public preferredSpatialLayer: number = 0,
  public targetSpatialLayer: number = 0,
  public currentSpatialLayer: number = 0,
  public preferredTemporalLayer: number = 0,
  public targetTemporalLayer: number = 0,
  public currentTemporalLayer: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);
  const rtpStream = (this.rtpStream !== null ? this.rtpStream!.pack(builder) : 0);

  SvcConsumerDump.startSvcConsumerDump(builder);
  SvcConsumerDump.addBase(builder, base);
  SvcConsumerDump.addRtpStream(builder, rtpStream);
  SvcConsumerDump.addPreferredSpatialLayer(builder, this.preferredSpatialLayer);
  SvcConsumerDump.addTargetSpatialLayer(builder, this.targetSpatialLayer);
  SvcConsumerDump.addCurrentSpatialLayer(builder, this.currentSpatialLayer);
  SvcConsumerDump.addPreferredTemporalLayer(builder, this.preferredTemporalLayer);
  SvcConsumerDump.addTargetTemporalLayer(builder, this.targetTemporalLayer);
  SvcConsumerDump.addCurrentTemporalLayer(builder, this.currentTemporalLayer);

  return SvcConsumerDump.endSvcConsumerDump(builder);
}
}
