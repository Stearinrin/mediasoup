// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { OptionalInt16, OptionalInt16T } from '../../fbs/common/optional-int16';


export class ConsumerLayers {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConsumerLayers {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConsumerLayers(bb:flatbuffers.ByteBuffer, obj?:ConsumerLayers):ConsumerLayers {
  return (obj || new ConsumerLayers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConsumerLayers(bb:flatbuffers.ByteBuffer, obj?:ConsumerLayers):ConsumerLayers {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConsumerLayers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

spatialLayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

temporalLayer(obj?:OptionalInt16):OptionalInt16|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new OptionalInt16()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startConsumerLayers(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSpatialLayer(builder:flatbuffers.Builder, spatialLayer:number) {
  builder.addFieldInt16(0, spatialLayer, 0);
}

static addTemporalLayer(builder:flatbuffers.Builder, temporalLayerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, temporalLayerOffset, 0);
}

static endConsumerLayers(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ConsumerLayersT {
  return new ConsumerLayersT(
    this.spatialLayer(),
    (this.temporalLayer() !== null ? this.temporalLayer()!.unpack() : null)
  );
}


unpackTo(_o: ConsumerLayersT): void {
  _o.spatialLayer = this.spatialLayer();
  _o.temporalLayer = (this.temporalLayer() !== null ? this.temporalLayer()!.unpack() : null);
}
}

export class ConsumerLayersT {
constructor(
  public spatialLayer: number = 0,
  public temporalLayer: OptionalInt16T|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const temporalLayer = (this.temporalLayer !== null ? this.temporalLayer!.pack(builder) : 0);

  ConsumerLayers.startConsumerLayers(builder);
  ConsumerLayers.addSpatialLayer(builder, this.spatialLayer);
  ConsumerLayers.addTemporalLayer(builder, temporalLayer);

  return ConsumerLayers.endConsumerLayers(builder);
}
}
