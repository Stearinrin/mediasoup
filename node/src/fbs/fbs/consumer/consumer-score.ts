// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ConsumerScore {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConsumerScore {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConsumerScore(bb:flatbuffers.ByteBuffer, obj?:ConsumerScore):ConsumerScore {
  return (obj || new ConsumerScore()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConsumerScore(bb:flatbuffers.ByteBuffer, obj?:ConsumerScore):ConsumerScore {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConsumerScore()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

producerScore():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

producerScores(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

producerScoresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

producerScoresArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startConsumerScore(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt8(0, score, 0);
}

static addProducerScore(builder:flatbuffers.Builder, producerScore:number) {
  builder.addFieldInt8(1, producerScore, 0);
}

static addProducerScores(builder:flatbuffers.Builder, producerScoresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, producerScoresOffset, 0);
}

static createProducerScoresVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startProducerScoresVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endConsumerScore(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConsumerScore(builder:flatbuffers.Builder, score:number, producerScore:number, producerScoresOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConsumerScore.startConsumerScore(builder);
  ConsumerScore.addScore(builder, score);
  ConsumerScore.addProducerScore(builder, producerScore);
  ConsumerScore.addProducerScores(builder, producerScoresOffset);
  return ConsumerScore.endConsumerScore(builder);
}

unpack(): ConsumerScoreT {
  return new ConsumerScoreT(
    this.score(),
    this.producerScore(),
    this.bb!.createScalarList(this.producerScores.bind(this), this.producerScoresLength())
  );
}


unpackTo(_o: ConsumerScoreT): void {
  _o.score = this.score();
  _o.producerScore = this.producerScore();
  _o.producerScores = this.bb!.createScalarList(this.producerScores.bind(this), this.producerScoresLength());
}
}

export class ConsumerScoreT {
constructor(
  public score: number = 0,
  public producerScore: number = 0,
  public producerScores: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const producerScores = ConsumerScore.createProducerScoresVector(builder, this.producerScores);

  return ConsumerScore.createConsumerScore(builder,
    this.score,
    this.producerScore,
    producerScores
  );
}
}
