// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class GetBufferedAmountResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetBufferedAmountResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetBufferedAmountResponse(bb:flatbuffers.ByteBuffer, obj?:GetBufferedAmountResponse):GetBufferedAmountResponse {
  return (obj || new GetBufferedAmountResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetBufferedAmountResponse(bb:flatbuffers.ByteBuffer, obj?:GetBufferedAmountResponse):GetBufferedAmountResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetBufferedAmountResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bufferedAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startGetBufferedAmountResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBufferedAmount(builder:flatbuffers.Builder, bufferedAmount:number) {
  builder.addFieldInt32(0, bufferedAmount, 0);
}

static endGetBufferedAmountResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetBufferedAmountResponse(builder:flatbuffers.Builder, bufferedAmount:number):flatbuffers.Offset {
  GetBufferedAmountResponse.startGetBufferedAmountResponse(builder);
  GetBufferedAmountResponse.addBufferedAmount(builder, bufferedAmount);
  return GetBufferedAmountResponse.endGetBufferedAmountResponse(builder);
}

unpack(): GetBufferedAmountResponseT {
  return new GetBufferedAmountResponseT(
    this.bufferedAmount()
  );
}


unpackTo(_o: GetBufferedAmountResponseT): void {
  _o.bufferedAmount = this.bufferedAmount();
}
}

export class GetBufferedAmountResponseT {
constructor(
  public bufferedAmount: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return GetBufferedAmountResponse.createGetBufferedAmountResponse(builder,
    this.bufferedAmount
  );
}
}
