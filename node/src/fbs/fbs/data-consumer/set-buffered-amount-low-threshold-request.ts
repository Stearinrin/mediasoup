// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SetBufferedAmountLowThresholdRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetBufferedAmountLowThresholdRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetBufferedAmountLowThresholdRequest(bb:flatbuffers.ByteBuffer, obj?:SetBufferedAmountLowThresholdRequest):SetBufferedAmountLowThresholdRequest {
  return (obj || new SetBufferedAmountLowThresholdRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetBufferedAmountLowThresholdRequest(bb:flatbuffers.ByteBuffer, obj?:SetBufferedAmountLowThresholdRequest):SetBufferedAmountLowThresholdRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetBufferedAmountLowThresholdRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

threshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startSetBufferedAmountLowThresholdRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addThreshold(builder:flatbuffers.Builder, threshold:number) {
  builder.addFieldInt32(0, threshold, 0);
}

static endSetBufferedAmountLowThresholdRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSetBufferedAmountLowThresholdRequest(builder:flatbuffers.Builder, threshold:number):flatbuffers.Offset {
  SetBufferedAmountLowThresholdRequest.startSetBufferedAmountLowThresholdRequest(builder);
  SetBufferedAmountLowThresholdRequest.addThreshold(builder, threshold);
  return SetBufferedAmountLowThresholdRequest.endSetBufferedAmountLowThresholdRequest(builder);
}

unpack(): SetBufferedAmountLowThresholdRequestT {
  return new SetBufferedAmountLowThresholdRequestT(
    this.threshold()
  );
}


unpackTo(_o: SetBufferedAmountLowThresholdRequestT): void {
  _o.threshold = this.threshold();
}
}

export class SetBufferedAmountLowThresholdRequestT {
constructor(
  public threshold: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SetBufferedAmountLowThresholdRequest.createSetBufferedAmountLowThresholdRequest(builder,
    this.threshold
  );
}
}
