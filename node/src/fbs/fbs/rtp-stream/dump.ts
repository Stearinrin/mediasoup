// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Params, ParamsT } from '../../fbs/rtp-stream/params';
import { RtxDump, RtxDumpT } from '../../fbs/rtx-stream/rtx-dump';


export class Dump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Dump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDump(bb:flatbuffers.ByteBuffer, obj?:Dump):Dump {
  return (obj || new Dump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDump(bb:flatbuffers.ByteBuffer, obj?:Dump):Dump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Dump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

params(obj?:Params):Params|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Params()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

rtxStream(obj?:RtxDump):RtxDump|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new RtxDump()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDump(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addParams(builder:flatbuffers.Builder, paramsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, paramsOffset, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt8(1, score, 0);
}

static addRtxStream(builder:flatbuffers.Builder, rtxStreamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rtxStreamOffset, 0);
}

static endDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // params
  return offset;
}


unpack(): DumpT {
  return new DumpT(
    (this.params() !== null ? this.params()!.unpack() : null),
    this.score(),
    (this.rtxStream() !== null ? this.rtxStream()!.unpack() : null)
  );
}


unpackTo(_o: DumpT): void {
  _o.params = (this.params() !== null ? this.params()!.unpack() : null);
  _o.score = this.score();
  _o.rtxStream = (this.rtxStream() !== null ? this.rtxStream()!.unpack() : null);
}
}

export class DumpT {
constructor(
  public params: ParamsT|null = null,
  public score: number = 0,
  public rtxStream: RtxDumpT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const params = (this.params !== null ? this.params!.pack(builder) : 0);
  const rtxStream = (this.rtxStream !== null ? this.rtxStream!.pack(builder) : 0);

  Dump.startDump(builder);
  Dump.addParams(builder, params);
  Dump.addScore(builder, this.score);
  Dump.addRtxStream(builder, rtxStream);

  return Dump.endDump(builder);
}
}
