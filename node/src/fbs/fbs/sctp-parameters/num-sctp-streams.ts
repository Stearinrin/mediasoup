// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class NumSctpStreams {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NumSctpStreams {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNumSctpStreams(bb:flatbuffers.ByteBuffer, obj?:NumSctpStreams):NumSctpStreams {
  return (obj || new NumSctpStreams()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNumSctpStreams(bb:flatbuffers.ByteBuffer, obj?:NumSctpStreams):NumSctpStreams {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NumSctpStreams()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

os():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mis():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startNumSctpStreams(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOs(builder:flatbuffers.Builder, os:number) {
  builder.addFieldInt32(0, os, 0);
}

static addMis(builder:flatbuffers.Builder, mis:number) {
  builder.addFieldInt32(1, mis, 0);
}

static endNumSctpStreams(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNumSctpStreams(builder:flatbuffers.Builder, os:number, mis:number):flatbuffers.Offset {
  NumSctpStreams.startNumSctpStreams(builder);
  NumSctpStreams.addOs(builder, os);
  NumSctpStreams.addMis(builder, mis);
  return NumSctpStreams.endNumSctpStreams(builder);
}

unpack(): NumSctpStreamsT {
  return new NumSctpStreamsT(
    this.os(),
    this.mis()
  );
}


unpackTo(_o: NumSctpStreamsT): void {
  _o.os = this.os();
  _o.mis = this.mis();
}
}

export class NumSctpStreamsT {
constructor(
  public os: number = 0,
  public mis: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return NumSctpStreams.createNumSctpStreams(builder,
    this.os,
    this.mis
  );
}
}
