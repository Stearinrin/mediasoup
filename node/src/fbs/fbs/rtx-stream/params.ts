// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Params {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Params {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParams(bb:flatbuffers.ByteBuffer, obj?:Params):Params {
  return (obj || new Params()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParams(bb:flatbuffers.ByteBuffer, obj?:Params):Params {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Params()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ssrc():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

payloadType():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

mimeType():string|null
mimeType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mimeType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

clockRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

rrid():string|null
rrid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rrid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cname():string|null
cname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cname(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startParams(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addSsrc(builder:flatbuffers.Builder, ssrc:number) {
  builder.addFieldInt32(0, ssrc, 0);
}

static addPayloadType(builder:flatbuffers.Builder, payloadType:number) {
  builder.addFieldInt8(1, payloadType, 0);
}

static addMimeType(builder:flatbuffers.Builder, mimeTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, mimeTypeOffset, 0);
}

static addClockRate(builder:flatbuffers.Builder, clockRate:number) {
  builder.addFieldInt32(3, clockRate, 0);
}

static addRrid(builder:flatbuffers.Builder, rridOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, rridOffset, 0);
}

static addCname(builder:flatbuffers.Builder, cnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, cnameOffset, 0);
}

static endParams(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // mime_type
  builder.requiredField(offset, 14) // cname
  return offset;
}

static createParams(builder:flatbuffers.Builder, ssrc:number, payloadType:number, mimeTypeOffset:flatbuffers.Offset, clockRate:number, rridOffset:flatbuffers.Offset, cnameOffset:flatbuffers.Offset):flatbuffers.Offset {
  Params.startParams(builder);
  Params.addSsrc(builder, ssrc);
  Params.addPayloadType(builder, payloadType);
  Params.addMimeType(builder, mimeTypeOffset);
  Params.addClockRate(builder, clockRate);
  Params.addRrid(builder, rridOffset);
  Params.addCname(builder, cnameOffset);
  return Params.endParams(builder);
}

unpack(): ParamsT {
  return new ParamsT(
    this.ssrc(),
    this.payloadType(),
    this.mimeType(),
    this.clockRate(),
    this.rrid(),
    this.cname()
  );
}


unpackTo(_o: ParamsT): void {
  _o.ssrc = this.ssrc();
  _o.payloadType = this.payloadType();
  _o.mimeType = this.mimeType();
  _o.clockRate = this.clockRate();
  _o.rrid = this.rrid();
  _o.cname = this.cname();
}
}

export class ParamsT {
constructor(
  public ssrc: number = 0,
  public payloadType: number = 0,
  public mimeType: string|Uint8Array|null = null,
  public clockRate: number = 0,
  public rrid: string|Uint8Array|null = null,
  public cname: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const mimeType = (this.mimeType !== null ? builder.createString(this.mimeType!) : 0);
  const rrid = (this.rrid !== null ? builder.createString(this.rrid!) : 0);
  const cname = (this.cname !== null ? builder.createString(this.cname!) : 0);

  return Params.createParams(builder,
    this.ssrc,
    this.payloadType,
    mimeType,
    this.clockRate,
    rrid,
    cname
  );
}
}
