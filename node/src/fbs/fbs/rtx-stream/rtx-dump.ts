// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Params, ParamsT } from '../../fbs/rtx-stream/params';


export class RtxDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RtxDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtxDump(bb:flatbuffers.ByteBuffer, obj?:RtxDump):RtxDump {
  return (obj || new RtxDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtxDump(bb:flatbuffers.ByteBuffer, obj?:RtxDump):RtxDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RtxDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

params(obj?:Params):Params|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Params()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startRtxDump(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addParams(builder:flatbuffers.Builder, paramsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, paramsOffset, 0);
}

static endRtxDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // params
  return offset;
}

static createRtxDump(builder:flatbuffers.Builder, paramsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RtxDump.startRtxDump(builder);
  RtxDump.addParams(builder, paramsOffset);
  return RtxDump.endRtxDump(builder);
}

unpack(): RtxDumpT {
  return new RtxDumpT(
    (this.params() !== null ? this.params()!.unpack() : null)
  );
}


unpackTo(_o: RtxDumpT): void {
  _o.params = (this.params() !== null ? this.params()!.unpack() : null);
}
}

export class RtxDumpT {
constructor(
  public params: ParamsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const params = (this.params !== null ? this.params!.pack(builder) : 0);

  return RtxDump.createRtxDump(builder,
    params
  );
}
}
