// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class OptionalInt16 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OptionalInt16 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOptionalInt16(bb:flatbuffers.ByteBuffer, obj?:OptionalInt16):OptionalInt16 {
  return (obj || new OptionalInt16()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOptionalInt16(bb:flatbuffers.ByteBuffer, obj?:OptionalInt16):OptionalInt16 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OptionalInt16()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startOptionalInt16(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt16(0, value, 0);
}

static endOptionalInt16(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOptionalInt16(builder:flatbuffers.Builder, value:number):flatbuffers.Offset {
  OptionalInt16.startOptionalInt16(builder);
  OptionalInt16.addValue(builder, value);
  return OptionalInt16.endOptionalInt16(builder);
}

unpack(): OptionalInt16T {
  return new OptionalInt16T(
    this.value()
  );
}


unpackTo(_o: OptionalInt16T): void {
  _o.value = this.value();
}
}

export class OptionalInt16T {
constructor(
  public value: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return OptionalInt16.createOptionalInt16(builder,
    this.value
  );
}
}
