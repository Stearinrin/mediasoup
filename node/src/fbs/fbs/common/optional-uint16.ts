// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class OptionalUint16 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OptionalUint16 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOptionalUint16(bb:flatbuffers.ByteBuffer, obj?:OptionalUint16):OptionalUint16 {
  return (obj || new OptionalUint16()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOptionalUint16(bb:flatbuffers.ByteBuffer, obj?:OptionalUint16):OptionalUint16 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OptionalUint16()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startOptionalUint16(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt16(0, value, 0);
}

static endOptionalUint16(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOptionalUint16(builder:flatbuffers.Builder, value:number):flatbuffers.Offset {
  OptionalUint16.startOptionalUint16(builder);
  OptionalUint16.addValue(builder, value);
  return OptionalUint16.endOptionalUint16(builder);
}

unpack(): OptionalUint16T {
  return new OptionalUint16T(
    this.value()
  );
}


unpackTo(_o: OptionalUint16T): void {
  _o.value = this.value();
}
}

export class OptionalUint16T {
constructor(
  public value: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return OptionalUint16.createOptionalUint16(builder,
    this.value
  );
}
}
