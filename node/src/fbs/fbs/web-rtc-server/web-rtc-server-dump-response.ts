// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { IceUserNameFragment, IceUserNameFragmentT } from '../../fbs/web-rtc-server/ice-user-name-fragment';
import { IpPort, IpPortT } from '../../fbs/web-rtc-server/ip-port';
import { TupleHash, TupleHashT } from '../../fbs/web-rtc-server/tuple-hash';


export class WebRtcServerDumpResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WebRtcServerDumpResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWebRtcServerDumpResponse(bb:flatbuffers.ByteBuffer, obj?:WebRtcServerDumpResponse):WebRtcServerDumpResponse {
  return (obj || new WebRtcServerDumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWebRtcServerDumpResponse(bb:flatbuffers.ByteBuffer, obj?:WebRtcServerDumpResponse):WebRtcServerDumpResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WebRtcServerDumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

udpSockets(index: number, obj?:IpPort):IpPort|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new IpPort()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

udpSocketsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tcpServers(index: number, obj?:IpPort):IpPort|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new IpPort()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tcpServersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

webRtcTransportIds(index: number):string
webRtcTransportIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
webRtcTransportIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

webRtcTransportIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

localIceUsernameFragments(index: number, obj?:IceUserNameFragment):IceUserNameFragment|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new IceUserNameFragment()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

localIceUsernameFragmentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tupleHashes(index: number, obj?:TupleHash):TupleHash|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TupleHash()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tupleHashesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startWebRtcServerDumpResponse(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addUdpSockets(builder:flatbuffers.Builder, udpSocketsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, udpSocketsOffset, 0);
}

static createUdpSocketsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUdpSocketsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTcpServers(builder:flatbuffers.Builder, tcpServersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, tcpServersOffset, 0);
}

static createTcpServersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTcpServersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWebRtcTransportIds(builder:flatbuffers.Builder, webRtcTransportIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, webRtcTransportIdsOffset, 0);
}

static createWebRtcTransportIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWebRtcTransportIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalIceUsernameFragments(builder:flatbuffers.Builder, localIceUsernameFragmentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, localIceUsernameFragmentsOffset, 0);
}

static createLocalIceUsernameFragmentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalIceUsernameFragmentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTupleHashes(builder:flatbuffers.Builder, tupleHashesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tupleHashesOffset, 0);
}

static createTupleHashesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTupleHashesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endWebRtcServerDumpResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  return offset;
}

static createWebRtcServerDumpResponse(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, udpSocketsOffset:flatbuffers.Offset, tcpServersOffset:flatbuffers.Offset, webRtcTransportIdsOffset:flatbuffers.Offset, localIceUsernameFragmentsOffset:flatbuffers.Offset, tupleHashesOffset:flatbuffers.Offset):flatbuffers.Offset {
  WebRtcServerDumpResponse.startWebRtcServerDumpResponse(builder);
  WebRtcServerDumpResponse.addId(builder, idOffset);
  WebRtcServerDumpResponse.addUdpSockets(builder, udpSocketsOffset);
  WebRtcServerDumpResponse.addTcpServers(builder, tcpServersOffset);
  WebRtcServerDumpResponse.addWebRtcTransportIds(builder, webRtcTransportIdsOffset);
  WebRtcServerDumpResponse.addLocalIceUsernameFragments(builder, localIceUsernameFragmentsOffset);
  WebRtcServerDumpResponse.addTupleHashes(builder, tupleHashesOffset);
  return WebRtcServerDumpResponse.endWebRtcServerDumpResponse(builder);
}

unpack(): WebRtcServerDumpResponseT {
  return new WebRtcServerDumpResponseT(
    this.id(),
    this.bb!.createObjList(this.udpSockets.bind(this), this.udpSocketsLength()),
    this.bb!.createObjList(this.tcpServers.bind(this), this.tcpServersLength()),
    this.bb!.createScalarList(this.webRtcTransportIds.bind(this), this.webRtcTransportIdsLength()),
    this.bb!.createObjList(this.localIceUsernameFragments.bind(this), this.localIceUsernameFragmentsLength()),
    this.bb!.createObjList(this.tupleHashes.bind(this), this.tupleHashesLength())
  );
}


unpackTo(_o: WebRtcServerDumpResponseT): void {
  _o.id = this.id();
  _o.udpSockets = this.bb!.createObjList(this.udpSockets.bind(this), this.udpSocketsLength());
  _o.tcpServers = this.bb!.createObjList(this.tcpServers.bind(this), this.tcpServersLength());
  _o.webRtcTransportIds = this.bb!.createScalarList(this.webRtcTransportIds.bind(this), this.webRtcTransportIdsLength());
  _o.localIceUsernameFragments = this.bb!.createObjList(this.localIceUsernameFragments.bind(this), this.localIceUsernameFragmentsLength());
  _o.tupleHashes = this.bb!.createObjList(this.tupleHashes.bind(this), this.tupleHashesLength());
}
}

export class WebRtcServerDumpResponseT {
constructor(
  public id: string|Uint8Array|null = null,
  public udpSockets: (IpPortT)[] = [],
  public tcpServers: (IpPortT)[] = [],
  public webRtcTransportIds: (string)[] = [],
  public localIceUsernameFragments: (IceUserNameFragmentT)[] = [],
  public tupleHashes: (TupleHashT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const udpSockets = WebRtcServerDumpResponse.createUdpSocketsVector(builder, builder.createObjectOffsetList(this.udpSockets));
  const tcpServers = WebRtcServerDumpResponse.createTcpServersVector(builder, builder.createObjectOffsetList(this.tcpServers));
  const webRtcTransportIds = WebRtcServerDumpResponse.createWebRtcTransportIdsVector(builder, builder.createObjectOffsetList(this.webRtcTransportIds));
  const localIceUsernameFragments = WebRtcServerDumpResponse.createLocalIceUsernameFragmentsVector(builder, builder.createObjectOffsetList(this.localIceUsernameFragments));
  const tupleHashes = WebRtcServerDumpResponse.createTupleHashesVector(builder, builder.createObjectOffsetList(this.tupleHashes));

  return WebRtcServerDumpResponse.createWebRtcServerDumpResponse(builder,
    id,
    udpSockets,
    tcpServers,
    webRtcTransportIds,
    localIceUsernameFragments,
    tupleHashes
  );
}
}
