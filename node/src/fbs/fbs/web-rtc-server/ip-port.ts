// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class IpPort {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IpPort {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIpPort(bb:flatbuffers.ByteBuffer, obj?:IpPort):IpPort {
  return (obj || new IpPort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIpPort(bb:flatbuffers.ByteBuffer, obj?:IpPort):IpPort {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IpPort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ip():string|null
ip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startIpPort(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIp(builder:flatbuffers.Builder, ipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ipOffset, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(1, port, 0);
}

static endIpPort(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // ip
  return offset;
}

static createIpPort(builder:flatbuffers.Builder, ipOffset:flatbuffers.Offset, port:number):flatbuffers.Offset {
  IpPort.startIpPort(builder);
  IpPort.addIp(builder, ipOffset);
  IpPort.addPort(builder, port);
  return IpPort.endIpPort(builder);
}

unpack(): IpPortT {
  return new IpPortT(
    this.ip(),
    this.port()
  );
}


unpackTo(_o: IpPortT): void {
  _o.ip = this.ip();
  _o.port = this.port();
}
}

export class IpPortT {
constructor(
  public ip: string|Uint8Array|null = null,
  public port: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ip = (this.ip !== null ? builder.createString(this.ip!) : 0);

  return IpPort.createIpPort(builder,
    ip,
    this.port
  );
}
}
