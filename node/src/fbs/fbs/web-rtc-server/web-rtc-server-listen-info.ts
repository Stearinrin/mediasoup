// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TransportProtocol } from '../../fbs/transport/transport-protocol';


export class WebRtcServerListenInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WebRtcServerListenInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWebRtcServerListenInfo(bb:flatbuffers.ByteBuffer, obj?:WebRtcServerListenInfo):WebRtcServerListenInfo {
  return (obj || new WebRtcServerListenInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWebRtcServerListenInfo(bb:flatbuffers.ByteBuffer, obj?:WebRtcServerListenInfo):WebRtcServerListenInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WebRtcServerListenInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

protocol():TransportProtocol {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TransportProtocol.UDP;
}

ip():string|null
ip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

announcedIp():string|null
announcedIp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
announcedIp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startWebRtcServerListenInfo(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addProtocol(builder:flatbuffers.Builder, protocol:TransportProtocol) {
  builder.addFieldInt8(0, protocol, TransportProtocol.UDP);
}

static addIp(builder:flatbuffers.Builder, ipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ipOffset, 0);
}

static addAnnouncedIp(builder:flatbuffers.Builder, announcedIpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, announcedIpOffset, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(3, port, 0);
}

static endWebRtcServerListenInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // ip
  return offset;
}

static createWebRtcServerListenInfo(builder:flatbuffers.Builder, protocol:TransportProtocol, ipOffset:flatbuffers.Offset, announcedIpOffset:flatbuffers.Offset, port:number):flatbuffers.Offset {
  WebRtcServerListenInfo.startWebRtcServerListenInfo(builder);
  WebRtcServerListenInfo.addProtocol(builder, protocol);
  WebRtcServerListenInfo.addIp(builder, ipOffset);
  WebRtcServerListenInfo.addAnnouncedIp(builder, announcedIpOffset);
  WebRtcServerListenInfo.addPort(builder, port);
  return WebRtcServerListenInfo.endWebRtcServerListenInfo(builder);
}

unpack(): WebRtcServerListenInfoT {
  return new WebRtcServerListenInfoT(
    this.protocol(),
    this.ip(),
    this.announcedIp(),
    this.port()
  );
}


unpackTo(_o: WebRtcServerListenInfoT): void {
  _o.protocol = this.protocol();
  _o.ip = this.ip();
  _o.announcedIp = this.announcedIp();
  _o.port = this.port();
}
}

export class WebRtcServerListenInfoT {
constructor(
  public protocol: TransportProtocol = TransportProtocol.UDP,
  public ip: string|Uint8Array|null = null,
  public announcedIp: string|Uint8Array|null = null,
  public port: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ip = (this.ip !== null ? builder.createString(this.ip!) : 0);
  const announcedIp = (this.announcedIp !== null ? builder.createString(this.announcedIp!) : 0);

  return WebRtcServerListenInfo.createWebRtcServerListenInfo(builder,
    this.protocol,
    ip,
    announcedIp,
    this.port
  );
}
}
