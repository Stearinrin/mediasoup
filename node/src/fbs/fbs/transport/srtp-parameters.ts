// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SrtpParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SrtpParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSrtpParameters(bb:flatbuffers.ByteBuffer, obj?:SrtpParameters):SrtpParameters {
  return (obj || new SrtpParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSrtpParameters(bb:flatbuffers.ByteBuffer, obj?:SrtpParameters):SrtpParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SrtpParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cryptoSuite():string|null
cryptoSuite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cryptoSuite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

keyBase64():string|null
keyBase64(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
keyBase64(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSrtpParameters(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCryptoSuite(builder:flatbuffers.Builder, cryptoSuiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, cryptoSuiteOffset, 0);
}

static addKeyBase64(builder:flatbuffers.Builder, keyBase64Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, keyBase64Offset, 0);
}

static endSrtpParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // crypto_suite
  builder.requiredField(offset, 6) // key_base64
  return offset;
}

static createSrtpParameters(builder:flatbuffers.Builder, cryptoSuiteOffset:flatbuffers.Offset, keyBase64Offset:flatbuffers.Offset):flatbuffers.Offset {
  SrtpParameters.startSrtpParameters(builder);
  SrtpParameters.addCryptoSuite(builder, cryptoSuiteOffset);
  SrtpParameters.addKeyBase64(builder, keyBase64Offset);
  return SrtpParameters.endSrtpParameters(builder);
}

unpack(): SrtpParametersT {
  return new SrtpParametersT(
    this.cryptoSuite(),
    this.keyBase64()
  );
}


unpackTo(_o: SrtpParametersT): void {
  _o.cryptoSuite = this.cryptoSuite();
  _o.keyBase64 = this.keyBase64();
}
}

export class SrtpParametersT {
constructor(
  public cryptoSuite: string|Uint8Array|null = null,
  public keyBase64: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cryptoSuite = (this.cryptoSuite !== null ? builder.createString(this.cryptoSuite!) : 0);
  const keyBase64 = (this.keyBase64 !== null ? builder.createString(this.keyBase64!) : 0);

  return SrtpParameters.createSrtpParameters(builder,
    cryptoSuite,
    keyBase64
  );
}
}
