// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class StringStringMap {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StringStringMap {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStringStringMap(bb:flatbuffers.ByteBuffer, obj?:StringStringMap):StringStringMap {
  return (obj || new StringStringMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStringStringMap(bb:flatbuffers.ByteBuffer, obj?:StringStringMap):StringStringMap {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StringStringMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startStringStringMap(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static endStringStringMap(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  builder.requiredField(offset, 6) // value
  return offset;
}

static createStringStringMap(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  StringStringMap.startStringStringMap(builder);
  StringStringMap.addKey(builder, keyOffset);
  StringStringMap.addValue(builder, valueOffset);
  return StringStringMap.endStringStringMap(builder);
}

unpack(): StringStringMapT {
  return new StringStringMapT(
    this.key(),
    this.value()
  );
}


unpackTo(_o: StringStringMapT): void {
  _o.key = this.key();
  _o.value = this.value();
}
}

export class StringStringMapT {
constructor(
  public key: string|Uint8Array|null = null,
  public value: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? builder.createString(this.key!) : 0);
  const value = (this.value !== null ? builder.createString(this.value!) : 0);

  return StringStringMap.createStringStringMap(builder,
    key,
    value
  );
}
}
