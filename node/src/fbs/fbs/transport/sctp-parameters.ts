// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SctpParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SctpParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSctpParameters(bb:flatbuffers.ByteBuffer, obj?:SctpParameters):SctpParameters {
  return (obj || new SctpParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSctpParameters(bb:flatbuffers.ByteBuffer, obj?:SctpParameters):SctpParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SctpParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 5000;
}

os():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

mis():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

maxMessageSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

sendBufferSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

sctpBufferedAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

isDataChannel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSctpParameters(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(0, port, 5000);
}

static addOs(builder:flatbuffers.Builder, os:number) {
  builder.addFieldInt16(1, os, 0);
}

static addMis(builder:flatbuffers.Builder, mis:number) {
  builder.addFieldInt16(2, mis, 0);
}

static addMaxMessageSize(builder:flatbuffers.Builder, maxMessageSize:number) {
  builder.addFieldInt32(3, maxMessageSize, 0);
}

static addSendBufferSize(builder:flatbuffers.Builder, sendBufferSize:number) {
  builder.addFieldInt32(4, sendBufferSize, 0);
}

static addSctpBufferedAmount(builder:flatbuffers.Builder, sctpBufferedAmount:number) {
  builder.addFieldInt32(5, sctpBufferedAmount, 0);
}

static addIsDataChannel(builder:flatbuffers.Builder, isDataChannel:boolean) {
  builder.addFieldInt8(6, +isDataChannel, +false);
}

static endSctpParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSctpParameters(builder:flatbuffers.Builder, port:number, os:number, mis:number, maxMessageSize:number, sendBufferSize:number, sctpBufferedAmount:number, isDataChannel:boolean):flatbuffers.Offset {
  SctpParameters.startSctpParameters(builder);
  SctpParameters.addPort(builder, port);
  SctpParameters.addOs(builder, os);
  SctpParameters.addMis(builder, mis);
  SctpParameters.addMaxMessageSize(builder, maxMessageSize);
  SctpParameters.addSendBufferSize(builder, sendBufferSize);
  SctpParameters.addSctpBufferedAmount(builder, sctpBufferedAmount);
  SctpParameters.addIsDataChannel(builder, isDataChannel);
  return SctpParameters.endSctpParameters(builder);
}

unpack(): SctpParametersT {
  return new SctpParametersT(
    this.port(),
    this.os(),
    this.mis(),
    this.maxMessageSize(),
    this.sendBufferSize(),
    this.sctpBufferedAmount(),
    this.isDataChannel()
  );
}


unpackTo(_o: SctpParametersT): void {
  _o.port = this.port();
  _o.os = this.os();
  _o.mis = this.mis();
  _o.maxMessageSize = this.maxMessageSize();
  _o.sendBufferSize = this.sendBufferSize();
  _o.sctpBufferedAmount = this.sctpBufferedAmount();
  _o.isDataChannel = this.isDataChannel();
}
}

export class SctpParametersT {
constructor(
  public port: number = 5000,
  public os: number = 0,
  public mis: number = 0,
  public maxMessageSize: number = 0,
  public sendBufferSize: number = 0,
  public sctpBufferedAmount: number = 0,
  public isDataChannel: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SctpParameters.createSctpParameters(builder,
    this.port,
    this.os,
    this.mis,
    this.maxMessageSize,
    this.sendBufferSize,
    this.sctpBufferedAmount,
    this.isDataChannel
  );
}
}
