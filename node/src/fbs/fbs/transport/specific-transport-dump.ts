// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SpecificTransportDumpData, unionToSpecificTransportDumpData, unionListToSpecificTransportDumpData } from '../../fbs/transport/specific-transport-dump-data';
import { WebRtcTransportDump, WebRtcTransportDumpT } from '../../fbs/transport/web-rtc-transport-dump';


export class SpecificTransportDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpecificTransportDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpecificTransportDump(bb:flatbuffers.ByteBuffer, obj?:SpecificTransportDump):SpecificTransportDump {
  return (obj || new SpecificTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpecificTransportDump(bb:flatbuffers.ByteBuffer, obj?:SpecificTransportDump):SpecificTransportDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpecificTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataType():SpecificTransportDumpData {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SpecificTransportDumpData.NONE;
}

data<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startSpecificTransportDump(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDataType(builder:flatbuffers.Builder, dataType:SpecificTransportDumpData) {
  builder.addFieldInt8(0, dataType, SpecificTransportDumpData.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static endSpecificTransportDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSpecificTransportDump(builder:flatbuffers.Builder, dataType:SpecificTransportDumpData, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  SpecificTransportDump.startSpecificTransportDump(builder);
  SpecificTransportDump.addDataType(builder, dataType);
  SpecificTransportDump.addData(builder, dataOffset);
  return SpecificTransportDump.endSpecificTransportDump(builder);
}

unpack(): SpecificTransportDumpT {
  return new SpecificTransportDumpT(
    this.dataType(),
    (() => {
      let temp = unionToSpecificTransportDumpData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: SpecificTransportDumpT): void {
  _o.dataType = this.dataType();
  _o.data = (() => {
      let temp = unionToSpecificTransportDumpData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class SpecificTransportDumpT {
constructor(
  public dataType: SpecificTransportDumpData = SpecificTransportDumpData.NONE,
  public data: WebRtcTransportDumpT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const data = builder.createObjectOffset(this.data);

  return SpecificTransportDump.createSpecificTransportDump(builder,
    this.dataType,
    data
  );
}
}
