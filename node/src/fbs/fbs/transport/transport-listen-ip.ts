// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class TransportListenIp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TransportListenIp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTransportListenIp(bb:flatbuffers.ByteBuffer, obj?:TransportListenIp):TransportListenIp {
  return (obj || new TransportListenIp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTransportListenIp(bb:flatbuffers.ByteBuffer, obj?:TransportListenIp):TransportListenIp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TransportListenIp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ip():string|null
ip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

announcedIp():string|null
announcedIp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
announcedIp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTransportListenIp(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIp(builder:flatbuffers.Builder, ipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ipOffset, 0);
}

static addAnnouncedIp(builder:flatbuffers.Builder, announcedIpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, announcedIpOffset, 0);
}

static endTransportListenIp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // ip
  return offset;
}

static createTransportListenIp(builder:flatbuffers.Builder, ipOffset:flatbuffers.Offset, announcedIpOffset:flatbuffers.Offset):flatbuffers.Offset {
  TransportListenIp.startTransportListenIp(builder);
  TransportListenIp.addIp(builder, ipOffset);
  TransportListenIp.addAnnouncedIp(builder, announcedIpOffset);
  return TransportListenIp.endTransportListenIp(builder);
}

unpack(): TransportListenIpT {
  return new TransportListenIpT(
    this.ip(),
    this.announcedIp()
  );
}


unpackTo(_o: TransportListenIpT): void {
  _o.ip = this.ip();
  _o.announcedIp = this.announcedIp();
}
}

export class TransportListenIpT {
constructor(
  public ip: string|Uint8Array|null = null,
  public announcedIp: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ip = (this.ip !== null ? builder.createString(this.ip!) : 0);
  const announcedIp = (this.announcedIp !== null ? builder.createString(this.announcedIp!) : 0);

  return TransportListenIp.createTransportListenIp(builder,
    ip,
    announcedIp
  );
}
}
