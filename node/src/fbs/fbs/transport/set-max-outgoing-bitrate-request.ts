// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SetMaxOutgoingBitrateRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetMaxOutgoingBitrateRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetMaxOutgoingBitrateRequest(bb:flatbuffers.ByteBuffer, obj?:SetMaxOutgoingBitrateRequest):SetMaxOutgoingBitrateRequest {
  return (obj || new SetMaxOutgoingBitrateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetMaxOutgoingBitrateRequest(bb:flatbuffers.ByteBuffer, obj?:SetMaxOutgoingBitrateRequest):SetMaxOutgoingBitrateRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetMaxOutgoingBitrateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxOutgoingBitrate():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startSetMaxOutgoingBitrateRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMaxOutgoingBitrate(builder:flatbuffers.Builder, maxOutgoingBitrate:number) {
  builder.addFieldInt32(0, maxOutgoingBitrate, 0);
}

static endSetMaxOutgoingBitrateRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSetMaxOutgoingBitrateRequest(builder:flatbuffers.Builder, maxOutgoingBitrate:number):flatbuffers.Offset {
  SetMaxOutgoingBitrateRequest.startSetMaxOutgoingBitrateRequest(builder);
  SetMaxOutgoingBitrateRequest.addMaxOutgoingBitrate(builder, maxOutgoingBitrate);
  return SetMaxOutgoingBitrateRequest.endSetMaxOutgoingBitrateRequest(builder);
}

unpack(): SetMaxOutgoingBitrateRequestT {
  return new SetMaxOutgoingBitrateRequestT(
    this.maxOutgoingBitrate()
  );
}


unpackTo(_o: SetMaxOutgoingBitrateRequestT): void {
  _o.maxOutgoingBitrate = this.maxOutgoingBitrate();
}
}

export class SetMaxOutgoingBitrateRequestT {
constructor(
  public maxOutgoingBitrate: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SetMaxOutgoingBitrateRequest.createSetMaxOutgoingBitrateRequest(builder,
    this.maxOutgoingBitrate
  );
}
}
