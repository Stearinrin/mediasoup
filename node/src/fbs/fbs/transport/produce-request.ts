// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MediaKind } from '../../fbs/rtp-parameters/media-kind';
import { RtpMapping, RtpMappingT } from '../../fbs/rtp-parameters/rtp-mapping';
import { RtpParameters, RtpParametersT } from '../../fbs/rtp-parameters/rtp-parameters';


export class ProduceRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProduceRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProduceRequest(bb:flatbuffers.ByteBuffer, obj?:ProduceRequest):ProduceRequest {
  return (obj || new ProduceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProduceRequest(bb:flatbuffers.ByteBuffer, obj?:ProduceRequest):ProduceRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProduceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

producerId():string|null
producerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
producerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

kind():MediaKind {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MediaKind.ALL;
}

rtpParameters(obj?:RtpParameters):RtpParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new RtpParameters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rtpMapping(obj?:RtpMapping):RtpMapping|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new RtpMapping()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

keyFrameRequestDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

paused():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startProduceRequest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addProducerId(builder:flatbuffers.Builder, producerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, producerIdOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:MediaKind) {
  builder.addFieldInt8(1, kind, MediaKind.ALL);
}

static addRtpParameters(builder:flatbuffers.Builder, rtpParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rtpParametersOffset, 0);
}

static addRtpMapping(builder:flatbuffers.Builder, rtpMappingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rtpMappingOffset, 0);
}

static addKeyFrameRequestDelay(builder:flatbuffers.Builder, keyFrameRequestDelay:number) {
  builder.addFieldInt16(4, keyFrameRequestDelay, 0);
}

static addPaused(builder:flatbuffers.Builder, paused:boolean) {
  builder.addFieldInt8(5, +paused, +false);
}

static endProduceRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // producer_id
  builder.requiredField(offset, 8) // rtp_parameters
  builder.requiredField(offset, 10) // rtp_mapping
  return offset;
}


unpack(): ProduceRequestT {
  return new ProduceRequestT(
    this.producerId(),
    this.kind(),
    (this.rtpParameters() !== null ? this.rtpParameters()!.unpack() : null),
    (this.rtpMapping() !== null ? this.rtpMapping()!.unpack() : null),
    this.keyFrameRequestDelay(),
    this.paused()
  );
}


unpackTo(_o: ProduceRequestT): void {
  _o.producerId = this.producerId();
  _o.kind = this.kind();
  _o.rtpParameters = (this.rtpParameters() !== null ? this.rtpParameters()!.unpack() : null);
  _o.rtpMapping = (this.rtpMapping() !== null ? this.rtpMapping()!.unpack() : null);
  _o.keyFrameRequestDelay = this.keyFrameRequestDelay();
  _o.paused = this.paused();
}
}

export class ProduceRequestT {
constructor(
  public producerId: string|Uint8Array|null = null,
  public kind: MediaKind = MediaKind.ALL,
  public rtpParameters: RtpParametersT|null = null,
  public rtpMapping: RtpMappingT|null = null,
  public keyFrameRequestDelay: number = 0,
  public paused: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const producerId = (this.producerId !== null ? builder.createString(this.producerId!) : 0);
  const rtpParameters = (this.rtpParameters !== null ? this.rtpParameters!.pack(builder) : 0);
  const rtpMapping = (this.rtpMapping !== null ? this.rtpMapping!.pack(builder) : 0);

  ProduceRequest.startProduceRequest(builder);
  ProduceRequest.addProducerId(builder, producerId);
  ProduceRequest.addKind(builder, this.kind);
  ProduceRequest.addRtpParameters(builder, rtpParameters);
  ProduceRequest.addRtpMapping(builder, rtpMapping);
  ProduceRequest.addKeyFrameRequestDelay(builder, this.keyFrameRequestDelay);
  ProduceRequest.addPaused(builder, this.paused);

  return ProduceRequest.endProduceRequest(builder);
}
}
