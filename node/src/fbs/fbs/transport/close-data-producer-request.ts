// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CloseDataProducerRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CloseDataProducerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCloseDataProducerRequest(bb:flatbuffers.ByteBuffer, obj?:CloseDataProducerRequest):CloseDataProducerRequest {
  return (obj || new CloseDataProducerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCloseDataProducerRequest(bb:flatbuffers.ByteBuffer, obj?:CloseDataProducerRequest):CloseDataProducerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CloseDataProducerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataProducerId():string|null
dataProducerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataProducerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCloseDataProducerRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDataProducerId(builder:flatbuffers.Builder, dataProducerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataProducerIdOffset, 0);
}

static endCloseDataProducerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // data_producer_id
  return offset;
}

static createCloseDataProducerRequest(builder:flatbuffers.Builder, dataProducerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  CloseDataProducerRequest.startCloseDataProducerRequest(builder);
  CloseDataProducerRequest.addDataProducerId(builder, dataProducerIdOffset);
  return CloseDataProducerRequest.endCloseDataProducerRequest(builder);
}

unpack(): CloseDataProducerRequestT {
  return new CloseDataProducerRequestT(
    this.dataProducerId()
  );
}


unpackTo(_o: CloseDataProducerRequestT): void {
  _o.dataProducerId = this.dataProducerId();
}
}

export class CloseDataProducerRequestT {
constructor(
  public dataProducerId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dataProducerId = (this.dataProducerId !== null ? builder.createString(this.dataProducerId!) : 0);

  return CloseDataProducerRequest.createCloseDataProducerRequest(builder,
    dataProducerId
  );
}
}
