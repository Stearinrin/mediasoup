// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class StringUint8Map {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StringUint8Map {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStringUint8Map(bb:flatbuffers.ByteBuffer, obj?:StringUint8Map):StringUint8Map {
  return (obj || new StringUint8Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStringUint8Map(bb:flatbuffers.ByteBuffer, obj?:StringUint8Map):StringUint8Map {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StringUint8Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startStringUint8Map(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt8(1, value, 0);
}

static endStringUint8Map(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  return offset;
}

static createStringUint8Map(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, value:number):flatbuffers.Offset {
  StringUint8Map.startStringUint8Map(builder);
  StringUint8Map.addKey(builder, keyOffset);
  StringUint8Map.addValue(builder, value);
  return StringUint8Map.endStringUint8Map(builder);
}

unpack(): StringUint8MapT {
  return new StringUint8MapT(
    this.key(),
    this.value()
  );
}


unpackTo(_o: StringUint8MapT): void {
  _o.key = this.key();
  _o.value = this.value();
}
}

export class StringUint8MapT {
constructor(
  public key: string|Uint8Array|null = null,
  public value: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? builder.createString(this.key!) : 0);

  return StringUint8Map.createStringUint8Map(builder,
    key,
    this.value
  );
}
}
