// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CloseConsumerRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CloseConsumerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCloseConsumerRequest(bb:flatbuffers.ByteBuffer, obj?:CloseConsumerRequest):CloseConsumerRequest {
  return (obj || new CloseConsumerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCloseConsumerRequest(bb:flatbuffers.ByteBuffer, obj?:CloseConsumerRequest):CloseConsumerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CloseConsumerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

consumerId():string|null
consumerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
consumerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCloseConsumerRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addConsumerId(builder:flatbuffers.Builder, consumerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, consumerIdOffset, 0);
}

static endCloseConsumerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // consumer_id
  return offset;
}

static createCloseConsumerRequest(builder:flatbuffers.Builder, consumerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  CloseConsumerRequest.startCloseConsumerRequest(builder);
  CloseConsumerRequest.addConsumerId(builder, consumerIdOffset);
  return CloseConsumerRequest.endCloseConsumerRequest(builder);
}

unpack(): CloseConsumerRequestT {
  return new CloseConsumerRequestT(
    this.consumerId()
  );
}


unpackTo(_o: CloseConsumerRequestT): void {
  _o.consumerId = this.consumerId();
}
}

export class CloseConsumerRequestT {
constructor(
  public consumerId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const consumerId = (this.consumerId !== null ? builder.createString(this.consumerId!) : 0);

  return CloseConsumerRequest.createCloseConsumerRequest(builder,
    consumerId
  );
}
}
