// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Fingerprint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Fingerprint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFingerprint(bb:flatbuffers.ByteBuffer, obj?:Fingerprint):Fingerprint {
  return (obj || new Fingerprint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFingerprint(bb:flatbuffers.ByteBuffer, obj?:Fingerprint):Fingerprint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Fingerprint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

algorithm():string|null
algorithm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
algorithm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startFingerprint(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAlgorithm(builder:flatbuffers.Builder, algorithmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, algorithmOffset, 0);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static endFingerprint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // algorithm
  builder.requiredField(offset, 6) // value
  return offset;
}

static createFingerprint(builder:flatbuffers.Builder, algorithmOffset:flatbuffers.Offset, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  Fingerprint.startFingerprint(builder);
  Fingerprint.addAlgorithm(builder, algorithmOffset);
  Fingerprint.addValue(builder, valueOffset);
  return Fingerprint.endFingerprint(builder);
}

unpack(): FingerprintT {
  return new FingerprintT(
    this.algorithm(),
    this.value()
  );
}


unpackTo(_o: FingerprintT): void {
  _o.algorithm = this.algorithm();
  _o.value = this.value();
}
}

export class FingerprintT {
constructor(
  public algorithm: string|Uint8Array|null = null,
  public value: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const algorithm = (this.algorithm !== null ? builder.createString(this.algorithm!) : 0);
  const value = (this.value !== null ? builder.createString(this.value!) : 0);

  return Fingerprint.createFingerprint(builder,
    algorithm,
    value
  );
}
}
