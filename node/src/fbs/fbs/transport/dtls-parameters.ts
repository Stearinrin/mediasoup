// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Fingerprint, FingerprintT } from '../../fbs/transport/fingerprint';


export class DtlsParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DtlsParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDtlsParameters(bb:flatbuffers.ByteBuffer, obj?:DtlsParameters):DtlsParameters {
  return (obj || new DtlsParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDtlsParameters(bb:flatbuffers.ByteBuffer, obj?:DtlsParameters):DtlsParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DtlsParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fingerprints(index: number, obj?:Fingerprint):Fingerprint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Fingerprint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fingerprintsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

role():string|null
role(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
role(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDtlsParameters(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFingerprints(builder:flatbuffers.Builder, fingerprintsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fingerprintsOffset, 0);
}

static createFingerprintsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFingerprintsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRole(builder:flatbuffers.Builder, roleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, roleOffset, 0);
}

static endDtlsParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // fingerprints
  builder.requiredField(offset, 6) // role
  return offset;
}

static createDtlsParameters(builder:flatbuffers.Builder, fingerprintsOffset:flatbuffers.Offset, roleOffset:flatbuffers.Offset):flatbuffers.Offset {
  DtlsParameters.startDtlsParameters(builder);
  DtlsParameters.addFingerprints(builder, fingerprintsOffset);
  DtlsParameters.addRole(builder, roleOffset);
  return DtlsParameters.endDtlsParameters(builder);
}

unpack(): DtlsParametersT {
  return new DtlsParametersT(
    this.bb!.createObjList(this.fingerprints.bind(this), this.fingerprintsLength()),
    this.role()
  );
}


unpackTo(_o: DtlsParametersT): void {
  _o.fingerprints = this.bb!.createObjList(this.fingerprints.bind(this), this.fingerprintsLength());
  _o.role = this.role();
}
}

export class DtlsParametersT {
constructor(
  public fingerprints: (FingerprintT)[] = [],
  public role: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const fingerprints = DtlsParameters.createFingerprintsVector(builder, builder.createObjectOffsetList(this.fingerprints));
  const role = (this.role !== null ? builder.createString(this.role!) : 0);

  return DtlsParameters.createDtlsParameters(builder,
    fingerprints,
    role
  );
}
}
