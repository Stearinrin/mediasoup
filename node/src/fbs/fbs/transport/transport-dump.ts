// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BaseTransportDump, BaseTransportDumpT } from '../../fbs/transport/base-transport-dump';
import { DirectTransportDump, DirectTransportDumpT } from '../../fbs/transport/direct-transport-dump';
import { PipeTransportDump, PipeTransportDumpT } from '../../fbs/transport/pipe-transport-dump';
import { PlainTransportDump, PlainTransportDumpT } from '../../fbs/transport/plain-transport-dump';
import { TransportDumpData, unionToTransportDumpData, unionListToTransportDumpData } from '../../fbs/transport/transport-dump-data';
import { WebRtcTransportDump, WebRtcTransportDumpT } from '../../fbs/transport/web-rtc-transport-dump';


export class TransportDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TransportDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTransportDump(bb:flatbuffers.ByteBuffer, obj?:TransportDump):TransportDump {
  return (obj || new TransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTransportDump(bb:flatbuffers.ByteBuffer, obj?:TransportDump):TransportDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataType():TransportDumpData {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TransportDumpData.NONE;
}

data<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startTransportDump(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDataType(builder:flatbuffers.Builder, dataType:TransportDumpData) {
  builder.addFieldInt8(0, dataType, TransportDumpData.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static endTransportDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTransportDump(builder:flatbuffers.Builder, dataType:TransportDumpData, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  TransportDump.startTransportDump(builder);
  TransportDump.addDataType(builder, dataType);
  TransportDump.addData(builder, dataOffset);
  return TransportDump.endTransportDump(builder);
}

unpack(): TransportDumpT {
  return new TransportDumpT(
    this.dataType(),
    (() => {
      let temp = unionToTransportDumpData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: TransportDumpT): void {
  _o.dataType = this.dataType();
  _o.data = (() => {
      let temp = unionToTransportDumpData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class TransportDumpT {
constructor(
  public dataType: TransportDumpData = TransportDumpData.NONE,
  public data: BaseTransportDumpT|DirectTransportDumpT|PipeTransportDumpT|PlainTransportDumpT|WebRtcTransportDumpT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const data = builder.createObjectOffset(this.data);

  return TransportDump.createTransportDump(builder,
    this.dataType,
    data
  );
}
}
