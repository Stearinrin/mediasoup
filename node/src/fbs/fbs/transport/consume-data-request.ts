// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SctpStreamParameters, SctpStreamParametersT } from '../../fbs/sctp-parameters/sctp-stream-parameters';


export class ConsumeDataRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConsumeDataRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConsumeDataRequest(bb:flatbuffers.ByteBuffer, obj?:ConsumeDataRequest):ConsumeDataRequest {
  return (obj || new ConsumeDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConsumeDataRequest(bb:flatbuffers.ByteBuffer, obj?:ConsumeDataRequest):ConsumeDataRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConsumeDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataConsumerId():string|null
dataConsumerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataConsumerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dataProducerId():string|null
dataProducerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataProducerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sctpStreamParameters(obj?:SctpStreamParameters):SctpStreamParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new SctpStreamParameters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

protocol():string|null
protocol(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
protocol(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startConsumeDataRequest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addDataConsumerId(builder:flatbuffers.Builder, dataConsumerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataConsumerIdOffset, 0);
}

static addDataProducerId(builder:flatbuffers.Builder, dataProducerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataProducerIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addSctpStreamParameters(builder:flatbuffers.Builder, sctpStreamParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, sctpStreamParametersOffset, 0);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, labelOffset, 0);
}

static addProtocol(builder:flatbuffers.Builder, protocolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, protocolOffset, 0);
}

static endConsumeDataRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // data_consumer_id
  builder.requiredField(offset, 6) // data_producer_id
  builder.requiredField(offset, 8) // type
  return offset;
}


unpack(): ConsumeDataRequestT {
  return new ConsumeDataRequestT(
    this.dataConsumerId(),
    this.dataProducerId(),
    this.type(),
    (this.sctpStreamParameters() !== null ? this.sctpStreamParameters()!.unpack() : null),
    this.label(),
    this.protocol()
  );
}


unpackTo(_o: ConsumeDataRequestT): void {
  _o.dataConsumerId = this.dataConsumerId();
  _o.dataProducerId = this.dataProducerId();
  _o.type = this.type();
  _o.sctpStreamParameters = (this.sctpStreamParameters() !== null ? this.sctpStreamParameters()!.unpack() : null);
  _o.label = this.label();
  _o.protocol = this.protocol();
}
}

export class ConsumeDataRequestT {
constructor(
  public dataConsumerId: string|Uint8Array|null = null,
  public dataProducerId: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public sctpStreamParameters: SctpStreamParametersT|null = null,
  public label: string|Uint8Array|null = null,
  public protocol: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dataConsumerId = (this.dataConsumerId !== null ? builder.createString(this.dataConsumerId!) : 0);
  const dataProducerId = (this.dataProducerId !== null ? builder.createString(this.dataProducerId!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const sctpStreamParameters = (this.sctpStreamParameters !== null ? this.sctpStreamParameters!.pack(builder) : 0);
  const label = (this.label !== null ? builder.createString(this.label!) : 0);
  const protocol = (this.protocol !== null ? builder.createString(this.protocol!) : 0);

  ConsumeDataRequest.startConsumeDataRequest(builder);
  ConsumeDataRequest.addDataConsumerId(builder, dataConsumerId);
  ConsumeDataRequest.addDataProducerId(builder, dataProducerId);
  ConsumeDataRequest.addType(builder, type);
  ConsumeDataRequest.addSctpStreamParameters(builder, sctpStreamParameters);
  ConsumeDataRequest.addLabel(builder, label);
  ConsumeDataRequest.addProtocol(builder, protocol);

  return ConsumeDataRequest.endConsumeDataRequest(builder);
}
}
