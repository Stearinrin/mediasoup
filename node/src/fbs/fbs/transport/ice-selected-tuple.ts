// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class IceSelectedTuple {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IceSelectedTuple {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIceSelectedTuple(bb:flatbuffers.ByteBuffer, obj?:IceSelectedTuple):IceSelectedTuple {
  return (obj || new IceSelectedTuple()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIceSelectedTuple(bb:flatbuffers.ByteBuffer, obj?:IceSelectedTuple):IceSelectedTuple {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IceSelectedTuple()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

localIp():string|null
localIp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
localIp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

localPort():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

remoteIp():string|null
remoteIp(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
remoteIp(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

remotePort():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

protocol():string|null
protocol(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
protocol(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startIceSelectedTuple(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addLocalIp(builder:flatbuffers.Builder, localIpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, localIpOffset, 0);
}

static addLocalPort(builder:flatbuffers.Builder, localPort:number) {
  builder.addFieldInt16(1, localPort, 0);
}

static addRemoteIp(builder:flatbuffers.Builder, remoteIpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, remoteIpOffset, 0);
}

static addRemotePort(builder:flatbuffers.Builder, remotePort:number) {
  builder.addFieldInt16(3, remotePort, 0);
}

static addProtocol(builder:flatbuffers.Builder, protocolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, protocolOffset, 0);
}

static endIceSelectedTuple(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // local_ip
  builder.requiredField(offset, 8) // remote_ip
  builder.requiredField(offset, 12) // protocol
  return offset;
}

static createIceSelectedTuple(builder:flatbuffers.Builder, localIpOffset:flatbuffers.Offset, localPort:number, remoteIpOffset:flatbuffers.Offset, remotePort:number, protocolOffset:flatbuffers.Offset):flatbuffers.Offset {
  IceSelectedTuple.startIceSelectedTuple(builder);
  IceSelectedTuple.addLocalIp(builder, localIpOffset);
  IceSelectedTuple.addLocalPort(builder, localPort);
  IceSelectedTuple.addRemoteIp(builder, remoteIpOffset);
  IceSelectedTuple.addRemotePort(builder, remotePort);
  IceSelectedTuple.addProtocol(builder, protocolOffset);
  return IceSelectedTuple.endIceSelectedTuple(builder);
}

unpack(): IceSelectedTupleT {
  return new IceSelectedTupleT(
    this.localIp(),
    this.localPort(),
    this.remoteIp(),
    this.remotePort(),
    this.protocol()
  );
}


unpackTo(_o: IceSelectedTupleT): void {
  _o.localIp = this.localIp();
  _o.localPort = this.localPort();
  _o.remoteIp = this.remoteIp();
  _o.remotePort = this.remotePort();
  _o.protocol = this.protocol();
}
}

export class IceSelectedTupleT {
constructor(
  public localIp: string|Uint8Array|null = null,
  public localPort: number = 0,
  public remoteIp: string|Uint8Array|null = null,
  public remotePort: number = 0,
  public protocol: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const localIp = (this.localIp !== null ? builder.createString(this.localIp!) : 0);
  const remoteIp = (this.remoteIp !== null ? builder.createString(this.remoteIp!) : 0);
  const protocol = (this.protocol !== null ? builder.createString(this.protocol!) : 0);

  return IceSelectedTuple.createIceSelectedTuple(builder,
    localIp,
    this.localPort,
    remoteIp,
    this.remotePort,
    protocol
  );
}
}
