// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SrtpParameters, SrtpParametersT } from '../../fbs/transport/srtp-parameters';
import { TransportDump, TransportDumpT } from '../../fbs/transport/transport-dump';
import { Tuple, TupleT } from '../../fbs/transport/tuple';


export class PipeTransportDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PipeTransportDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPipeTransportDump(bb:flatbuffers.ByteBuffer, obj?:PipeTransportDump):PipeTransportDump {
  return (obj || new PipeTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPipeTransportDump(bb:flatbuffers.ByteBuffer, obj?:PipeTransportDump):PipeTransportDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PipeTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:TransportDump):TransportDump|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TransportDump()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

tuple(obj?:Tuple):Tuple|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Tuple()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rtx():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

srtpParameters(obj?:SrtpParameters):SrtpParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new SrtpParameters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPipeTransportDump(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addTuple(builder:flatbuffers.Builder, tupleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tupleOffset, 0);
}

static addRtx(builder:flatbuffers.Builder, rtx:boolean) {
  builder.addFieldInt8(2, +rtx, +false);
}

static addSrtpParameters(builder:flatbuffers.Builder, srtpParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, srtpParametersOffset, 0);
}

static endPipeTransportDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // base
  builder.requiredField(offset, 6) // tuple
  return offset;
}


unpack(): PipeTransportDumpT {
  return new PipeTransportDumpT(
    (this.base() !== null ? this.base()!.unpack() : null),
    (this.tuple() !== null ? this.tuple()!.unpack() : null),
    this.rtx(),
    (this.srtpParameters() !== null ? this.srtpParameters()!.unpack() : null)
  );
}


unpackTo(_o: PipeTransportDumpT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
  _o.tuple = (this.tuple() !== null ? this.tuple()!.unpack() : null);
  _o.rtx = this.rtx();
  _o.srtpParameters = (this.srtpParameters() !== null ? this.srtpParameters()!.unpack() : null);
}
}

export class PipeTransportDumpT {
constructor(
  public base: TransportDumpT|null = null,
  public tuple: TupleT|null = null,
  public rtx: boolean = false,
  public srtpParameters: SrtpParametersT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);
  const tuple = (this.tuple !== null ? this.tuple!.pack(builder) : 0);
  const srtpParameters = (this.srtpParameters !== null ? this.srtpParameters!.pack(builder) : 0);

  PipeTransportDump.startPipeTransportDump(builder);
  PipeTransportDump.addBase(builder, base);
  PipeTransportDump.addTuple(builder, tuple);
  PipeTransportDump.addRtx(builder, this.rtx);
  PipeTransportDump.addSrtpParameters(builder, srtpParameters);

  return PipeTransportDump.endPipeTransportDump(builder);
}
}
