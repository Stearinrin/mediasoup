// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class IceParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IceParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIceParameters(bb:flatbuffers.ByteBuffer, obj?:IceParameters):IceParameters {
  return (obj || new IceParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIceParameters(bb:flatbuffers.ByteBuffer, obj?:IceParameters):IceParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IceParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

usernameFragment():string|null
usernameFragment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
usernameFragment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

password():string|null
password(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
password(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

iceLite():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

static startIceParameters(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addUsernameFragment(builder:flatbuffers.Builder, usernameFragmentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, usernameFragmentOffset, 0);
}

static addPassword(builder:flatbuffers.Builder, passwordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, passwordOffset, 0);
}

static addIceLite(builder:flatbuffers.Builder, iceLite:boolean) {
  builder.addFieldInt8(2, +iceLite, +true);
}

static endIceParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // username_fragment
  builder.requiredField(offset, 6) // password
  return offset;
}

static createIceParameters(builder:flatbuffers.Builder, usernameFragmentOffset:flatbuffers.Offset, passwordOffset:flatbuffers.Offset, iceLite:boolean):flatbuffers.Offset {
  IceParameters.startIceParameters(builder);
  IceParameters.addUsernameFragment(builder, usernameFragmentOffset);
  IceParameters.addPassword(builder, passwordOffset);
  IceParameters.addIceLite(builder, iceLite);
  return IceParameters.endIceParameters(builder);
}

unpack(): IceParametersT {
  return new IceParametersT(
    this.usernameFragment(),
    this.password(),
    this.iceLite()
  );
}


unpackTo(_o: IceParametersT): void {
  _o.usernameFragment = this.usernameFragment();
  _o.password = this.password();
  _o.iceLite = this.iceLite();
}
}

export class IceParametersT {
constructor(
  public usernameFragment: string|Uint8Array|null = null,
  public password: string|Uint8Array|null = null,
  public iceLite: boolean = true
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const usernameFragment = (this.usernameFragment !== null ? builder.createString(this.usernameFragment!) : 0);
  const password = (this.password !== null ? builder.createString(this.password!) : 0);

  return IceParameters.createIceParameters(builder,
    usernameFragment,
    password,
    this.iceLite
  );
}
}
