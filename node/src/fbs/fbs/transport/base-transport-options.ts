// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { NumSctpStreams, NumSctpStreamsT } from '../../fbs/sctp-parameters/num-sctp-streams';


export class BaseTransportOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BaseTransportOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBaseTransportOptions(bb:flatbuffers.ByteBuffer, obj?:BaseTransportOptions):BaseTransportOptions {
  return (obj || new BaseTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBaseTransportOptions(bb:flatbuffers.ByteBuffer, obj?:BaseTransportOptions):BaseTransportOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BaseTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

direct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

maxMessageSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

initialAvailableOutgoingBitrate():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

enableSctp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

numSctpStreams(obj?:NumSctpStreams):NumSctpStreams|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new NumSctpStreams()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

maxSctpMessageSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

sctpSendBufferSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

isDataChannel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startBaseTransportOptions(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addDirect(builder:flatbuffers.Builder, direct:boolean) {
  builder.addFieldInt8(0, +direct, +false);
}

static addMaxMessageSize(builder:flatbuffers.Builder, maxMessageSize:number) {
  builder.addFieldInt32(1, maxMessageSize, 0);
}

static addInitialAvailableOutgoingBitrate(builder:flatbuffers.Builder, initialAvailableOutgoingBitrate:number) {
  builder.addFieldInt32(2, initialAvailableOutgoingBitrate, 0);
}

static addEnableSctp(builder:flatbuffers.Builder, enableSctp:boolean) {
  builder.addFieldInt8(3, +enableSctp, +false);
}

static addNumSctpStreams(builder:flatbuffers.Builder, numSctpStreamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, numSctpStreamsOffset, 0);
}

static addMaxSctpMessageSize(builder:flatbuffers.Builder, maxSctpMessageSize:number) {
  builder.addFieldInt32(5, maxSctpMessageSize, 0);
}

static addSctpSendBufferSize(builder:flatbuffers.Builder, sctpSendBufferSize:number) {
  builder.addFieldInt32(6, sctpSendBufferSize, 0);
}

static addIsDataChannel(builder:flatbuffers.Builder, isDataChannel:boolean) {
  builder.addFieldInt8(7, +isDataChannel, +false);
}

static endBaseTransportOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): BaseTransportOptionsT {
  return new BaseTransportOptionsT(
    this.direct(),
    this.maxMessageSize(),
    this.initialAvailableOutgoingBitrate(),
    this.enableSctp(),
    (this.numSctpStreams() !== null ? this.numSctpStreams()!.unpack() : null),
    this.maxSctpMessageSize(),
    this.sctpSendBufferSize(),
    this.isDataChannel()
  );
}


unpackTo(_o: BaseTransportOptionsT): void {
  _o.direct = this.direct();
  _o.maxMessageSize = this.maxMessageSize();
  _o.initialAvailableOutgoingBitrate = this.initialAvailableOutgoingBitrate();
  _o.enableSctp = this.enableSctp();
  _o.numSctpStreams = (this.numSctpStreams() !== null ? this.numSctpStreams()!.unpack() : null);
  _o.maxSctpMessageSize = this.maxSctpMessageSize();
  _o.sctpSendBufferSize = this.sctpSendBufferSize();
  _o.isDataChannel = this.isDataChannel();
}
}

export class BaseTransportOptionsT {
constructor(
  public direct: boolean = false,
  public maxMessageSize: number = 0,
  public initialAvailableOutgoingBitrate: number = 0,
  public enableSctp: boolean = false,
  public numSctpStreams: NumSctpStreamsT|null = null,
  public maxSctpMessageSize: number = 0,
  public sctpSendBufferSize: number = 0,
  public isDataChannel: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const numSctpStreams = (this.numSctpStreams !== null ? this.numSctpStreams!.pack(builder) : 0);

  BaseTransportOptions.startBaseTransportOptions(builder);
  BaseTransportOptions.addDirect(builder, this.direct);
  BaseTransportOptions.addMaxMessageSize(builder, this.maxMessageSize);
  BaseTransportOptions.addInitialAvailableOutgoingBitrate(builder, this.initialAvailableOutgoingBitrate);
  BaseTransportOptions.addEnableSctp(builder, this.enableSctp);
  BaseTransportOptions.addNumSctpStreams(builder, numSctpStreams);
  BaseTransportOptions.addMaxSctpMessageSize(builder, this.maxSctpMessageSize);
  BaseTransportOptions.addSctpSendBufferSize(builder, this.sctpSendBufferSize);
  BaseTransportOptions.addIsDataChannel(builder, this.isDataChannel);

  return BaseTransportOptions.endBaseTransportOptions(builder);
}
}
