// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StringString, StringStringT } from '../../fbs/common/string-string';
import { Uint32String, Uint32StringT } from '../../fbs/common/uint32string';


export class RtpListener {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RtpListener {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtpListener(bb:flatbuffers.ByteBuffer, obj?:RtpListener):RtpListener {
  return (obj || new RtpListener()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtpListener(bb:flatbuffers.ByteBuffer, obj?:RtpListener):RtpListener {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RtpListener()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ssrcTable(index: number, obj?:Uint32String):Uint32String|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Uint32String()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ssrcTableLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

midTable(index: number, obj?:StringString):StringString|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new StringString()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

midTableLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ridTable(index: number, obj?:StringString):StringString|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new StringString()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ridTableLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRtpListener(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSsrcTable(builder:flatbuffers.Builder, ssrcTableOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ssrcTableOffset, 0);
}

static createSsrcTableVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSsrcTableVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMidTable(builder:flatbuffers.Builder, midTableOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, midTableOffset, 0);
}

static createMidTableVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMidTableVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRidTable(builder:flatbuffers.Builder, ridTableOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ridTableOffset, 0);
}

static createRidTableVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRidTableVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRtpListener(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // ssrc_table
  builder.requiredField(offset, 6) // mid_table
  builder.requiredField(offset, 8) // rid_table
  return offset;
}

static createRtpListener(builder:flatbuffers.Builder, ssrcTableOffset:flatbuffers.Offset, midTableOffset:flatbuffers.Offset, ridTableOffset:flatbuffers.Offset):flatbuffers.Offset {
  RtpListener.startRtpListener(builder);
  RtpListener.addSsrcTable(builder, ssrcTableOffset);
  RtpListener.addMidTable(builder, midTableOffset);
  RtpListener.addRidTable(builder, ridTableOffset);
  return RtpListener.endRtpListener(builder);
}

unpack(): RtpListenerT {
  return new RtpListenerT(
    this.bb!.createObjList(this.ssrcTable.bind(this), this.ssrcTableLength()),
    this.bb!.createObjList(this.midTable.bind(this), this.midTableLength()),
    this.bb!.createObjList(this.ridTable.bind(this), this.ridTableLength())
  );
}


unpackTo(_o: RtpListenerT): void {
  _o.ssrcTable = this.bb!.createObjList(this.ssrcTable.bind(this), this.ssrcTableLength());
  _o.midTable = this.bb!.createObjList(this.midTable.bind(this), this.midTableLength());
  _o.ridTable = this.bb!.createObjList(this.ridTable.bind(this), this.ridTableLength());
}
}

export class RtpListenerT {
constructor(
  public ssrcTable: (Uint32StringT)[] = [],
  public midTable: (StringStringT)[] = [],
  public ridTable: (StringStringT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ssrcTable = RtpListener.createSsrcTableVector(builder, builder.createObjectOffsetList(this.ssrcTable));
  const midTable = RtpListener.createMidTableVector(builder, builder.createObjectOffsetList(this.midTable));
  const ridTable = RtpListener.createRidTableVector(builder, builder.createObjectOffsetList(this.ridTable));

  return RtpListener.createRtpListener(builder,
    ssrcTable,
    midTable,
    ridTable
  );
}
}
