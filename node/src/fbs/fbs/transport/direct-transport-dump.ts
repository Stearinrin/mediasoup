// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DumpResponse, DumpResponseT } from '../../fbs/transport/dump-response';


export class DirectTransportDump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DirectTransportDump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDirectTransportDump(bb:flatbuffers.ByteBuffer, obj?:DirectTransportDump):DirectTransportDump {
  return (obj || new DirectTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDirectTransportDump(bb:flatbuffers.ByteBuffer, obj?:DirectTransportDump):DirectTransportDump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DirectTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:DumpResponse):DumpResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DumpResponse()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDirectTransportDump(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static endDirectTransportDump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // base
  return offset;
}

static createDirectTransportDump(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset):flatbuffers.Offset {
  DirectTransportDump.startDirectTransportDump(builder);
  DirectTransportDump.addBase(builder, baseOffset);
  return DirectTransportDump.endDirectTransportDump(builder);
}

unpack(): DirectTransportDumpT {
  return new DirectTransportDumpT(
    (this.base() !== null ? this.base()!.unpack() : null)
  );
}


unpackTo(_o: DirectTransportDumpT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
}
}

export class DirectTransportDumpT {
constructor(
  public base: DumpResponseT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);

  return DirectTransportDump.createDirectTransportDump(builder,
    base
  );
}
}
