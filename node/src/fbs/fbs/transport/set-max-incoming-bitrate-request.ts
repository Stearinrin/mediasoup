// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SetMaxIncomingBitrateRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetMaxIncomingBitrateRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetMaxIncomingBitrateRequest(bb:flatbuffers.ByteBuffer, obj?:SetMaxIncomingBitrateRequest):SetMaxIncomingBitrateRequest {
  return (obj || new SetMaxIncomingBitrateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetMaxIncomingBitrateRequest(bb:flatbuffers.ByteBuffer, obj?:SetMaxIncomingBitrateRequest):SetMaxIncomingBitrateRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetMaxIncomingBitrateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxIncomingBitrate():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startSetMaxIncomingBitrateRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMaxIncomingBitrate(builder:flatbuffers.Builder, maxIncomingBitrate:number) {
  builder.addFieldInt32(0, maxIncomingBitrate, 0);
}

static endSetMaxIncomingBitrateRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSetMaxIncomingBitrateRequest(builder:flatbuffers.Builder, maxIncomingBitrate:number):flatbuffers.Offset {
  SetMaxIncomingBitrateRequest.startSetMaxIncomingBitrateRequest(builder);
  SetMaxIncomingBitrateRequest.addMaxIncomingBitrate(builder, maxIncomingBitrate);
  return SetMaxIncomingBitrateRequest.endSetMaxIncomingBitrateRequest(builder);
}

unpack(): SetMaxIncomingBitrateRequestT {
  return new SetMaxIncomingBitrateRequestT(
    this.maxIncomingBitrate()
  );
}


unpackTo(_o: SetMaxIncomingBitrateRequestT): void {
  _o.maxIncomingBitrate = this.maxIncomingBitrate();
}
}

export class SetMaxIncomingBitrateRequestT {
constructor(
  public maxIncomingBitrate: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SetMaxIncomingBitrateRequest.createSetMaxIncomingBitrateRequest(builder,
    this.maxIncomingBitrate
  );
}
}
