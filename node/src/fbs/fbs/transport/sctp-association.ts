// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SctpListener, SctpListenerT } from '../../fbs/transport/sctp-listener';
import { SctpParameters, SctpParametersT } from '../../fbs/transport/sctp-parameters';


export class SctpAssociation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SctpAssociation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSctpAssociation(bb:flatbuffers.ByteBuffer, obj?:SctpAssociation):SctpAssociation {
  return (obj || new SctpAssociation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSctpAssociation(bb:flatbuffers.ByteBuffer, obj?:SctpAssociation):SctpAssociation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SctpAssociation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sctpParameters(obj?:SctpParameters):SctpParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SctpParameters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

stcpState():string|null
stcpState(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stcpState(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stcpListener(obj?:SctpListener):SctpListener|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new SctpListener()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSctpAssociation(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSctpParameters(builder:flatbuffers.Builder, sctpParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sctpParametersOffset, 0);
}

static addStcpState(builder:flatbuffers.Builder, stcpStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stcpStateOffset, 0);
}

static addStcpListener(builder:flatbuffers.Builder, stcpListenerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stcpListenerOffset, 0);
}

static endSctpAssociation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // sctp_parameters
  builder.requiredField(offset, 6) // stcp_state
  builder.requiredField(offset, 8) // stcp_listener
  return offset;
}


unpack(): SctpAssociationT {
  return new SctpAssociationT(
    (this.sctpParameters() !== null ? this.sctpParameters()!.unpack() : null),
    this.stcpState(),
    (this.stcpListener() !== null ? this.stcpListener()!.unpack() : null)
  );
}


unpackTo(_o: SctpAssociationT): void {
  _o.sctpParameters = (this.sctpParameters() !== null ? this.sctpParameters()!.unpack() : null);
  _o.stcpState = this.stcpState();
  _o.stcpListener = (this.stcpListener() !== null ? this.stcpListener()!.unpack() : null);
}
}

export class SctpAssociationT {
constructor(
  public sctpParameters: SctpParametersT|null = null,
  public stcpState: string|Uint8Array|null = null,
  public stcpListener: SctpListenerT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sctpParameters = (this.sctpParameters !== null ? this.sctpParameters!.pack(builder) : 0);
  const stcpState = (this.stcpState !== null ? builder.createString(this.stcpState!) : 0);
  const stcpListener = (this.stcpListener !== null ? this.stcpListener!.pack(builder) : 0);

  SctpAssociation.startSctpAssociation(builder);
  SctpAssociation.addSctpParameters(builder, sctpParameters);
  SctpAssociation.addStcpState(builder, stcpState);
  SctpAssociation.addStcpListener(builder, stcpListener);

  return SctpAssociation.endSctpAssociation(builder);
}
}
