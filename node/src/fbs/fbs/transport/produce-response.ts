// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Type } from '../../fbs/rtp-parameters/type';


export class ProduceResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProduceResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProduceResponse(bb:flatbuffers.ByteBuffer, obj?:ProduceResponse):ProduceResponse {
  return (obj || new ProduceResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProduceResponse(bb:flatbuffers.ByteBuffer, obj?:ProduceResponse):ProduceResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProduceResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():Type {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Type.NONE;
}

static startProduceResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addType(builder:flatbuffers.Builder, type:Type) {
  builder.addFieldInt8(0, type, Type.NONE);
}

static endProduceResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProduceResponse(builder:flatbuffers.Builder, type:Type):flatbuffers.Offset {
  ProduceResponse.startProduceResponse(builder);
  ProduceResponse.addType(builder, type);
  return ProduceResponse.endProduceResponse(builder);
}

unpack(): ProduceResponseT {
  return new ProduceResponseT(
    this.type()
  );
}


unpackTo(_o: ProduceResponseT): void {
  _o.type = this.type();
}
}

export class ProduceResponseT {
constructor(
  public type: Type = Type.NONE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ProduceResponse.createProduceResponse(builder,
    this.type
  );
}
}
