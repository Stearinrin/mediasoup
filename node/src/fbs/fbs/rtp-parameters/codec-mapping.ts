// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CodecMapping {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CodecMapping {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCodecMapping(bb:flatbuffers.ByteBuffer, obj?:CodecMapping):CodecMapping {
  return (obj || new CodecMapping()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCodecMapping(bb:flatbuffers.ByteBuffer, obj?:CodecMapping):CodecMapping {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CodecMapping()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

payloadType():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

mappedPayloadType():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startCodecMapping(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPayloadType(builder:flatbuffers.Builder, payloadType:number) {
  builder.addFieldInt8(0, payloadType, 0);
}

static addMappedPayloadType(builder:flatbuffers.Builder, mappedPayloadType:number) {
  builder.addFieldInt8(1, mappedPayloadType, 0);
}

static endCodecMapping(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCodecMapping(builder:flatbuffers.Builder, payloadType:number, mappedPayloadType:number):flatbuffers.Offset {
  CodecMapping.startCodecMapping(builder);
  CodecMapping.addPayloadType(builder, payloadType);
  CodecMapping.addMappedPayloadType(builder, mappedPayloadType);
  return CodecMapping.endCodecMapping(builder);
}

unpack(): CodecMappingT {
  return new CodecMappingT(
    this.payloadType(),
    this.mappedPayloadType()
  );
}


unpackTo(_o: CodecMappingT): void {
  _o.payloadType = this.payloadType();
  _o.mappedPayloadType = this.mappedPayloadType();
}
}

export class CodecMappingT {
constructor(
  public payloadType: number = 0,
  public mappedPayloadType: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CodecMapping.createCodecMapping(builder,
    this.payloadType,
    this.mappedPayloadType
  );
}
}
