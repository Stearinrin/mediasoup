// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Rtx, RtxT } from '../../fbs/rtp-parameters/rtx';


export class RtpEncodingParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RtpEncodingParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtpEncodingParameters(bb:flatbuffers.ByteBuffer, obj?:RtpEncodingParameters):RtpEncodingParameters {
  return (obj || new RtpEncodingParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtpEncodingParameters(bb:flatbuffers.ByteBuffer, obj?:RtpEncodingParameters):RtpEncodingParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RtpEncodingParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ssrc():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : null;
}

rid():string|null
rid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

codecPayloadType():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

rtx(obj?:Rtx):Rtx|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Rtx()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dtx():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

scalabilityMode():string|null
scalabilityMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scalabilityMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

maxBitrate():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : null;
}

static startRtpEncodingParameters(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addSsrc(builder:flatbuffers.Builder, ssrc:number) {
  builder.addFieldInt32(0, ssrc, 0);
}

static addRid(builder:flatbuffers.Builder, ridOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ridOffset, 0);
}

static addCodecPayloadType(builder:flatbuffers.Builder, codecPayloadType:number) {
  builder.addFieldInt8(2, codecPayloadType, 0);
}

static addRtx(builder:flatbuffers.Builder, rtxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rtxOffset, 0);
}

static addDtx(builder:flatbuffers.Builder, dtx:boolean) {
  builder.addFieldInt8(4, +dtx, +false);
}

static addScalabilityMode(builder:flatbuffers.Builder, scalabilityModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, scalabilityModeOffset, 0);
}

static addMaxBitrate(builder:flatbuffers.Builder, maxBitrate:number) {
  builder.addFieldInt32(6, maxBitrate, 0);
}

static endRtpEncodingParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): RtpEncodingParametersT {
  return new RtpEncodingParametersT(
    this.ssrc(),
    this.rid(),
    this.codecPayloadType(),
    (this.rtx() !== null ? this.rtx()!.unpack() : null),
    this.dtx(),
    this.scalabilityMode(),
    this.maxBitrate()
  );
}


unpackTo(_o: RtpEncodingParametersT): void {
  _o.ssrc = this.ssrc();
  _o.rid = this.rid();
  _o.codecPayloadType = this.codecPayloadType();
  _o.rtx = (this.rtx() !== null ? this.rtx()!.unpack() : null);
  _o.dtx = this.dtx();
  _o.scalabilityMode = this.scalabilityMode();
  _o.maxBitrate = this.maxBitrate();
}
}

export class RtpEncodingParametersT {
constructor(
  public ssrc: number|null = null,
  public rid: string|Uint8Array|null = null,
  public codecPayloadType: number|null = null,
  public rtx: RtxT|null = null,
  public dtx: boolean = false,
  public scalabilityMode: string|Uint8Array|null = null,
  public maxBitrate: number|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const rid = (this.rid !== null ? builder.createString(this.rid!) : 0);
  const rtx = (this.rtx !== null ? this.rtx!.pack(builder) : 0);
  const scalabilityMode = (this.scalabilityMode !== null ? builder.createString(this.scalabilityMode!) : 0);

  RtpEncodingParameters.startRtpEncodingParameters(builder);
  if (this.ssrc !== null)
    RtpEncodingParameters.addSsrc(builder, this.ssrc);
  RtpEncodingParameters.addRid(builder, rid);
  if (this.codecPayloadType !== null)
    RtpEncodingParameters.addCodecPayloadType(builder, this.codecPayloadType);
  RtpEncodingParameters.addRtx(builder, rtx);
  RtpEncodingParameters.addDtx(builder, this.dtx);
  RtpEncodingParameters.addScalabilityMode(builder, scalabilityMode);
  if (this.maxBitrate !== null)
    RtpEncodingParameters.addMaxBitrate(builder, this.maxBitrate);

  return RtpEncodingParameters.endRtpEncodingParameters(builder);
}
}
