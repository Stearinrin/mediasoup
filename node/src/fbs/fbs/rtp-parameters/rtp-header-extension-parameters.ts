// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Parameter, ParameterT } from '../../fbs/rtp-parameters/parameter';


export class RtpHeaderExtensionParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RtpHeaderExtensionParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtpHeaderExtensionParameters(bb:flatbuffers.ByteBuffer, obj?:RtpHeaderExtensionParameters):RtpHeaderExtensionParameters {
  return (obj || new RtpHeaderExtensionParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtpHeaderExtensionParameters(bb:flatbuffers.ByteBuffer, obj?:RtpHeaderExtensionParameters):RtpHeaderExtensionParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RtpHeaderExtensionParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uri():string|null
uri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

encrypt():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

parameters(index: number, obj?:Parameter):Parameter|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Parameter()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

parametersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRtpHeaderExtensionParameters(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUri(builder:flatbuffers.Builder, uriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uriOffset, 0);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt8(1, id, 0);
}

static addEncrypt(builder:flatbuffers.Builder, encrypt:boolean) {
  builder.addFieldInt8(2, +encrypt, +false);
}

static addParameters(builder:flatbuffers.Builder, parametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, parametersOffset, 0);
}

static createParametersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParametersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRtpHeaderExtensionParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // uri
  return offset;
}

static createRtpHeaderExtensionParameters(builder:flatbuffers.Builder, uriOffset:flatbuffers.Offset, id:number, encrypt:boolean, parametersOffset:flatbuffers.Offset):flatbuffers.Offset {
  RtpHeaderExtensionParameters.startRtpHeaderExtensionParameters(builder);
  RtpHeaderExtensionParameters.addUri(builder, uriOffset);
  RtpHeaderExtensionParameters.addId(builder, id);
  RtpHeaderExtensionParameters.addEncrypt(builder, encrypt);
  RtpHeaderExtensionParameters.addParameters(builder, parametersOffset);
  return RtpHeaderExtensionParameters.endRtpHeaderExtensionParameters(builder);
}

unpack(): RtpHeaderExtensionParametersT {
  return new RtpHeaderExtensionParametersT(
    this.uri(),
    this.id(),
    this.encrypt(),
    this.bb!.createObjList(this.parameters.bind(this), this.parametersLength())
  );
}


unpackTo(_o: RtpHeaderExtensionParametersT): void {
  _o.uri = this.uri();
  _o.id = this.id();
  _o.encrypt = this.encrypt();
  _o.parameters = this.bb!.createObjList(this.parameters.bind(this), this.parametersLength());
}
}

export class RtpHeaderExtensionParametersT {
constructor(
  public uri: string|Uint8Array|null = null,
  public id: number = 0,
  public encrypt: boolean = false,
  public parameters: (ParameterT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const uri = (this.uri !== null ? builder.createString(this.uri!) : 0);
  const parameters = RtpHeaderExtensionParameters.createParametersVector(builder, builder.createObjectOffsetList(this.parameters));

  return RtpHeaderExtensionParameters.createRtpHeaderExtensionParameters(builder,
    uri,
    this.id,
    this.encrypt,
    parameters
  );
}
}
