// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CodecMapping, CodecMappingT } from '../../fbs/rtp-parameters/codec-mapping';
import { EncodingMapping, EncodingMappingT } from '../../fbs/rtp-parameters/encoding-mapping';


export class RtpMapping {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RtpMapping {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRtpMapping(bb:flatbuffers.ByteBuffer, obj?:RtpMapping):RtpMapping {
  return (obj || new RtpMapping()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRtpMapping(bb:flatbuffers.ByteBuffer, obj?:RtpMapping):RtpMapping {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RtpMapping()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

codecs(index: number, obj?:CodecMapping):CodecMapping|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CodecMapping()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

codecsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

encodings(index: number, obj?:EncodingMapping):EncodingMapping|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new EncodingMapping()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

encodingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRtpMapping(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCodecs(builder:flatbuffers.Builder, codecsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, codecsOffset, 0);
}

static createCodecsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCodecsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEncodings(builder:flatbuffers.Builder, encodingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, encodingsOffset, 0);
}

static createEncodingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEncodingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRtpMapping(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // codecs
  builder.requiredField(offset, 6) // encodings
  return offset;
}

static createRtpMapping(builder:flatbuffers.Builder, codecsOffset:flatbuffers.Offset, encodingsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RtpMapping.startRtpMapping(builder);
  RtpMapping.addCodecs(builder, codecsOffset);
  RtpMapping.addEncodings(builder, encodingsOffset);
  return RtpMapping.endRtpMapping(builder);
}

unpack(): RtpMappingT {
  return new RtpMappingT(
    this.bb!.createObjList(this.codecs.bind(this), this.codecsLength()),
    this.bb!.createObjList(this.encodings.bind(this), this.encodingsLength())
  );
}


unpackTo(_o: RtpMappingT): void {
  _o.codecs = this.bb!.createObjList(this.codecs.bind(this), this.codecsLength());
  _o.encodings = this.bb!.createObjList(this.encodings.bind(this), this.encodingsLength());
}
}

export class RtpMappingT {
constructor(
  public codecs: (CodecMappingT)[] = [],
  public encodings: (EncodingMappingT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const codecs = RtpMapping.createCodecsVector(builder, builder.createObjectOffsetList(this.codecs));
  const encodings = RtpMapping.createEncodingsVector(builder, builder.createObjectOffsetList(this.encodings));

  return RtpMapping.createRtpMapping(builder,
    codecs,
    encodings
  );
}
}
