// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BaseTransportOptions, BaseTransportOptionsT } from '../../fbs/transport/base-transport-options';
import { TransportListenIp, TransportListenIpT } from '../../fbs/transport/transport-listen-ip';


export class PlainTransportOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlainTransportOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlainTransportOptions(bb:flatbuffers.ByteBuffer, obj?:PlainTransportOptions):PlainTransportOptions {
  return (obj || new PlainTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlainTransportOptions(bb:flatbuffers.ByteBuffer, obj?:PlainTransportOptions):PlainTransportOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlainTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:BaseTransportOptions):BaseTransportOptions|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BaseTransportOptions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

listenIp(obj?:TransportListenIp):TransportListenIp|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TransportListenIp()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

rtcpMux():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

comedia():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enableSrtp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

srtpCryptoSuite():string|null
srtpCryptoSuite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
srtpCryptoSuite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPlainTransportOptions(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addListenIp(builder:flatbuffers.Builder, listenIpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, listenIpOffset, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(2, port, 0);
}

static addRtcpMux(builder:flatbuffers.Builder, rtcpMux:boolean) {
  builder.addFieldInt8(3, +rtcpMux, +false);
}

static addComedia(builder:flatbuffers.Builder, comedia:boolean) {
  builder.addFieldInt8(4, +comedia, +false);
}

static addEnableSrtp(builder:flatbuffers.Builder, enableSrtp:boolean) {
  builder.addFieldInt8(5, +enableSrtp, +false);
}

static addSrtpCryptoSuite(builder:flatbuffers.Builder, srtpCryptoSuiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, srtpCryptoSuiteOffset, 0);
}

static endPlainTransportOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // listen_ip
  return offset;
}


unpack(): PlainTransportOptionsT {
  return new PlainTransportOptionsT(
    (this.base() !== null ? this.base()!.unpack() : null),
    (this.listenIp() !== null ? this.listenIp()!.unpack() : null),
    this.port(),
    this.rtcpMux(),
    this.comedia(),
    this.enableSrtp(),
    this.srtpCryptoSuite()
  );
}


unpackTo(_o: PlainTransportOptionsT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
  _o.listenIp = (this.listenIp() !== null ? this.listenIp()!.unpack() : null);
  _o.port = this.port();
  _o.rtcpMux = this.rtcpMux();
  _o.comedia = this.comedia();
  _o.enableSrtp = this.enableSrtp();
  _o.srtpCryptoSuite = this.srtpCryptoSuite();
}
}

export class PlainTransportOptionsT {
constructor(
  public base: BaseTransportOptionsT|null = null,
  public listenIp: TransportListenIpT|null = null,
  public port: number = 0,
  public rtcpMux: boolean = false,
  public comedia: boolean = false,
  public enableSrtp: boolean = false,
  public srtpCryptoSuite: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);
  const listenIp = (this.listenIp !== null ? this.listenIp!.pack(builder) : 0);
  const srtpCryptoSuite = (this.srtpCryptoSuite !== null ? builder.createString(this.srtpCryptoSuite!) : 0);

  PlainTransportOptions.startPlainTransportOptions(builder);
  PlainTransportOptions.addBase(builder, base);
  PlainTransportOptions.addListenIp(builder, listenIp);
  PlainTransportOptions.addPort(builder, this.port);
  PlainTransportOptions.addRtcpMux(builder, this.rtcpMux);
  PlainTransportOptions.addComedia(builder, this.comedia);
  PlainTransportOptions.addEnableSrtp(builder, this.enableSrtp);
  PlainTransportOptions.addSrtpCryptoSuite(builder, srtpCryptoSuite);

  return PlainTransportOptions.endPlainTransportOptions(builder);
}
}
