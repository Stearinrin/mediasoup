// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class AddProducerRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AddProducerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAddProducerRequest(bb:flatbuffers.ByteBuffer, obj?:AddProducerRequest):AddProducerRequest {
  return (obj || new AddProducerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAddProducerRequest(bb:flatbuffers.ByteBuffer, obj?:AddProducerRequest):AddProducerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AddProducerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

producerId():string|null
producerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
producerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAddProducerRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addProducerId(builder:flatbuffers.Builder, producerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, producerIdOffset, 0);
}

static endAddProducerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // producer_id
  return offset;
}

static createAddProducerRequest(builder:flatbuffers.Builder, producerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  AddProducerRequest.startAddProducerRequest(builder);
  AddProducerRequest.addProducerId(builder, producerIdOffset);
  return AddProducerRequest.endAddProducerRequest(builder);
}

unpack(): AddProducerRequestT {
  return new AddProducerRequestT(
    this.producerId()
  );
}


unpackTo(_o: AddProducerRequestT): void {
  _o.producerId = this.producerId();
}
}

export class AddProducerRequestT {
constructor(
  public producerId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const producerId = (this.producerId !== null ? builder.createString(this.producerId!) : 0);

  return AddProducerRequest.createAddProducerRequest(builder,
    producerId
  );
}
}
