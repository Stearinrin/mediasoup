// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class UpdateSettingsRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateSettingsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateSettingsRequest(bb:flatbuffers.ByteBuffer, obj?:UpdateSettingsRequest):UpdateSettingsRequest {
  return (obj || new UpdateSettingsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateSettingsRequest(bb:flatbuffers.ByteBuffer, obj?:UpdateSettingsRequest):UpdateSettingsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateSettingsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

logLevel():string|null
logLevel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
logLevel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

logTags(index: number):string
logTags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
logTags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

logTagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startUpdateSettingsRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLogLevel(builder:flatbuffers.Builder, logLevelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, logLevelOffset, 0);
}

static addLogTags(builder:flatbuffers.Builder, logTagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, logTagsOffset, 0);
}

static createLogTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLogTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endUpdateSettingsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateSettingsRequest(builder:flatbuffers.Builder, logLevelOffset:flatbuffers.Offset, logTagsOffset:flatbuffers.Offset):flatbuffers.Offset {
  UpdateSettingsRequest.startUpdateSettingsRequest(builder);
  UpdateSettingsRequest.addLogLevel(builder, logLevelOffset);
  UpdateSettingsRequest.addLogTags(builder, logTagsOffset);
  return UpdateSettingsRequest.endUpdateSettingsRequest(builder);
}

unpack(): UpdateSettingsRequestT {
  return new UpdateSettingsRequestT(
    this.logLevel(),
    this.bb!.createScalarList(this.logTags.bind(this), this.logTagsLength())
  );
}


unpackTo(_o: UpdateSettingsRequestT): void {
  _o.logLevel = this.logLevel();
  _o.logTags = this.bb!.createScalarList(this.logTags.bind(this), this.logTagsLength());
}
}

export class UpdateSettingsRequestT {
constructor(
  public logLevel: string|Uint8Array|null = null,
  public logTags: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const logLevel = (this.logLevel !== null ? builder.createString(this.logLevel!) : 0);
  const logTags = UpdateSettingsRequest.createLogTagsVector(builder, builder.createObjectOffsetList(this.logTags));

  return UpdateSettingsRequest.createUpdateSettingsRequest(builder,
    logLevel,
    logTags
  );
}
}
