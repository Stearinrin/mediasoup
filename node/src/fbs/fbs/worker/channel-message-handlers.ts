// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ChannelMessageHandlers {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChannelMessageHandlers {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChannelMessageHandlers(bb:flatbuffers.ByteBuffer, obj?:ChannelMessageHandlers):ChannelMessageHandlers {
  return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChannelMessageHandlers(bb:flatbuffers.ByteBuffer, obj?:ChannelMessageHandlers):ChannelMessageHandlers {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

channelRequestHandlers(index: number):string
channelRequestHandlers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
channelRequestHandlers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

channelRequestHandlersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

payloadChannelRequestHandlers(index: number):string
payloadChannelRequestHandlers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
payloadChannelRequestHandlers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

payloadChannelRequestHandlersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

payloadChannelNotificationHandlers(index: number):string
payloadChannelNotificationHandlers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
payloadChannelNotificationHandlers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

payloadChannelNotificationHandlersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startChannelMessageHandlers(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addChannelRequestHandlers(builder:flatbuffers.Builder, channelRequestHandlersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, channelRequestHandlersOffset, 0);
}

static createChannelRequestHandlersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChannelRequestHandlersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPayloadChannelRequestHandlers(builder:flatbuffers.Builder, payloadChannelRequestHandlersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, payloadChannelRequestHandlersOffset, 0);
}

static createPayloadChannelRequestHandlersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPayloadChannelRequestHandlersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPayloadChannelNotificationHandlers(builder:flatbuffers.Builder, payloadChannelNotificationHandlersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, payloadChannelNotificationHandlersOffset, 0);
}

static createPayloadChannelNotificationHandlersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPayloadChannelNotificationHandlersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endChannelMessageHandlers(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChannelMessageHandlers(builder:flatbuffers.Builder, channelRequestHandlersOffset:flatbuffers.Offset, payloadChannelRequestHandlersOffset:flatbuffers.Offset, payloadChannelNotificationHandlersOffset:flatbuffers.Offset):flatbuffers.Offset {
  ChannelMessageHandlers.startChannelMessageHandlers(builder);
  ChannelMessageHandlers.addChannelRequestHandlers(builder, channelRequestHandlersOffset);
  ChannelMessageHandlers.addPayloadChannelRequestHandlers(builder, payloadChannelRequestHandlersOffset);
  ChannelMessageHandlers.addPayloadChannelNotificationHandlers(builder, payloadChannelNotificationHandlersOffset);
  return ChannelMessageHandlers.endChannelMessageHandlers(builder);
}

unpack(): ChannelMessageHandlersT {
  return new ChannelMessageHandlersT(
    this.bb!.createScalarList(this.channelRequestHandlers.bind(this), this.channelRequestHandlersLength()),
    this.bb!.createScalarList(this.payloadChannelRequestHandlers.bind(this), this.payloadChannelRequestHandlersLength()),
    this.bb!.createScalarList(this.payloadChannelNotificationHandlers.bind(this), this.payloadChannelNotificationHandlersLength())
  );
}


unpackTo(_o: ChannelMessageHandlersT): void {
  _o.channelRequestHandlers = this.bb!.createScalarList(this.channelRequestHandlers.bind(this), this.channelRequestHandlersLength());
  _o.payloadChannelRequestHandlers = this.bb!.createScalarList(this.payloadChannelRequestHandlers.bind(this), this.payloadChannelRequestHandlersLength());
  _o.payloadChannelNotificationHandlers = this.bb!.createScalarList(this.payloadChannelNotificationHandlers.bind(this), this.payloadChannelNotificationHandlersLength());
}
}

export class ChannelMessageHandlersT {
constructor(
  public channelRequestHandlers: (string)[] = [],
  public payloadChannelRequestHandlers: (string)[] = [],
  public payloadChannelNotificationHandlers: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const channelRequestHandlers = ChannelMessageHandlers.createChannelRequestHandlersVector(builder, builder.createObjectOffsetList(this.channelRequestHandlers));
  const payloadChannelRequestHandlers = ChannelMessageHandlers.createPayloadChannelRequestHandlersVector(builder, builder.createObjectOffsetList(this.payloadChannelRequestHandlers));
  const payloadChannelNotificationHandlers = ChannelMessageHandlers.createPayloadChannelNotificationHandlersVector(builder, builder.createObjectOffsetList(this.payloadChannelNotificationHandlers));

  return ChannelMessageHandlers.createChannelMessageHandlers(builder,
    channelRequestHandlers,
    payloadChannelRequestHandlers,
    payloadChannelNotificationHandlers
  );
}
}
