// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ChannelMessageHandlers {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChannelMessageHandlers {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChannelMessageHandlers(bb:flatbuffers.ByteBuffer, obj?:ChannelMessageHandlers):ChannelMessageHandlers {
  return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChannelMessageHandlers(bb:flatbuffers.ByteBuffer, obj?:ChannelMessageHandlers):ChannelMessageHandlers {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

channelRequestHandlers(index: number):string
channelRequestHandlers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
channelRequestHandlers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

channelRequestHandlersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

payloadchannelRequestHandlers(index: number):string
payloadchannelRequestHandlers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
payloadchannelRequestHandlers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

payloadchannelRequestHandlersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

payloadchannelNotificationHandlers(index: number):string
payloadchannelNotificationHandlers(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
payloadchannelNotificationHandlers(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

payloadchannelNotificationHandlersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startChannelMessageHandlers(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addChannelRequestHandlers(builder:flatbuffers.Builder, channelRequestHandlersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, channelRequestHandlersOffset, 0);
}

static createChannelRequestHandlersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChannelRequestHandlersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPayloadchannelRequestHandlers(builder:flatbuffers.Builder, payloadchannelRequestHandlersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, payloadchannelRequestHandlersOffset, 0);
}

static createPayloadchannelRequestHandlersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPayloadchannelRequestHandlersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPayloadchannelNotificationHandlers(builder:flatbuffers.Builder, payloadchannelNotificationHandlersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, payloadchannelNotificationHandlersOffset, 0);
}

static createPayloadchannelNotificationHandlersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPayloadchannelNotificationHandlersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endChannelMessageHandlers(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChannelMessageHandlers(builder:flatbuffers.Builder, channelRequestHandlersOffset:flatbuffers.Offset, payloadchannelRequestHandlersOffset:flatbuffers.Offset, payloadchannelNotificationHandlersOffset:flatbuffers.Offset):flatbuffers.Offset {
  ChannelMessageHandlers.startChannelMessageHandlers(builder);
  ChannelMessageHandlers.addChannelRequestHandlers(builder, channelRequestHandlersOffset);
  ChannelMessageHandlers.addPayloadchannelRequestHandlers(builder, payloadchannelRequestHandlersOffset);
  ChannelMessageHandlers.addPayloadchannelNotificationHandlers(builder, payloadchannelNotificationHandlersOffset);
  return ChannelMessageHandlers.endChannelMessageHandlers(builder);
}

unpack(): ChannelMessageHandlersT {
  return new ChannelMessageHandlersT(
    this.bb!.createScalarList(this.channelRequestHandlers.bind(this), this.channelRequestHandlersLength()),
    this.bb!.createScalarList(this.payloadchannelRequestHandlers.bind(this), this.payloadchannelRequestHandlersLength()),
    this.bb!.createScalarList(this.payloadchannelNotificationHandlers.bind(this), this.payloadchannelNotificationHandlersLength())
  );
}


unpackTo(_o: ChannelMessageHandlersT): void {
  _o.channelRequestHandlers = this.bb!.createScalarList(this.channelRequestHandlers.bind(this), this.channelRequestHandlersLength());
  _o.payloadchannelRequestHandlers = this.bb!.createScalarList(this.payloadchannelRequestHandlers.bind(this), this.payloadchannelRequestHandlersLength());
  _o.payloadchannelNotificationHandlers = this.bb!.createScalarList(this.payloadchannelNotificationHandlers.bind(this), this.payloadchannelNotificationHandlersLength());
}
}

export class ChannelMessageHandlersT {
constructor(
  public channelRequestHandlers: (string)[] = [],
  public payloadchannelRequestHandlers: (string)[] = [],
  public payloadchannelNotificationHandlers: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const channelRequestHandlers = ChannelMessageHandlers.createChannelRequestHandlersVector(builder, builder.createObjectOffsetList(this.channelRequestHandlers));
  const payloadchannelRequestHandlers = ChannelMessageHandlers.createPayloadchannelRequestHandlersVector(builder, builder.createObjectOffsetList(this.payloadchannelRequestHandlers));
  const payloadchannelNotificationHandlers = ChannelMessageHandlers.createPayloadchannelNotificationHandlersVector(builder, builder.createObjectOffsetList(this.payloadchannelNotificationHandlers));

  return ChannelMessageHandlers.createChannelMessageHandlers(builder,
    channelRequestHandlers,
    payloadchannelRequestHandlers,
    payloadchannelNotificationHandlers
  );
}
}
