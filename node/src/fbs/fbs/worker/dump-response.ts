// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ChannelMessageHandlers, ChannelMessageHandlersT } from '../../fbs/worker/channel-message-handlers';


export class DumpResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DumpResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDumpResponse(bb:flatbuffers.ByteBuffer, obj?:DumpResponse):DumpResponse {
  return (obj || new DumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDumpResponse(bb:flatbuffers.ByteBuffer, obj?:DumpResponse):DumpResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pid():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

webRtcServerIds(index: number):string
webRtcServerIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
webRtcServerIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

webRtcServerIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

routerIds(index: number):string
routerIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
routerIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

routerIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

channelMessageHandlers(obj?:ChannelMessageHandlers):ChannelMessageHandlers|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ChannelMessageHandlers()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDumpResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPid(builder:flatbuffers.Builder, pid:number) {
  builder.addFieldInt32(0, pid, 0);
}

static addWebRtcServerIds(builder:flatbuffers.Builder, webRtcServerIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, webRtcServerIdsOffset, 0);
}

static createWebRtcServerIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWebRtcServerIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRouterIds(builder:flatbuffers.Builder, routerIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, routerIdsOffset, 0);
}

static createRouterIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRouterIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChannelMessageHandlers(builder:flatbuffers.Builder, channelMessageHandlersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, channelMessageHandlersOffset, 0);
}

static endDumpResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DumpResponseT {
  return new DumpResponseT(
    this.pid(),
    this.bb!.createScalarList(this.webRtcServerIds.bind(this), this.webRtcServerIdsLength()),
    this.bb!.createScalarList(this.routerIds.bind(this), this.routerIdsLength()),
    (this.channelMessageHandlers() !== null ? this.channelMessageHandlers()!.unpack() : null)
  );
}


unpackTo(_o: DumpResponseT): void {
  _o.pid = this.pid();
  _o.webRtcServerIds = this.bb!.createScalarList(this.webRtcServerIds.bind(this), this.webRtcServerIdsLength());
  _o.routerIds = this.bb!.createScalarList(this.routerIds.bind(this), this.routerIdsLength());
  _o.channelMessageHandlers = (this.channelMessageHandlers() !== null ? this.channelMessageHandlers()!.unpack() : null);
}
}

export class DumpResponseT {
constructor(
  public pid: number = 0,
  public webRtcServerIds: (string)[] = [],
  public routerIds: (string)[] = [],
  public channelMessageHandlers: ChannelMessageHandlersT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const webRtcServerIds = DumpResponse.createWebRtcServerIdsVector(builder, builder.createObjectOffsetList(this.webRtcServerIds));
  const routerIds = DumpResponse.createRouterIdsVector(builder, builder.createObjectOffsetList(this.routerIds));
  const channelMessageHandlers = (this.channelMessageHandlers !== null ? this.channelMessageHandlers!.pack(builder) : 0);

  DumpResponse.startDumpResponse(builder);
  DumpResponse.addPid(builder, this.pid);
  DumpResponse.addWebRtcServerIds(builder, webRtcServerIds);
  DumpResponse.addRouterIds(builder, routerIds);
  DumpResponse.addChannelMessageHandlers(builder, channelMessageHandlers);

  return DumpResponse.endDumpResponse(builder);
}
}
