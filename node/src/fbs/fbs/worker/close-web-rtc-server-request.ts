// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CloseWebRtcServerRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CloseWebRtcServerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCloseWebRtcServerRequest(bb:flatbuffers.ByteBuffer, obj?:CloseWebRtcServerRequest):CloseWebRtcServerRequest {
  return (obj || new CloseWebRtcServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCloseWebRtcServerRequest(bb:flatbuffers.ByteBuffer, obj?:CloseWebRtcServerRequest):CloseWebRtcServerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CloseWebRtcServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

webRtcServerId():string|null
webRtcServerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
webRtcServerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCloseWebRtcServerRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addWebRtcServerId(builder:flatbuffers.Builder, webRtcServerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, webRtcServerIdOffset, 0);
}

static endCloseWebRtcServerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // web_rtc_server_id
  return offset;
}

static createCloseWebRtcServerRequest(builder:flatbuffers.Builder, webRtcServerIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  CloseWebRtcServerRequest.startCloseWebRtcServerRequest(builder);
  CloseWebRtcServerRequest.addWebRtcServerId(builder, webRtcServerIdOffset);
  return CloseWebRtcServerRequest.endCloseWebRtcServerRequest(builder);
}

unpack(): CloseWebRtcServerRequestT {
  return new CloseWebRtcServerRequestT(
    this.webRtcServerId()
  );
}


unpackTo(_o: CloseWebRtcServerRequestT): void {
  _o.webRtcServerId = this.webRtcServerId();
}
}

export class CloseWebRtcServerRequestT {
constructor(
  public webRtcServerId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const webRtcServerId = (this.webRtcServerId !== null ? builder.createString(this.webRtcServerId!) : 0);

  return CloseWebRtcServerRequest.createCloseWebRtcServerRequest(builder,
    webRtcServerId
  );
}
}
