// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BaseTransportOptions, BaseTransportOptionsT } from '../../fbs/transport/base-transport-options';


export class DirectTransportOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DirectTransportOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDirectTransportOptions(bb:flatbuffers.ByteBuffer, obj?:DirectTransportOptions):DirectTransportOptions {
  return (obj || new DirectTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDirectTransportOptions(bb:flatbuffers.ByteBuffer, obj?:DirectTransportOptions):DirectTransportOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DirectTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:BaseTransportOptions):BaseTransportOptions|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BaseTransportOptions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDirectTransportOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static endDirectTransportOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDirectTransportOptions(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset):flatbuffers.Offset {
  DirectTransportOptions.startDirectTransportOptions(builder);
  DirectTransportOptions.addBase(builder, baseOffset);
  return DirectTransportOptions.endDirectTransportOptions(builder);
}

unpack(): DirectTransportOptionsT {
  return new DirectTransportOptionsT(
    (this.base() !== null ? this.base()!.unpack() : null)
  );
}


unpackTo(_o: DirectTransportOptionsT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
}
}

export class DirectTransportOptionsT {
constructor(
  public base: BaseTransportOptionsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);

  return DirectTransportOptions.createDirectTransportOptions(builder,
    base
  );
}
}
