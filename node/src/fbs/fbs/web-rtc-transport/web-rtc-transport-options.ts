// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BaseTransportOptions, BaseTransportOptionsT } from '../../fbs/transport/base-transport-options';
import { WebRtcTransportListen, unionToWebRtcTransportListen, unionListToWebRtcTransportListen } from '../../fbs/web-rtc-transport/web-rtc-transport-listen';
import { WebRtcTransportListenIndividual, WebRtcTransportListenIndividualT } from '../../fbs/web-rtc-transport/web-rtc-transport-listen-individual';
import { WebRtcTransportListenServer, WebRtcTransportListenServerT } from '../../fbs/web-rtc-transport/web-rtc-transport-listen-server';


export class WebRtcTransportOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WebRtcTransportOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWebRtcTransportOptions(bb:flatbuffers.ByteBuffer, obj?:WebRtcTransportOptions):WebRtcTransportOptions {
  return (obj || new WebRtcTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWebRtcTransportOptions(bb:flatbuffers.ByteBuffer, obj?:WebRtcTransportOptions):WebRtcTransportOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WebRtcTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:BaseTransportOptions):BaseTransportOptions|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BaseTransportOptions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

listenType():WebRtcTransportListen {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : WebRtcTransportListen.NONE;
}

listen<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

enableUdp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

enableTcp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

preferUdp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

preferTcp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startWebRtcTransportOptions(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addListenType(builder:flatbuffers.Builder, listenType:WebRtcTransportListen) {
  builder.addFieldInt8(1, listenType, WebRtcTransportListen.NONE);
}

static addListen(builder:flatbuffers.Builder, listenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, listenOffset, 0);
}

static addEnableUdp(builder:flatbuffers.Builder, enableUdp:boolean) {
  builder.addFieldInt8(3, +enableUdp, +true);
}

static addEnableTcp(builder:flatbuffers.Builder, enableTcp:boolean) {
  builder.addFieldInt8(4, +enableTcp, +false);
}

static addPreferUdp(builder:flatbuffers.Builder, preferUdp:boolean) {
  builder.addFieldInt8(5, +preferUdp, +false);
}

static addPreferTcp(builder:flatbuffers.Builder, preferTcp:boolean) {
  builder.addFieldInt8(6, +preferTcp, +false);
}

static endWebRtcTransportOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // listen
  return offset;
}

static createWebRtcTransportOptions(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, listenType:WebRtcTransportListen, listenOffset:flatbuffers.Offset, enableUdp:boolean, enableTcp:boolean, preferUdp:boolean, preferTcp:boolean):flatbuffers.Offset {
  WebRtcTransportOptions.startWebRtcTransportOptions(builder);
  WebRtcTransportOptions.addBase(builder, baseOffset);
  WebRtcTransportOptions.addListenType(builder, listenType);
  WebRtcTransportOptions.addListen(builder, listenOffset);
  WebRtcTransportOptions.addEnableUdp(builder, enableUdp);
  WebRtcTransportOptions.addEnableTcp(builder, enableTcp);
  WebRtcTransportOptions.addPreferUdp(builder, preferUdp);
  WebRtcTransportOptions.addPreferTcp(builder, preferTcp);
  return WebRtcTransportOptions.endWebRtcTransportOptions(builder);
}

unpack(): WebRtcTransportOptionsT {
  return new WebRtcTransportOptionsT(
    (this.base() !== null ? this.base()!.unpack() : null),
    this.listenType(),
    (() => {
      let temp = unionToWebRtcTransportListen(this.listenType(), this.listen.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.enableUdp(),
    this.enableTcp(),
    this.preferUdp(),
    this.preferTcp()
  );
}


unpackTo(_o: WebRtcTransportOptionsT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
  _o.listenType = this.listenType();
  _o.listen = (() => {
      let temp = unionToWebRtcTransportListen(this.listenType(), this.listen.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.enableUdp = this.enableUdp();
  _o.enableTcp = this.enableTcp();
  _o.preferUdp = this.preferUdp();
  _o.preferTcp = this.preferTcp();
}
}

export class WebRtcTransportOptionsT {
constructor(
  public base: BaseTransportOptionsT|null = null,
  public listenType: WebRtcTransportListen = WebRtcTransportListen.NONE,
  public listen: WebRtcTransportListenIndividualT|WebRtcTransportListenServerT|null = null,
  public enableUdp: boolean = true,
  public enableTcp: boolean = false,
  public preferUdp: boolean = false,
  public preferTcp: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);
  const listen = builder.createObjectOffset(this.listen);

  return WebRtcTransportOptions.createWebRtcTransportOptions(builder,
    base,
    this.listenType,
    listen,
    this.enableUdp,
    this.enableTcp,
    this.preferUdp,
    this.preferTcp
  );
}
}
