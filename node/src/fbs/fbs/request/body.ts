// automatically generated by the FlatBuffers compiler, do not modify

import { ConsumeRequest, ConsumeRequestT } from '../../fbs/transport/consume-request';
import { CloseWebRtcServerRequest, CloseWebRtcServerRequestT } from '../../fbs/worker/close-web-rtc-server-request';
import { CreateWebRtcServerRequest, CreateWebRtcServerRequestT } from '../../fbs/worker/create-web-rtc-server-request';
import { UpdateableSettings, UpdateableSettingsT } from '../../fbs/worker/updateable-settings';


export enum Body {
  NONE = 0,
  FBS_Worker_UpdateableSettings = 1,
  FBS_Worker_CreateWebRtcServerRequest = 2,
  FBS_Worker_CloseWebRtcServerRequest = 3,
  FBS_Transport_ConsumeRequest = 4
}

export function unionToBody(
  type: Body,
  accessor: (obj:CloseWebRtcServerRequest|ConsumeRequest|CreateWebRtcServerRequest|UpdateableSettings) => CloseWebRtcServerRequest|ConsumeRequest|CreateWebRtcServerRequest|UpdateableSettings|null
): CloseWebRtcServerRequest|ConsumeRequest|CreateWebRtcServerRequest|UpdateableSettings|null {
  switch(Body[type]) {
    case 'NONE': return null; 
    case 'FBS_Worker_UpdateableSettings': return accessor(new UpdateableSettings())! as UpdateableSettings;
    case 'FBS_Worker_CreateWebRtcServerRequest': return accessor(new CreateWebRtcServerRequest())! as CreateWebRtcServerRequest;
    case 'FBS_Worker_CloseWebRtcServerRequest': return accessor(new CloseWebRtcServerRequest())! as CloseWebRtcServerRequest;
    case 'FBS_Transport_ConsumeRequest': return accessor(new ConsumeRequest())! as ConsumeRequest;
    default: return null;
  }
}

export function unionListToBody(
  type: Body, 
  accessor: (index: number, obj:CloseWebRtcServerRequest|ConsumeRequest|CreateWebRtcServerRequest|UpdateableSettings) => CloseWebRtcServerRequest|ConsumeRequest|CreateWebRtcServerRequest|UpdateableSettings|null, 
  index: number
): CloseWebRtcServerRequest|ConsumeRequest|CreateWebRtcServerRequest|UpdateableSettings|null {
  switch(Body[type]) {
    case 'NONE': return null; 
    case 'FBS_Worker_UpdateableSettings': return accessor(index, new UpdateableSettings())! as UpdateableSettings;
    case 'FBS_Worker_CreateWebRtcServerRequest': return accessor(index, new CreateWebRtcServerRequest())! as CreateWebRtcServerRequest;
    case 'FBS_Worker_CloseWebRtcServerRequest': return accessor(index, new CloseWebRtcServerRequest())! as CloseWebRtcServerRequest;
    case 'FBS_Transport_ConsumeRequest': return accessor(index, new ConsumeRequest())! as ConsumeRequest;
    default: return null;
  }
}
