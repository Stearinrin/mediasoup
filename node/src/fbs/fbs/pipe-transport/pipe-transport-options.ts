// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BaseTransportOptions, BaseTransportOptionsT } from '../../fbs/transport/base-transport-options';
import { TransportListenIp, TransportListenIpT } from '../../fbs/transport/transport-listen-ip';


export class PipeTransportOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PipeTransportOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPipeTransportOptions(bb:flatbuffers.ByteBuffer, obj?:PipeTransportOptions):PipeTransportOptions {
  return (obj || new PipeTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPipeTransportOptions(bb:flatbuffers.ByteBuffer, obj?:PipeTransportOptions):PipeTransportOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PipeTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:BaseTransportOptions):BaseTransportOptions|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BaseTransportOptions()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

listenIp(obj?:TransportListenIp):TransportListenIp|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TransportListenIp()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

enableRtx():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enableSrtp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startPipeTransportOptions(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addListenIp(builder:flatbuffers.Builder, listenIpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, listenIpOffset, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(2, port, 0);
}

static addEnableRtx(builder:flatbuffers.Builder, enableRtx:boolean) {
  builder.addFieldInt8(3, +enableRtx, +false);
}

static addEnableSrtp(builder:flatbuffers.Builder, enableSrtp:boolean) {
  builder.addFieldInt8(4, +enableSrtp, +false);
}

static endPipeTransportOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // listen_ip
  return offset;
}


unpack(): PipeTransportOptionsT {
  return new PipeTransportOptionsT(
    (this.base() !== null ? this.base()!.unpack() : null),
    (this.listenIp() !== null ? this.listenIp()!.unpack() : null),
    this.port(),
    this.enableRtx(),
    this.enableSrtp()
  );
}


unpackTo(_o: PipeTransportOptionsT): void {
  _o.base = (this.base() !== null ? this.base()!.unpack() : null);
  _o.listenIp = (this.listenIp() !== null ? this.listenIp()!.unpack() : null);
  _o.port = this.port();
  _o.enableRtx = this.enableRtx();
  _o.enableSrtp = this.enableSrtp();
}
}

export class PipeTransportOptionsT {
constructor(
  public base: BaseTransportOptionsT|null = null,
  public listenIp: TransportListenIpT|null = null,
  public port: number = 0,
  public enableRtx: boolean = false,
  public enableSrtp: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const base = (this.base !== null ? this.base!.pack(builder) : 0);
  const listenIp = (this.listenIp !== null ? this.listenIp!.pack(builder) : 0);

  PipeTransportOptions.startPipeTransportOptions(builder);
  PipeTransportOptions.addBase(builder, base);
  PipeTransportOptions.addListenIp(builder, listenIp);
  PipeTransportOptions.addPort(builder, this.port);
  PipeTransportOptions.addEnableRtx(builder, this.enableRtx);
  PipeTransportOptions.addEnableSrtp(builder, this.enableSrtp);

  return PipeTransportOptions.endPipeTransportOptions(builder);
}
}
