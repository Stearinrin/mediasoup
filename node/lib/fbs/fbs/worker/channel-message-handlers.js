"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelMessageHandlersT = exports.ChannelMessageHandlers = void 0;
const flatbuffers = require("flatbuffers");
class ChannelMessageHandlers {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsChannelMessageHandlers(bb, obj) {
        return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsChannelMessageHandlers(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    channelRequestHandlers(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    channelRequestHandlersLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    payloadChannelRequestHandlers(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    payloadChannelRequestHandlersLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    payloadChannelNotificationHandlers(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    payloadChannelNotificationHandlersLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startChannelMessageHandlers(builder) {
        builder.startObject(3);
    }
    static addChannelRequestHandlers(builder, channelRequestHandlersOffset) {
        builder.addFieldOffset(0, channelRequestHandlersOffset, 0);
    }
    static createChannelRequestHandlersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startChannelRequestHandlersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPayloadChannelRequestHandlers(builder, payloadChannelRequestHandlersOffset) {
        builder.addFieldOffset(1, payloadChannelRequestHandlersOffset, 0);
    }
    static createPayloadChannelRequestHandlersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPayloadChannelRequestHandlersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPayloadChannelNotificationHandlers(builder, payloadChannelNotificationHandlersOffset) {
        builder.addFieldOffset(2, payloadChannelNotificationHandlersOffset, 0);
    }
    static createPayloadChannelNotificationHandlersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPayloadChannelNotificationHandlersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endChannelMessageHandlers(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createChannelMessageHandlers(builder, channelRequestHandlersOffset, payloadChannelRequestHandlersOffset, payloadChannelNotificationHandlersOffset) {
        ChannelMessageHandlers.startChannelMessageHandlers(builder);
        ChannelMessageHandlers.addChannelRequestHandlers(builder, channelRequestHandlersOffset);
        ChannelMessageHandlers.addPayloadChannelRequestHandlers(builder, payloadChannelRequestHandlersOffset);
        ChannelMessageHandlers.addPayloadChannelNotificationHandlers(builder, payloadChannelNotificationHandlersOffset);
        return ChannelMessageHandlers.endChannelMessageHandlers(builder);
    }
    unpack() {
        return new ChannelMessageHandlersT(this.bb.createScalarList(this.channelRequestHandlers.bind(this), this.channelRequestHandlersLength()), this.bb.createScalarList(this.payloadChannelRequestHandlers.bind(this), this.payloadChannelRequestHandlersLength()), this.bb.createScalarList(this.payloadChannelNotificationHandlers.bind(this), this.payloadChannelNotificationHandlersLength()));
    }
    unpackTo(_o) {
        _o.channelRequestHandlers = this.bb.createScalarList(this.channelRequestHandlers.bind(this), this.channelRequestHandlersLength());
        _o.payloadChannelRequestHandlers = this.bb.createScalarList(this.payloadChannelRequestHandlers.bind(this), this.payloadChannelRequestHandlersLength());
        _o.payloadChannelNotificationHandlers = this.bb.createScalarList(this.payloadChannelNotificationHandlers.bind(this), this.payloadChannelNotificationHandlersLength());
    }
}
exports.ChannelMessageHandlers = ChannelMessageHandlers;
class ChannelMessageHandlersT {
    channelRequestHandlers;
    payloadChannelRequestHandlers;
    payloadChannelNotificationHandlers;
    constructor(channelRequestHandlers = [], payloadChannelRequestHandlers = [], payloadChannelNotificationHandlers = []) {
        this.channelRequestHandlers = channelRequestHandlers;
        this.payloadChannelRequestHandlers = payloadChannelRequestHandlers;
        this.payloadChannelNotificationHandlers = payloadChannelNotificationHandlers;
    }
    pack(builder) {
        const channelRequestHandlers = ChannelMessageHandlers.createChannelRequestHandlersVector(builder, builder.createObjectOffsetList(this.channelRequestHandlers));
        const payloadChannelRequestHandlers = ChannelMessageHandlers.createPayloadChannelRequestHandlersVector(builder, builder.createObjectOffsetList(this.payloadChannelRequestHandlers));
        const payloadChannelNotificationHandlers = ChannelMessageHandlers.createPayloadChannelNotificationHandlersVector(builder, builder.createObjectOffsetList(this.payloadChannelNotificationHandlers));
        return ChannelMessageHandlers.createChannelMessageHandlers(builder, channelRequestHandlers, payloadChannelRequestHandlers, payloadChannelNotificationHandlers);
    }
}
exports.ChannelMessageHandlersT = ChannelMessageHandlersT;
