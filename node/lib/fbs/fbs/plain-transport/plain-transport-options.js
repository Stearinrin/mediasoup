"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlainTransportOptionsT = exports.PlainTransportOptions = void 0;
const flatbuffers = require("flatbuffers");
const base_transport_options_1 = require("../../fbs/transport/base-transport-options");
const transport_listen_ip_1 = require("../../fbs/transport/transport-listen-ip");
class PlainTransportOptions {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPlainTransportOptions(bb, obj) {
        return (obj || new PlainTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPlainTransportOptions(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlainTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    base(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new base_transport_options_1.BaseTransportOptions()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    listenIp(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new transport_listen_ip_1.TransportListenIp()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    port() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    rtcpMux() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    comedia() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    enableSrtp() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    srtpCryptoSuite(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startPlainTransportOptions(builder) {
        builder.startObject(7);
    }
    static addBase(builder, baseOffset) {
        builder.addFieldOffset(0, baseOffset, 0);
    }
    static addListenIp(builder, listenIpOffset) {
        builder.addFieldOffset(1, listenIpOffset, 0);
    }
    static addPort(builder, port) {
        builder.addFieldInt16(2, port, 0);
    }
    static addRtcpMux(builder, rtcpMux) {
        builder.addFieldInt8(3, +rtcpMux, +false);
    }
    static addComedia(builder, comedia) {
        builder.addFieldInt8(4, +comedia, +false);
    }
    static addEnableSrtp(builder, enableSrtp) {
        builder.addFieldInt8(5, +enableSrtp, +false);
    }
    static addSrtpCryptoSuite(builder, srtpCryptoSuiteOffset) {
        builder.addFieldOffset(6, srtpCryptoSuiteOffset, 0);
    }
    static endPlainTransportOptions(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // listen_ip
        return offset;
    }
    unpack() {
        return new PlainTransportOptionsT((this.base() !== null ? this.base().unpack() : null), (this.listenIp() !== null ? this.listenIp().unpack() : null), this.port(), this.rtcpMux(), this.comedia(), this.enableSrtp(), this.srtpCryptoSuite());
    }
    unpackTo(_o) {
        _o.base = (this.base() !== null ? this.base().unpack() : null);
        _o.listenIp = (this.listenIp() !== null ? this.listenIp().unpack() : null);
        _o.port = this.port();
        _o.rtcpMux = this.rtcpMux();
        _o.comedia = this.comedia();
        _o.enableSrtp = this.enableSrtp();
        _o.srtpCryptoSuite = this.srtpCryptoSuite();
    }
}
exports.PlainTransportOptions = PlainTransportOptions;
class PlainTransportOptionsT {
    base;
    listenIp;
    port;
    rtcpMux;
    comedia;
    enableSrtp;
    srtpCryptoSuite;
    constructor(base = null, listenIp = null, port = 0, rtcpMux = false, comedia = false, enableSrtp = false, srtpCryptoSuite = null) {
        this.base = base;
        this.listenIp = listenIp;
        this.port = port;
        this.rtcpMux = rtcpMux;
        this.comedia = comedia;
        this.enableSrtp = enableSrtp;
        this.srtpCryptoSuite = srtpCryptoSuite;
    }
    pack(builder) {
        const base = (this.base !== null ? this.base.pack(builder) : 0);
        const listenIp = (this.listenIp !== null ? this.listenIp.pack(builder) : 0);
        const srtpCryptoSuite = (this.srtpCryptoSuite !== null ? builder.createString(this.srtpCryptoSuite) : 0);
        PlainTransportOptions.startPlainTransportOptions(builder);
        PlainTransportOptions.addBase(builder, base);
        PlainTransportOptions.addListenIp(builder, listenIp);
        PlainTransportOptions.addPort(builder, this.port);
        PlainTransportOptions.addRtcpMux(builder, this.rtcpMux);
        PlainTransportOptions.addComedia(builder, this.comedia);
        PlainTransportOptions.addEnableSrtp(builder, this.enableSrtp);
        PlainTransportOptions.addSrtpCryptoSuite(builder, srtpCryptoSuite);
        return PlainTransportOptions.endPlainTransportOptions(builder);
    }
}
exports.PlainTransportOptionsT = PlainTransportOptionsT;
