"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsumerLayersT = exports.ConsumerLayers = void 0;
const flatbuffers = require("flatbuffers");
const optional_uint16_1 = require("../../fbs/common/optional-uint16");
class ConsumerLayers {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsConsumerLayers(bb, obj) {
        return (obj || new ConsumerLayers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsConsumerLayers(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ConsumerLayers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    spatialLayer() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    temporalLayer(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new optional_uint16_1.OptionalUint16()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startConsumerLayers(builder) {
        builder.startObject(2);
    }
    static addSpatialLayer(builder, spatialLayer) {
        builder.addFieldInt16(0, spatialLayer, 0);
    }
    static addTemporalLayer(builder, temporalLayerOffset) {
        builder.addFieldOffset(1, temporalLayerOffset, 0);
    }
    static endConsumerLayers(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new ConsumerLayersT(this.spatialLayer(), (this.temporalLayer() !== null ? this.temporalLayer().unpack() : null));
    }
    unpackTo(_o) {
        _o.spatialLayer = this.spatialLayer();
        _o.temporalLayer = (this.temporalLayer() !== null ? this.temporalLayer().unpack() : null);
    }
}
exports.ConsumerLayers = ConsumerLayers;
class ConsumerLayersT {
    spatialLayer;
    temporalLayer;
    constructor(spatialLayer = 0, temporalLayer = null) {
        this.spatialLayer = spatialLayer;
        this.temporalLayer = temporalLayer;
    }
    pack(builder) {
        const temporalLayer = (this.temporalLayer !== null ? this.temporalLayer.pack(builder) : 0);
        ConsumerLayers.startConsumerLayers(builder);
        ConsumerLayers.addSpatialLayer(builder, this.spatialLayer);
        ConsumerLayers.addTemporalLayer(builder, temporalLayer);
        return ConsumerLayers.endConsumerLayers(builder);
    }
}
exports.ConsumerLayersT = ConsumerLayersT;
