"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringUint8MapT = exports.StringUint8Map = void 0;
const flatbuffers = require("flatbuffers");
class StringUint8Map {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsStringUint8Map(bb, obj) {
        return (obj || new StringUint8Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsStringUint8Map(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StringUint8Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    key(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    value() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    }
    static startStringUint8Map(builder) {
        builder.startObject(2);
    }
    static addKey(builder, keyOffset) {
        builder.addFieldOffset(0, keyOffset, 0);
    }
    static addValue(builder, value) {
        builder.addFieldInt8(1, value, 0);
    }
    static endStringUint8Map(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // key
        return offset;
    }
    static createStringUint8Map(builder, keyOffset, value) {
        StringUint8Map.startStringUint8Map(builder);
        StringUint8Map.addKey(builder, keyOffset);
        StringUint8Map.addValue(builder, value);
        return StringUint8Map.endStringUint8Map(builder);
    }
    unpack() {
        return new StringUint8MapT(this.key(), this.value());
    }
    unpackTo(_o) {
        _o.key = this.key();
        _o.value = this.value();
    }
}
exports.StringUint8Map = StringUint8Map;
class StringUint8MapT {
    key;
    value;
    constructor(key = null, value = 0) {
        this.key = key;
        this.value = value;
    }
    pack(builder) {
        const key = (this.key !== null ? builder.createString(this.key) : 0);
        return StringUint8Map.createStringUint8Map(builder, key, this.value);
    }
}
exports.StringUint8MapT = StringUint8MapT;
