"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsumeDataRequestT = exports.ConsumeDataRequest = void 0;
const flatbuffers = require("flatbuffers");
const sctp_stream_parameters_1 = require("../../fbs/sctp-parameters/sctp-stream-parameters");
class ConsumeDataRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsConsumeDataRequest(bb, obj) {
        return (obj || new ConsumeDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsConsumeDataRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ConsumeDataRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    dataConsumerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    dataProducerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    type(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    sctpStreamParameters(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new sctp_stream_parameters_1.SctpStreamParameters()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    label(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    protocol(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startConsumeDataRequest(builder) {
        builder.startObject(6);
    }
    static addDataConsumerId(builder, dataConsumerIdOffset) {
        builder.addFieldOffset(0, dataConsumerIdOffset, 0);
    }
    static addDataProducerId(builder, dataProducerIdOffset) {
        builder.addFieldOffset(1, dataProducerIdOffset, 0);
    }
    static addType(builder, typeOffset) {
        builder.addFieldOffset(2, typeOffset, 0);
    }
    static addSctpStreamParameters(builder, sctpStreamParametersOffset) {
        builder.addFieldOffset(3, sctpStreamParametersOffset, 0);
    }
    static addLabel(builder, labelOffset) {
        builder.addFieldOffset(4, labelOffset, 0);
    }
    static addProtocol(builder, protocolOffset) {
        builder.addFieldOffset(5, protocolOffset, 0);
    }
    static endConsumeDataRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // data_consumer_id
        builder.requiredField(offset, 6); // data_producer_id
        builder.requiredField(offset, 8); // type
        return offset;
    }
    unpack() {
        return new ConsumeDataRequestT(this.dataConsumerId(), this.dataProducerId(), this.type(), (this.sctpStreamParameters() !== null ? this.sctpStreamParameters().unpack() : null), this.label(), this.protocol());
    }
    unpackTo(_o) {
        _o.dataConsumerId = this.dataConsumerId();
        _o.dataProducerId = this.dataProducerId();
        _o.type = this.type();
        _o.sctpStreamParameters = (this.sctpStreamParameters() !== null ? this.sctpStreamParameters().unpack() : null);
        _o.label = this.label();
        _o.protocol = this.protocol();
    }
}
exports.ConsumeDataRequest = ConsumeDataRequest;
class ConsumeDataRequestT {
    dataConsumerId;
    dataProducerId;
    type;
    sctpStreamParameters;
    label;
    protocol;
    constructor(dataConsumerId = null, dataProducerId = null, type = null, sctpStreamParameters = null, label = null, protocol = null) {
        this.dataConsumerId = dataConsumerId;
        this.dataProducerId = dataProducerId;
        this.type = type;
        this.sctpStreamParameters = sctpStreamParameters;
        this.label = label;
        this.protocol = protocol;
    }
    pack(builder) {
        const dataConsumerId = (this.dataConsumerId !== null ? builder.createString(this.dataConsumerId) : 0);
        const dataProducerId = (this.dataProducerId !== null ? builder.createString(this.dataProducerId) : 0);
        const type = (this.type !== null ? builder.createString(this.type) : 0);
        const sctpStreamParameters = (this.sctpStreamParameters !== null ? this.sctpStreamParameters.pack(builder) : 0);
        const label = (this.label !== null ? builder.createString(this.label) : 0);
        const protocol = (this.protocol !== null ? builder.createString(this.protocol) : 0);
        ConsumeDataRequest.startConsumeDataRequest(builder);
        ConsumeDataRequest.addDataConsumerId(builder, dataConsumerId);
        ConsumeDataRequest.addDataProducerId(builder, dataProducerId);
        ConsumeDataRequest.addType(builder, type);
        ConsumeDataRequest.addSctpStreamParameters(builder, sctpStreamParameters);
        ConsumeDataRequest.addLabel(builder, label);
        ConsumeDataRequest.addProtocol(builder, protocol);
        return ConsumeDataRequest.endConsumeDataRequest(builder);
    }
}
exports.ConsumeDataRequestT = ConsumeDataRequestT;
