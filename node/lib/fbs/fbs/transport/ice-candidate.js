"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.IceCandidateT = exports.IceCandidate = void 0;
const flatbuffers = require("flatbuffers");
class IceCandidate {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsIceCandidate(bb, obj) {
        return (obj || new IceCandidate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsIceCandidate(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new IceCandidate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    foundation(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    priority() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    ip(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    protocol(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    port() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    type(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tcpType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startIceCandidate(builder) {
        builder.startObject(7);
    }
    static addFoundation(builder, foundationOffset) {
        builder.addFieldOffset(0, foundationOffset, 0);
    }
    static addPriority(builder, priority) {
        builder.addFieldInt32(1, priority, 0);
    }
    static addIp(builder, ipOffset) {
        builder.addFieldOffset(2, ipOffset, 0);
    }
    static addProtocol(builder, protocolOffset) {
        builder.addFieldOffset(3, protocolOffset, 0);
    }
    static addPort(builder, port) {
        builder.addFieldInt16(4, port, 0);
    }
    static addType(builder, typeOffset) {
        builder.addFieldOffset(5, typeOffset, 0);
    }
    static addTcpType(builder, tcpTypeOffset) {
        builder.addFieldOffset(6, tcpTypeOffset, 0);
    }
    static endIceCandidate(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // foundation
        builder.requiredField(offset, 8); // ip
        builder.requiredField(offset, 10); // protocol
        return offset;
    }
    static createIceCandidate(builder, foundationOffset, priority, ipOffset, protocolOffset, port, typeOffset, tcpTypeOffset) {
        IceCandidate.startIceCandidate(builder);
        IceCandidate.addFoundation(builder, foundationOffset);
        IceCandidate.addPriority(builder, priority);
        IceCandidate.addIp(builder, ipOffset);
        IceCandidate.addProtocol(builder, protocolOffset);
        IceCandidate.addPort(builder, port);
        IceCandidate.addType(builder, typeOffset);
        IceCandidate.addTcpType(builder, tcpTypeOffset);
        return IceCandidate.endIceCandidate(builder);
    }
    unpack() {
        return new IceCandidateT(this.foundation(), this.priority(), this.ip(), this.protocol(), this.port(), this.type(), this.tcpType());
    }
    unpackTo(_o) {
        _o.foundation = this.foundation();
        _o.priority = this.priority();
        _o.ip = this.ip();
        _o.protocol = this.protocol();
        _o.port = this.port();
        _o.type = this.type();
        _o.tcpType = this.tcpType();
    }
}
exports.IceCandidate = IceCandidate;
class IceCandidateT {
    foundation;
    priority;
    ip;
    protocol;
    port;
    type;
    tcpType;
    constructor(foundation = null, priority = 0, ip = null, protocol = null, port = 0, type = null, tcpType = null) {
        this.foundation = foundation;
        this.priority = priority;
        this.ip = ip;
        this.protocol = protocol;
        this.port = port;
        this.type = type;
        this.tcpType = tcpType;
    }
    pack(builder) {
        const foundation = (this.foundation !== null ? builder.createString(this.foundation) : 0);
        const ip = (this.ip !== null ? builder.createString(this.ip) : 0);
        const protocol = (this.protocol !== null ? builder.createString(this.protocol) : 0);
        const type = (this.type !== null ? builder.createString(this.type) : 0);
        const tcpType = (this.tcpType !== null ? builder.createString(this.tcpType) : 0);
        return IceCandidate.createIceCandidate(builder, foundation, this.priority, ip, protocol, this.port, type, tcpType);
    }
}
exports.IceCandidateT = IceCandidateT;
