"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringStringMapT = exports.StringStringMap = void 0;
const flatbuffers = require("flatbuffers");
class StringStringMap {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsStringStringMap(bb, obj) {
        return (obj || new StringStringMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsStringStringMap(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StringStringMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    key(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    value(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startStringStringMap(builder) {
        builder.startObject(2);
    }
    static addKey(builder, keyOffset) {
        builder.addFieldOffset(0, keyOffset, 0);
    }
    static addValue(builder, valueOffset) {
        builder.addFieldOffset(1, valueOffset, 0);
    }
    static endStringStringMap(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // key
        builder.requiredField(offset, 6); // value
        return offset;
    }
    static createStringStringMap(builder, keyOffset, valueOffset) {
        StringStringMap.startStringStringMap(builder);
        StringStringMap.addKey(builder, keyOffset);
        StringStringMap.addValue(builder, valueOffset);
        return StringStringMap.endStringStringMap(builder);
    }
    unpack() {
        return new StringStringMapT(this.key(), this.value());
    }
    unpackTo(_o) {
        _o.key = this.key();
        _o.value = this.value();
    }
}
exports.StringStringMap = StringStringMap;
class StringStringMapT {
    key;
    value;
    constructor(key = null, value = null) {
        this.key = key;
        this.value = value;
    }
    pack(builder) {
        const key = (this.key !== null ? builder.createString(this.key) : 0);
        const value = (this.value !== null ? builder.createString(this.value) : 0);
        return StringStringMap.createStringStringMap(builder, key, value);
    }
}
exports.StringStringMapT = StringStringMapT;
