"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecificTransportDumpT = exports.SpecificTransportDump = void 0;
const flatbuffers = require("flatbuffers");
const specific_transport_dump_data_1 = require("../../fbs/transport/specific-transport-dump-data");
class SpecificTransportDump {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSpecificTransportDump(bb, obj) {
        return (obj || new SpecificTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSpecificTransportDump(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SpecificTransportDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    dataType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : specific_transport_dump_data_1.SpecificTransportDumpData.NONE;
    }
    data(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    static startSpecificTransportDump(builder) {
        builder.startObject(2);
    }
    static addDataType(builder, dataType) {
        builder.addFieldInt8(0, dataType, specific_transport_dump_data_1.SpecificTransportDumpData.NONE);
    }
    static addData(builder, dataOffset) {
        builder.addFieldOffset(1, dataOffset, 0);
    }
    static endSpecificTransportDump(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSpecificTransportDump(builder, dataType, dataOffset) {
        SpecificTransportDump.startSpecificTransportDump(builder);
        SpecificTransportDump.addDataType(builder, dataType);
        SpecificTransportDump.addData(builder, dataOffset);
        return SpecificTransportDump.endSpecificTransportDump(builder);
    }
    unpack() {
        return new SpecificTransportDumpT(this.dataType(), (() => {
            let temp = (0, specific_transport_dump_data_1.unionToSpecificTransportDumpData)(this.dataType(), this.data.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })());
    }
    unpackTo(_o) {
        _o.dataType = this.dataType();
        _o.data = (() => {
            let temp = (0, specific_transport_dump_data_1.unionToSpecificTransportDumpData)(this.dataType(), this.data.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
    }
}
exports.SpecificTransportDump = SpecificTransportDump;
class SpecificTransportDumpT {
    dataType;
    data;
    constructor(dataType = specific_transport_dump_data_1.SpecificTransportDumpData.NONE, data = null) {
        this.dataType = dataType;
        this.data = data;
    }
    pack(builder) {
        const data = builder.createObjectOffset(this.data);
        return SpecificTransportDump.createSpecificTransportDump(builder, this.dataType, data);
    }
}
exports.SpecificTransportDumpT = SpecificTransportDumpT;
