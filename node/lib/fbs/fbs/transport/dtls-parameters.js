"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.DtlsParametersT = exports.DtlsParameters = void 0;
const flatbuffers = require("flatbuffers");
const fingerprint_1 = require("../../fbs/transport/fingerprint");
class DtlsParameters {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDtlsParameters(bb, obj) {
        return (obj || new DtlsParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDtlsParameters(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DtlsParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fingerprints(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new fingerprint_1.Fingerprint()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    fingerprintsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    role(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startDtlsParameters(builder) {
        builder.startObject(2);
    }
    static addFingerprints(builder, fingerprintsOffset) {
        builder.addFieldOffset(0, fingerprintsOffset, 0);
    }
    static createFingerprintsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startFingerprintsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addRole(builder, roleOffset) {
        builder.addFieldOffset(1, roleOffset, 0);
    }
    static endDtlsParameters(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fingerprints
        builder.requiredField(offset, 6); // role
        return offset;
    }
    static createDtlsParameters(builder, fingerprintsOffset, roleOffset) {
        DtlsParameters.startDtlsParameters(builder);
        DtlsParameters.addFingerprints(builder, fingerprintsOffset);
        DtlsParameters.addRole(builder, roleOffset);
        return DtlsParameters.endDtlsParameters(builder);
    }
    unpack() {
        return new DtlsParametersT(this.bb.createObjList(this.fingerprints.bind(this), this.fingerprintsLength()), this.role());
    }
    unpackTo(_o) {
        _o.fingerprints = this.bb.createObjList(this.fingerprints.bind(this), this.fingerprintsLength());
        _o.role = this.role();
    }
}
exports.DtlsParameters = DtlsParameters;
class DtlsParametersT {
    fingerprints;
    role;
    constructor(fingerprints = [], role = null) {
        this.fingerprints = fingerprints;
        this.role = role;
    }
    pack(builder) {
        const fingerprints = DtlsParameters.createFingerprintsVector(builder, builder.createObjectOffsetList(this.fingerprints));
        const role = (this.role !== null ? builder.createString(this.role) : 0);
        return DtlsParameters.createDtlsParameters(builder, fingerprints, role);
    }
}
exports.DtlsParametersT = DtlsParametersT;
