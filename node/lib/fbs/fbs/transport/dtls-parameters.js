"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.DtlsParametersT = exports.DtlsParameters = void 0;
const flatbuffers = require("flatbuffers");
const fingerprint_1 = require("../../fbs/transport/fingerprint");
class DtlsParameters {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDtlsParameters(bb, obj) {
        return (obj || new DtlsParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDtlsParameters(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DtlsParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    fingerprint(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new fingerprint_1.Fingerprint()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    fingerprintLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    role(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    dtlsState(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startDtlsParameters(builder) {
        builder.startObject(3);
    }
    static addFingerprint(builder, fingerprintOffset) {
        builder.addFieldOffset(0, fingerprintOffset, 0);
    }
    static createFingerprintVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startFingerprintVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addRole(builder, roleOffset) {
        builder.addFieldOffset(1, roleOffset, 0);
    }
    static addDtlsState(builder, dtlsStateOffset) {
        builder.addFieldOffset(2, dtlsStateOffset, 0);
    }
    static endDtlsParameters(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // fingerprint
        builder.requiredField(offset, 6); // role
        builder.requiredField(offset, 8); // dtls_state
        return offset;
    }
    static createDtlsParameters(builder, fingerprintOffset, roleOffset, dtlsStateOffset) {
        DtlsParameters.startDtlsParameters(builder);
        DtlsParameters.addFingerprint(builder, fingerprintOffset);
        DtlsParameters.addRole(builder, roleOffset);
        DtlsParameters.addDtlsState(builder, dtlsStateOffset);
        return DtlsParameters.endDtlsParameters(builder);
    }
    unpack() {
        return new DtlsParametersT(this.bb.createObjList(this.fingerprint.bind(this), this.fingerprintLength()), this.role(), this.dtlsState());
    }
    unpackTo(_o) {
        _o.fingerprint = this.bb.createObjList(this.fingerprint.bind(this), this.fingerprintLength());
        _o.role = this.role();
        _o.dtlsState = this.dtlsState();
    }
}
exports.DtlsParameters = DtlsParameters;
class DtlsParametersT {
    fingerprint;
    role;
    dtlsState;
    constructor(fingerprint = [], role = null, dtlsState = null) {
        this.fingerprint = fingerprint;
        this.role = role;
        this.dtlsState = dtlsState;
    }
    pack(builder) {
        const fingerprint = DtlsParameters.createFingerprintVector(builder, builder.createObjectOffsetList(this.fingerprint));
        const role = (this.role !== null ? builder.createString(this.role) : 0);
        const dtlsState = (this.dtlsState !== null ? builder.createString(this.dtlsState) : 0);
        return DtlsParameters.createDtlsParameters(builder, fingerprint, role, dtlsState);
    }
}
exports.DtlsParametersT = DtlsParametersT;
