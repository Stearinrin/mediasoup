"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uint16StringMapT = exports.Uint16StringMap = void 0;
const flatbuffers = require("flatbuffers");
class Uint16StringMap {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsUint16StringMap(bb, obj) {
        return (obj || new Uint16StringMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsUint16StringMap(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Uint16StringMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    key() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    value(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startUint16StringMap(builder) {
        builder.startObject(2);
    }
    static addKey(builder, key) {
        builder.addFieldInt16(0, key, 0);
    }
    static addValue(builder, valueOffset) {
        builder.addFieldOffset(1, valueOffset, 0);
    }
    static endUint16StringMap(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // value
        return offset;
    }
    static createUint16StringMap(builder, key, valueOffset) {
        Uint16StringMap.startUint16StringMap(builder);
        Uint16StringMap.addKey(builder, key);
        Uint16StringMap.addValue(builder, valueOffset);
        return Uint16StringMap.endUint16StringMap(builder);
    }
    unpack() {
        return new Uint16StringMapT(this.key(), this.value());
    }
    unpackTo(_o) {
        _o.key = this.key();
        _o.value = this.value();
    }
}
exports.Uint16StringMap = Uint16StringMap;
class Uint16StringMapT {
    key;
    value;
    constructor(key = 0, value = null) {
        this.key = key;
        this.value = value;
    }
    pack(builder) {
        const value = (this.value !== null ? builder.createString(this.value) : 0);
        return Uint16StringMap.createUint16StringMap(builder, this.key, value);
    }
}
exports.Uint16StringMapT = Uint16StringMapT;
