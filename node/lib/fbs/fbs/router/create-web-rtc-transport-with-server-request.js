"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateWebRtcTransportWithServerRequestT = exports.CreateWebRtcTransportWithServerRequest = void 0;
const flatbuffers = require("flatbuffers");
const num_sctp_streams_1 = require("../../fbs/router/num-sctp-streams");
class CreateWebRtcTransportWithServerRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCreateWebRtcTransportWithServerRequest(bb, obj) {
        return (obj || new CreateWebRtcTransportWithServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCreateWebRtcTransportWithServerRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CreateWebRtcTransportWithServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    transportId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    webRtcServerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    enableUdp() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    enableTcp() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    preferUdp() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    preferTcp() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    initialAvailableOutgoingBitrate() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    enableSctp() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    numSctpStreams(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new num_sctp_streams_1.NumSctpStreams()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    maxSctpMessageSize() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    sctpSendBufferSize() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    isDataChannel() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    }
    static startCreateWebRtcTransportWithServerRequest(builder) {
        builder.startObject(12);
    }
    static addTransportId(builder, transportIdOffset) {
        builder.addFieldOffset(0, transportIdOffset, 0);
    }
    static addWebRtcServerId(builder, webRtcServerIdOffset) {
        builder.addFieldOffset(1, webRtcServerIdOffset, 0);
    }
    static addEnableUdp(builder, enableUdp) {
        builder.addFieldInt8(2, +enableUdp, +false);
    }
    static addEnableTcp(builder, enableTcp) {
        builder.addFieldInt8(3, +enableTcp, +false);
    }
    static addPreferUdp(builder, preferUdp) {
        builder.addFieldInt8(4, +preferUdp, +false);
    }
    static addPreferTcp(builder, preferTcp) {
        builder.addFieldInt8(5, +preferTcp, +false);
    }
    static addInitialAvailableOutgoingBitrate(builder, initialAvailableOutgoingBitrate) {
        builder.addFieldInt32(6, initialAvailableOutgoingBitrate, 0);
    }
    static addEnableSctp(builder, enableSctp) {
        builder.addFieldInt8(7, +enableSctp, +false);
    }
    static addNumSctpStreams(builder, numSctpStreamsOffset) {
        builder.addFieldOffset(8, numSctpStreamsOffset, 0);
    }
    static addMaxSctpMessageSize(builder, maxSctpMessageSize) {
        builder.addFieldInt32(9, maxSctpMessageSize, 0);
    }
    static addSctpSendBufferSize(builder, sctpSendBufferSize) {
        builder.addFieldInt32(10, sctpSendBufferSize, 0);
    }
    static addIsDataChannel(builder, isDataChannel) {
        builder.addFieldInt8(11, +isDataChannel, +true);
    }
    static endCreateWebRtcTransportWithServerRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // transport_id
        return offset;
    }
    unpack() {
        return new CreateWebRtcTransportWithServerRequestT(this.transportId(), this.webRtcServerId(), this.enableUdp(), this.enableTcp(), this.preferUdp(), this.preferTcp(), this.initialAvailableOutgoingBitrate(), this.enableSctp(), (this.numSctpStreams() !== null ? this.numSctpStreams().unpack() : null), this.maxSctpMessageSize(), this.sctpSendBufferSize(), this.isDataChannel());
    }
    unpackTo(_o) {
        _o.transportId = this.transportId();
        _o.webRtcServerId = this.webRtcServerId();
        _o.enableUdp = this.enableUdp();
        _o.enableTcp = this.enableTcp();
        _o.preferUdp = this.preferUdp();
        _o.preferTcp = this.preferTcp();
        _o.initialAvailableOutgoingBitrate = this.initialAvailableOutgoingBitrate();
        _o.enableSctp = this.enableSctp();
        _o.numSctpStreams = (this.numSctpStreams() !== null ? this.numSctpStreams().unpack() : null);
        _o.maxSctpMessageSize = this.maxSctpMessageSize();
        _o.sctpSendBufferSize = this.sctpSendBufferSize();
        _o.isDataChannel = this.isDataChannel();
    }
}
exports.CreateWebRtcTransportWithServerRequest = CreateWebRtcTransportWithServerRequest;
class CreateWebRtcTransportWithServerRequestT {
    transportId;
    webRtcServerId;
    enableUdp;
    enableTcp;
    preferUdp;
    preferTcp;
    initialAvailableOutgoingBitrate;
    enableSctp;
    numSctpStreams;
    maxSctpMessageSize;
    sctpSendBufferSize;
    isDataChannel;
    constructor(transportId = null, webRtcServerId = null, enableUdp = false, enableTcp = false, preferUdp = false, preferTcp = false, initialAvailableOutgoingBitrate = 0, enableSctp = false, numSctpStreams = null, maxSctpMessageSize = 0, sctpSendBufferSize = 0, isDataChannel = true) {
        this.transportId = transportId;
        this.webRtcServerId = webRtcServerId;
        this.enableUdp = enableUdp;
        this.enableTcp = enableTcp;
        this.preferUdp = preferUdp;
        this.preferTcp = preferTcp;
        this.initialAvailableOutgoingBitrate = initialAvailableOutgoingBitrate;
        this.enableSctp = enableSctp;
        this.numSctpStreams = numSctpStreams;
        this.maxSctpMessageSize = maxSctpMessageSize;
        this.sctpSendBufferSize = sctpSendBufferSize;
        this.isDataChannel = isDataChannel;
    }
    pack(builder) {
        const transportId = (this.transportId !== null ? builder.createString(this.transportId) : 0);
        const webRtcServerId = (this.webRtcServerId !== null ? builder.createString(this.webRtcServerId) : 0);
        const numSctpStreams = (this.numSctpStreams !== null ? this.numSctpStreams.pack(builder) : 0);
        CreateWebRtcTransportWithServerRequest.startCreateWebRtcTransportWithServerRequest(builder);
        CreateWebRtcTransportWithServerRequest.addTransportId(builder, transportId);
        CreateWebRtcTransportWithServerRequest.addWebRtcServerId(builder, webRtcServerId);
        CreateWebRtcTransportWithServerRequest.addEnableUdp(builder, this.enableUdp);
        CreateWebRtcTransportWithServerRequest.addEnableTcp(builder, this.enableTcp);
        CreateWebRtcTransportWithServerRequest.addPreferUdp(builder, this.preferUdp);
        CreateWebRtcTransportWithServerRequest.addPreferTcp(builder, this.preferTcp);
        CreateWebRtcTransportWithServerRequest.addInitialAvailableOutgoingBitrate(builder, this.initialAvailableOutgoingBitrate);
        CreateWebRtcTransportWithServerRequest.addEnableSctp(builder, this.enableSctp);
        CreateWebRtcTransportWithServerRequest.addNumSctpStreams(builder, numSctpStreams);
        CreateWebRtcTransportWithServerRequest.addMaxSctpMessageSize(builder, this.maxSctpMessageSize);
        CreateWebRtcTransportWithServerRequest.addSctpSendBufferSize(builder, this.sctpSendBufferSize);
        CreateWebRtcTransportWithServerRequest.addIsDataChannel(builder, this.isDataChannel);
        return CreateWebRtcTransportWithServerRequest.endCreateWebRtcTransportWithServerRequest(builder);
    }
}
exports.CreateWebRtcTransportWithServerRequestT = CreateWebRtcTransportWithServerRequestT;
