"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportListenIpT = exports.TransportListenIp = void 0;
const flatbuffers = require("flatbuffers");
class TransportListenIp {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTransportListenIp(bb, obj) {
        return (obj || new TransportListenIp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTransportListenIp(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TransportListenIp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ip(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    announcedIp(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startTransportListenIp(builder) {
        builder.startObject(2);
    }
    static addIp(builder, ipOffset) {
        builder.addFieldOffset(0, ipOffset, 0);
    }
    static addAnnouncedIp(builder, announcedIpOffset) {
        builder.addFieldOffset(1, announcedIpOffset, 0);
    }
    static endTransportListenIp(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // ip
        return offset;
    }
    static createTransportListenIp(builder, ipOffset, announcedIpOffset) {
        TransportListenIp.startTransportListenIp(builder);
        TransportListenIp.addIp(builder, ipOffset);
        TransportListenIp.addAnnouncedIp(builder, announcedIpOffset);
        return TransportListenIp.endTransportListenIp(builder);
    }
    unpack() {
        return new TransportListenIpT(this.ip(), this.announcedIp());
    }
    unpackTo(_o) {
        _o.ip = this.ip();
        _o.announcedIp = this.announcedIp();
    }
}
exports.TransportListenIp = TransportListenIp;
class TransportListenIpT {
    ip;
    announcedIp;
    constructor(ip = null, announcedIp = null) {
        this.ip = ip;
        this.announcedIp = announcedIp;
    }
    pack(builder) {
        const ip = (this.ip !== null ? builder.createString(this.ip) : 0);
        const announcedIp = (this.announcedIp !== null ? builder.createString(this.announcedIp) : 0);
        return TransportListenIp.createTransportListenIp(builder, ip, announcedIp);
    }
}
exports.TransportListenIpT = TransportListenIpT;
