"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.RtpHeaderExtensionParameters = void 0;
const flatbuffers = require("flatbuffers");
class RtpHeaderExtensionParameters {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRtpHeaderExtensionParameters(bb, obj) {
        return (obj || new RtpHeaderExtensionParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRtpHeaderExtensionParameters(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RtpHeaderExtensionParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    uri(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    id() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    }
    encrypt() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    parameters(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startRtpHeaderExtensionParameters(builder) {
        builder.startObject(4);
    }
    static addUri(builder, uriOffset) {
        builder.addFieldOffset(0, uriOffset, 0);
    }
    static addId(builder, id) {
        builder.addFieldInt8(1, id, 0);
    }
    static addEncrypt(builder, encrypt) {
        builder.addFieldInt8(2, +encrypt, +false);
    }
    static addParameters(builder, parametersOffset) {
        builder.addFieldOffset(3, parametersOffset, 0);
    }
    static endRtpHeaderExtensionParameters(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // uri
        return offset;
    }
    static createRtpHeaderExtensionParameters(builder, uriOffset, id, encrypt, parametersOffset) {
        RtpHeaderExtensionParameters.startRtpHeaderExtensionParameters(builder);
        RtpHeaderExtensionParameters.addUri(builder, uriOffset);
        RtpHeaderExtensionParameters.addId(builder, id);
        RtpHeaderExtensionParameters.addEncrypt(builder, encrypt);
        RtpHeaderExtensionParameters.addParameters(builder, parametersOffset);
        return RtpHeaderExtensionParameters.endRtpHeaderExtensionParameters(builder);
    }
}
exports.RtpHeaderExtensionParameters = RtpHeaderExtensionParameters;
