"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelMessageHandlers = void 0;
const flatbuffers = require("flatbuffers");
class ChannelMessageHandlers {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsChannelMessageHandlers(bb, obj) {
        return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsChannelMessageHandlers(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ChannelMessageHandlers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    channelRequestHandlers(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    channelRequestHandlersLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    payloadchannelRequestHandlers(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    payloadchannelRequestHandlersLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    payloadchannelNotificationHandlers(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    payloadchannelNotificationHandlersLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startChannelMessageHandlers(builder) {
        builder.startObject(3);
    }
    static addChannelRequestHandlers(builder, channelRequestHandlersOffset) {
        builder.addFieldOffset(0, channelRequestHandlersOffset, 0);
    }
    static createChannelRequestHandlersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startChannelRequestHandlersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPayloadchannelRequestHandlers(builder, payloadchannelRequestHandlersOffset) {
        builder.addFieldOffset(1, payloadchannelRequestHandlersOffset, 0);
    }
    static createPayloadchannelRequestHandlersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPayloadchannelRequestHandlersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPayloadchannelNotificationHandlers(builder, payloadchannelNotificationHandlersOffset) {
        builder.addFieldOffset(2, payloadchannelNotificationHandlersOffset, 0);
    }
    static createPayloadchannelNotificationHandlersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPayloadchannelNotificationHandlersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endChannelMessageHandlers(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createChannelMessageHandlers(builder, channelRequestHandlersOffset, payloadchannelRequestHandlersOffset, payloadchannelNotificationHandlersOffset) {
        ChannelMessageHandlers.startChannelMessageHandlers(builder);
        ChannelMessageHandlers.addChannelRequestHandlers(builder, channelRequestHandlersOffset);
        ChannelMessageHandlers.addPayloadchannelRequestHandlers(builder, payloadchannelRequestHandlersOffset);
        ChannelMessageHandlers.addPayloadchannelNotificationHandlers(builder, payloadchannelNotificationHandlersOffset);
        return ChannelMessageHandlers.endChannelMessageHandlers(builder);
    }
}
exports.ChannelMessageHandlers = ChannelMessageHandlers;
