"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.fake = void 0;
const flatbuffers = require("flatbuffers");
class fake {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsfake(bb, obj) {
        return (obj || new fake()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsfake(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new fake()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    foo() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    static startfake(builder) {
        builder.startObject(1);
    }
    static addFoo(builder, foo) {
        builder.addFieldInt8(0, foo, 0);
    }
    static endfake(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishfakeBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedfakeBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createfake(builder, foo) {
        fake.startfake(builder);
        fake.addFoo(builder, foo);
        return fake.endfake(builder);
    }
}
exports.fake = fake;
