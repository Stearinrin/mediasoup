"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsumeResponse = void 0;
const flatbuffers = require("flatbuffers");
const consumer_layers_1 = require("../../f-b-s/consumer/consumer-layers");
class ConsumeResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsConsumeResponse(bb, obj) {
        return (obj || new ConsumeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsConsumeResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ConsumeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    paused() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    producerPaused() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    score() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    }
    preferredLayers(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new consumer_layers_1.ConsumerLayers()).__init(this.bb_pos + offset, this.bb) : null;
    }
    static startConsumeResponse(builder) {
        builder.startObject(4);
    }
    static addPaused(builder, paused) {
        builder.addFieldInt8(0, +paused, +false);
    }
    static addProducerPaused(builder, producerPaused) {
        builder.addFieldInt8(1, +producerPaused, +false);
    }
    static addScore(builder, score) {
        builder.addFieldInt8(2, score, 0);
    }
    static addPreferredLayers(builder, preferredLayersOffset) {
        builder.addFieldStruct(3, preferredLayersOffset, 0);
    }
    static endConsumeResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
exports.ConsumeResponse = ConsumeResponse;
