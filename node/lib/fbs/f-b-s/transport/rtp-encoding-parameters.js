"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.RtpEncodingParameters = void 0;
const flatbuffers = require("flatbuffers");
const rtx_1 = require("../../f-b-s/transport/rtx");
class RtpEncodingParameters {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRtpEncodingParameters(bb, obj) {
        return (obj || new RtpEncodingParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRtpEncodingParameters(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RtpEncodingParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ssrc() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    rid(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    codecPayloadType() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    }
    rtx(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new rtx_1.Rtx()).__init(this.bb_pos + offset, this.bb) : null;
    }
    dtx() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    scalabilityMode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    scaleResolutionDownBy() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    }
    maxBitrate() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    static startRtpEncodingParameters(builder) {
        builder.startObject(8);
    }
    static addSsrc(builder, ssrc) {
        builder.addFieldInt32(0, ssrc, 0);
    }
    static addRid(builder, ridOffset) {
        builder.addFieldOffset(1, ridOffset, 0);
    }
    static addCodecPayloadType(builder, codecPayloadType) {
        builder.addFieldInt8(2, codecPayloadType, 0);
    }
    static addRtx(builder, rtxOffset) {
        builder.addFieldStruct(3, rtxOffset, 0);
    }
    static addDtx(builder, dtx) {
        builder.addFieldInt8(4, +dtx, +false);
    }
    static addScalabilityMode(builder, scalabilityModeOffset) {
        builder.addFieldOffset(5, scalabilityModeOffset, 0);
    }
    static addScaleResolutionDownBy(builder, scaleResolutionDownBy) {
        builder.addFieldInt8(6, scaleResolutionDownBy, 0);
    }
    static addMaxBitrate(builder, maxBitrate) {
        builder.addFieldInt32(7, maxBitrate, 0);
    }
    static endRtpEncodingParameters(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
exports.RtpEncodingParameters = RtpEncodingParameters;
