"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsumeRequest = void 0;
const flatbuffers = require("flatbuffers");
const consumer_layers_1 = require("../../f-b-s/consumer/consumer-layers");
const media_kind_1 = require("../../f-b-s/rtp-parameters/media-kind");
const rtp_encoding_parameters_1 = require("../../f-b-s/rtp-parameters/rtp-encoding-parameters");
const rtp_parameters_1 = require("../../f-b-s/rtp-parameters/rtp-parameters");
const type_1 = require("../../f-b-s/rtp-parameters/type");
class ConsumeRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsConsumeRequest(bb, obj) {
        return (obj || new ConsumeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsConsumeRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ConsumeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    consumerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    producerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    kind() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : media_kind_1.MediaKind.ALL;
    }
    rtpParameters(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new rtp_parameters_1.RtpParameters()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : type_1.Type.NONE;
    }
    consumableRtpEncodings(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new rtp_encoding_parameters_1.RtpEncodingParameters()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    consumableRtpEncodingsLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    paused() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    preferredLayers(obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new consumer_layers_1.ConsumerLayers()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    ignoreDtx() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    static startConsumeRequest(builder) {
        builder.startObject(9);
    }
    static addConsumerId(builder, consumerIdOffset) {
        builder.addFieldOffset(0, consumerIdOffset, 0);
    }
    static addProducerId(builder, producerIdOffset) {
        builder.addFieldOffset(1, producerIdOffset, 0);
    }
    static addKind(builder, kind) {
        builder.addFieldInt8(2, kind, media_kind_1.MediaKind.ALL);
    }
    static addRtpParameters(builder, rtpParametersOffset) {
        builder.addFieldOffset(3, rtpParametersOffset, 0);
    }
    static addType(builder, type) {
        builder.addFieldInt8(4, type, type_1.Type.NONE);
    }
    static addConsumableRtpEncodings(builder, consumableRtpEncodingsOffset) {
        builder.addFieldOffset(5, consumableRtpEncodingsOffset, 0);
    }
    static createConsumableRtpEncodingsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startConsumableRtpEncodingsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPaused(builder, paused) {
        builder.addFieldInt8(6, +paused, +false);
    }
    static addPreferredLayers(builder, preferredLayersOffset) {
        builder.addFieldOffset(7, preferredLayersOffset, 0);
    }
    static addIgnoreDtx(builder, ignoreDtx) {
        builder.addFieldInt8(8, +ignoreDtx, +false);
    }
    static endConsumeRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // consumer_id
        builder.requiredField(offset, 6); // producer_id
        builder.requiredField(offset, 10); // rtp_parameters
        builder.requiredField(offset, 14); // consumable_rtp_encodings
        return offset;
    }
    static finishConsumeRequestBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedConsumeRequestBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
}
exports.ConsumeRequest = ConsumeRequest;
