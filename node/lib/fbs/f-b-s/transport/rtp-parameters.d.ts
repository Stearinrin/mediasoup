import * as flatbuffers from 'flatbuffers';
import { RtcpParameters } from '../../f-b-s/transport/rtcp-parameters';
import { RtpCodecParameters } from '../../f-b-s/transport/rtp-codec-parameters';
import { RtpEncodingParameters } from '../../f-b-s/transport/rtp-encoding-parameters';
import { RtpHeaderExtensionParameters } from '../../f-b-s/transport/rtp-header-extension-parameters';
export declare class RtpParameters {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): RtpParameters;
    static getRootAsRtpParameters(bb: flatbuffers.ByteBuffer, obj?: RtpParameters): RtpParameters;
    static getSizePrefixedRootAsRtpParameters(bb: flatbuffers.ByteBuffer, obj?: RtpParameters): RtpParameters;
    mid(): string | null;
    mid(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    codecs(index: number, obj?: RtpCodecParameters): RtpCodecParameters | null;
    codecsLength(): number;
    headerExtensions(index: number, obj?: RtpHeaderExtensionParameters): RtpHeaderExtensionParameters | null;
    headerExtensionsLength(): number;
    encodings(index: number, obj?: RtpEncodingParameters): RtpEncodingParameters | null;
    encodingsLength(): number;
    rtcp(index: number, obj?: RtcpParameters): RtcpParameters | null;
    rtcpLength(): number;
    static startRtpParameters(builder: flatbuffers.Builder): void;
    static addMid(builder: flatbuffers.Builder, midOffset: flatbuffers.Offset): void;
    static addCodecs(builder: flatbuffers.Builder, codecsOffset: flatbuffers.Offset): void;
    static createCodecsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startCodecsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addHeaderExtensions(builder: flatbuffers.Builder, headerExtensionsOffset: flatbuffers.Offset): void;
    static createHeaderExtensionsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startHeaderExtensionsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addEncodings(builder: flatbuffers.Builder, encodingsOffset: flatbuffers.Offset): void;
    static createEncodingsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startEncodingsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addRtcp(builder: flatbuffers.Builder, rtcpOffset: flatbuffers.Offset): void;
    static createRtcpVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startRtcpVector(builder: flatbuffers.Builder, numElems: number): void;
    static endRtpParameters(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishRtpParametersBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedRtpParametersBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static createRtpParameters(builder: flatbuffers.Builder, midOffset: flatbuffers.Offset, codecsOffset: flatbuffers.Offset, headerExtensionsOffset: flatbuffers.Offset, encodingsOffset: flatbuffers.Offset, rtcpOffset: flatbuffers.Offset): flatbuffers.Offset;
}
//# sourceMappingURL=rtp-parameters.d.ts.map