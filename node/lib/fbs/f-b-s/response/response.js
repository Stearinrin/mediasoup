"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = void 0;
const flatbuffers = require("flatbuffers");
const body_1 = require("../../f-b-s/response/body");
class Response {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsResponse(bb, obj) {
        return (obj || new Response()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Response()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    accepted() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    bodyType() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : body_1.Body.NONE;
    }
    body(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    static startResponse(builder) {
        builder.startObject(4);
    }
    static addId(builder, id) {
        builder.addFieldInt32(0, id, 0);
    }
    static addAccepted(builder, accepted) {
        builder.addFieldInt8(1, +accepted, +false);
    }
    static addBodyType(builder, bodyType) {
        builder.addFieldInt8(2, bodyType, body_1.Body.NONE);
    }
    static addBody(builder, bodyOffset) {
        builder.addFieldOffset(3, bodyOffset, 0);
    }
    static endResponse(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishResponseBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedResponseBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createResponse(builder, id, accepted, bodyType, bodyOffset) {
        Response.startResponse(builder);
        Response.addId(builder, id);
        Response.addAccepted(builder, accepted);
        Response.addBodyType(builder, bodyType);
        Response.addBody(builder, bodyOffset);
        return Response.endResponse(builder);
    }
}
exports.Response = Response;
