include "common.fbs";
include "consumer.fbs";
include "rtpParameters.fbs";
include "sctpParameters.fbs";

namespace FBS.Transport;

enum TransportProtocol: uint8 { UDP = 1, TCP }

table TransportListenIp {
  ip:string (required);
  announced_ip:string;
}

table RestartIceResponse {
  username_fragment:string (required);
  password:string (required);
  ice_lite:bool;
}

union ConnectData {
  ConnectPlainTransportData,
  ConnectWebRtcTransportData,
  ConnectPipeTransportData,
}

table ConnectRequest {
  data: ConnectData (required);
}

union ConnectResponseData {
  ConnectPlainTransportResponse,
  ConnectWebRtcTransportResponse,
  ConnectPipeTransportResponse,
}

table ConnectResponse {
  data:ConnectResponseData;
}

table ConnectPlainTransportData {
  ip:string;
  port:uint16 = null;
  rtcp_port:uint16 = null;
  srtp_parameters:SrtpParameters;
}

table ConnectPlainTransportResponse {
  tuple:Tuple (required);
  rtcp_tuple:Tuple;
  srtp_parameters:SrtpParameters;
}

table ConnectWebRtcTransportData {
  dtls_parameters:DtlsParameters (required);
}

table ConnectWebRtcTransportResponse {
  dtls_local_role:string (required);
}

table ConnectPipeTransportData {
  ip:string (required);
  port:uint16 = null;
  srtp_parameters:SrtpParameters;
}

table ConnectPipeTransportResponse {
  tuple:Tuple;
}

table ConsumeRequest {
  consumer_id:string (required);
  producer_id:string (required);
  kind:FBS.RtpParameters.MediaKind;
  rtp_parameters:FBS.RtpParameters.RtpParameters (required);
  type:FBS.RtpParameters.Type;
  consumable_rtp_encodings:[FBS.RtpParameters.RtpEncodingParameters] (required);
  paused:bool = false;
  preferred_layers:FBS.Consumer.ConsumerLayers;
  ignore_dtx:bool = false;
}

table ConsumeResponse {
  paused:bool;
  producer_paused:bool;
  score:FBS.Consumer.ConsumerScore;
  preferred_layers:FBS.Consumer.ConsumerLayers;
}

table ProduceRequest {
  producer_id:string (required);
  kind:FBS.RtpParameters.MediaKind;
  rtp_parameters:FBS.RtpParameters.RtpParameters (required);
  rtp_mapping:FBS.RtpParameters.RtpMapping (required);
  key_frame_request_delay:uint16;
  paused:bool = false;
}

table ProduceResponse {
  type:FBS.RtpParameters.Type;
}

table ProduceDataRequest {
  data_producer_id:string (required);
  type:string (required);
  sctp_stream_parameters:FBS.SctpParameters.SctpStreamParameters;
  label:string;
  protocol:string;
}

table ConsumeDataRequest {
  data_consumer_id:string (required);
  data_producer_id:string (required);
  type:string (required);
  sctp_stream_parameters:FBS.SctpParameters.SctpStreamParameters;
  label:string;
  protocol:string;
}

table RtpListener {
  ssrc_table:[FBS.Common.Uint32String] (required);
  mid_table:[FBS.Common.StringString] (required);
  rid_table:[FBS.Common.StringString] (required);
}

table SctpListener {
  stream_id_table:[FBS.Common.Uint16String] (required);
}

union TransportDumpData {
  BaseTransportDump,
  DirectTransportDump,
  PipeTransportDump,
  PlainTransportDump,
  WebRtcTransportDump,
}

table DumpResponse {
  data:TransportDumpData;
}

table BaseTransportDump {
  id:string (required);
  direct:bool=false;
  producer_ids:[string] (required);
  consumer_ids:[string] (required);
  map_ssrc_consumer_id:[FBS.Common.Uint32String] (required);
  map_rtx_ssrc_consumer_id:[FBS.Common.Uint32String] (required);
  data_producer_ids:[string] (required);
  data_consumer_ids:[string] (required);
  recv_rtp_header_extensions:[FBS.Common.StringUint8] (required);
  rtp_listener:RtpListener (required);
  max_message_size:uint32;
  sctp_parameters:FBS.SctpParameters.SctpParameters;
  sctp_state:string;
  sctp_listener: SctpListener;
  trace_event_types:[string] (required);
}

/* WebRtcTransport */

table IceParameters {
 username_fragment:string (required);
 password:string (required);
 ice_lite:bool = true;
}

table IceCandidate {
  foundation:string (required);
  priority:uint32;
  ip:string (required);
  protocol:string (required);
  port:uint16;
  type:string;
  tcp_type:string;
}

table Tuple {
  local_ip:string (required);
  local_port:uint16;
  remote_ip:string (required);
  remote_port:uint16;
  protocol:string (required);
}

table Fingerprint {
  algorithm:string (required);
  value:string (required);
}

table DtlsParameters {
  fingerprints:[Fingerprint] (required);
  role:string;
}

table WebRtcTransportDump {
  base:DumpResponse (required);
  ice_role:string (required);
  ice_parameters:IceParameters (required);
  ice_candidates:[IceCandidate] (required);
  ice_state:string (required);
  ice_selected_tuple:Tuple;
  dtls_parameters:DtlsParameters (required);
  dtls_state:string (required);
}

/* PlainTransport */

table SrtpParameters {
  crypto_suite:string (required);
  key_base64:string (required);
}

table PlainTransportDump {
  base:DumpResponse (required);
  rtc_mux:bool;
  comedia:bool;
  tuple:Tuple;
  rtcp_tuple:Tuple;
  srtp_parameters:SrtpParameters;
}

/* DirectTransort */

table DirectTransportDump {
  base:DumpResponse (required);
}

/* PipeTransort */

table PipeTransportDump {
  base:DumpResponse (required);
  tuple:Tuple (required);
  rtx:bool;
  srtp_parameters:SrtpParameters;
}

/* BaseTransportOptions */

table BaseTransportOptions {
  direct:bool = false;
  max_message_size:uint32;
  initial_available_outgoing_bitrate:uint32;
  enable_sctp:bool = false;
  num_sctp_streams:FBS.SctpParameters.NumSctpStreams;
  max_sctp_message_size:uint32;
  sctp_send_buffer_size:uint32;
  is_data_channel:bool = false;
}

// TMP: String holding JSON stats.
table GetStatsResponse {
  stats:string (required);
}

table SetMaxIncomingBitrateRequest {
  max_incoming_bitrate:uint32;
}

table SetMaxOutgoingBitrateRequest {
  max_outgoing_bitrate:uint32;
}

table EnableTraceEventRequest {
  events:[string] (required);
}

table CloseProducerRequest {
  producer_id:string (required);
}

table CloseConsumerRequest {
  consumer_id:string (required);
}

table CloseDataProducerRequest {
  data_producer_id:string (required);
}

table CloseDataConsumerRequest {
  data_consumer_id:string (required);
}
