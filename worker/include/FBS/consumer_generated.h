// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONSUMER_FBS_CONSUMER_H_
#define FLATBUFFERS_GENERATED_CONSUMER_FBS_CONSUMER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace FBS {
namespace Consumer {

struct ConsumerLayers;
struct ConsumerLayersBuilder;

struct ConsumerScore;
struct ConsumerScoreBuilder;

struct EnableTraceEventRequest;
struct EnableTraceEventRequestBuilder;

inline const flatbuffers::TypeTable *ConsumerLayersTypeTable();

inline const flatbuffers::TypeTable *ConsumerScoreTypeTable();

inline const flatbuffers::TypeTable *EnableTraceEventRequestTypeTable();

struct ConsumerLayers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConsumerLayersBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ConsumerLayersTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPATIALLAYER = 4,
    VT_TEMPORALLAYER = 6
  };
  uint8_t spatialLayer() const {
    return GetField<uint8_t>(VT_SPATIALLAYER, 0);
  }
  uint8_t temporalLayer() const {
    return GetField<uint8_t>(VT_TEMPORALLAYER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SPATIALLAYER, 1) &&
           VerifyField<uint8_t>(verifier, VT_TEMPORALLAYER, 1) &&
           verifier.EndTable();
  }
};

struct ConsumerLayersBuilder {
  typedef ConsumerLayers Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_spatialLayer(uint8_t spatialLayer) {
    fbb_.AddElement<uint8_t>(ConsumerLayers::VT_SPATIALLAYER, spatialLayer, 0);
  }
  void add_temporalLayer(uint8_t temporalLayer) {
    fbb_.AddElement<uint8_t>(ConsumerLayers::VT_TEMPORALLAYER, temporalLayer, 0);
  }
  explicit ConsumerLayersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ConsumerLayers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConsumerLayers>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConsumerLayers> CreateConsumerLayers(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t spatialLayer = 0,
    uint8_t temporalLayer = 0) {
  ConsumerLayersBuilder builder_(_fbb);
  builder_.add_temporalLayer(temporalLayer);
  builder_.add_spatialLayer(spatialLayer);
  return builder_.Finish();
}

struct ConsumerScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConsumerScoreBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ConsumerScoreTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCORE = 4,
    VT_PRODUCERSCORE = 6,
    VT_PRODUCERSCORES = 8
  };
  uint8_t score() const {
    return GetField<uint8_t>(VT_SCORE, 0);
  }
  uint8_t producerScore() const {
    return GetField<uint8_t>(VT_PRODUCERSCORE, 0);
  }
  const flatbuffers::Vector<uint8_t> *producerScores() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PRODUCERSCORES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SCORE, 1) &&
           VerifyField<uint8_t>(verifier, VT_PRODUCERSCORE, 1) &&
           VerifyOffset(verifier, VT_PRODUCERSCORES) &&
           verifier.VerifyVector(producerScores()) &&
           verifier.EndTable();
  }
};

struct ConsumerScoreBuilder {
  typedef ConsumerScore Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_score(uint8_t score) {
    fbb_.AddElement<uint8_t>(ConsumerScore::VT_SCORE, score, 0);
  }
  void add_producerScore(uint8_t producerScore) {
    fbb_.AddElement<uint8_t>(ConsumerScore::VT_PRODUCERSCORE, producerScore, 0);
  }
  void add_producerScores(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> producerScores) {
    fbb_.AddOffset(ConsumerScore::VT_PRODUCERSCORES, producerScores);
  }
  explicit ConsumerScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ConsumerScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConsumerScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConsumerScore> CreateConsumerScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t score = 0,
    uint8_t producerScore = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> producerScores = 0) {
  ConsumerScoreBuilder builder_(_fbb);
  builder_.add_producerScores(producerScores);
  builder_.add_producerScore(producerScore);
  builder_.add_score(score);
  return builder_.Finish();
}

inline flatbuffers::Offset<ConsumerScore> CreateConsumerScoreDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t score = 0,
    uint8_t producerScore = 0,
    const std::vector<uint8_t> *producerScores = nullptr) {
  auto producerScores__ = producerScores ? _fbb.CreateVector<uint8_t>(*producerScores) : 0;
  return FBS::Consumer::CreateConsumerScore(
      _fbb,
      score,
      producerScore,
      producerScores__);
}

struct EnableTraceEventRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EnableTraceEventRequestBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return EnableTraceEventRequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_EVENTS) &&
           verifier.VerifyVector(events()) &&
           verifier.VerifyVectorOfStrings(events()) &&
           verifier.EndTable();
  }
};

struct EnableTraceEventRequestBuilder {
  typedef EnableTraceEventRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> events) {
    fbb_.AddOffset(EnableTraceEventRequest::VT_EVENTS, events);
  }
  explicit EnableTraceEventRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EnableTraceEventRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EnableTraceEventRequest>(end);
    fbb_.Required(o, EnableTraceEventRequest::VT_EVENTS);
    return o;
  }
};

inline flatbuffers::Offset<EnableTraceEventRequest> CreateEnableTraceEventRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> events = 0) {
  EnableTraceEventRequestBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

inline flatbuffers::Offset<EnableTraceEventRequest> CreateEnableTraceEventRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *events = nullptr) {
  auto events__ = events ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*events) : 0;
  return FBS::Consumer::CreateEnableTraceEventRequest(
      _fbb,
      events__);
}

inline const flatbuffers::TypeTable *ConsumerLayersTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "spatialLayer",
    "temporalLayer"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ConsumerScoreTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "score",
    "producerScore",
    "producerScores"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *EnableTraceEventRequestTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const char * const names[] = {
    "events"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace Consumer
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_CONSUMER_FBS_CONSUMER_H_
