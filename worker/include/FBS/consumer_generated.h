// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONSUMER_FBS_CONSUMER_H_
#define FLATBUFFERS_GENERATED_CONSUMER_FBS_CONSUMER_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {
namespace Consumer {

struct ConsumerLayers;
struct ConsumerLayersBuilder;

inline const flatbuffers::TypeTable *ConsumerLayersTypeTable();

struct ConsumerLayers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConsumerLayersBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ConsumerLayersTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPATIALLAYER = 4,
    VT_TEMPORALLAYER = 6
  };
  uint8_t spatialLayer() const {
    return GetField<uint8_t>(VT_SPATIALLAYER, 0);
  }
  uint8_t temporalLayer() const {
    return GetField<uint8_t>(VT_TEMPORALLAYER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SPATIALLAYER, 1) &&
           VerifyField<uint8_t>(verifier, VT_TEMPORALLAYER, 1) &&
           verifier.EndTable();
  }
};

struct ConsumerLayersBuilder {
  typedef ConsumerLayers Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_spatialLayer(uint8_t spatialLayer) {
    fbb_.AddElement<uint8_t>(ConsumerLayers::VT_SPATIALLAYER, spatialLayer, 0);
  }
  void add_temporalLayer(uint8_t temporalLayer) {
    fbb_.AddElement<uint8_t>(ConsumerLayers::VT_TEMPORALLAYER, temporalLayer, 0);
  }
  explicit ConsumerLayersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ConsumerLayers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConsumerLayers>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConsumerLayers> CreateConsumerLayers(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t spatialLayer = 0,
    uint8_t temporalLayer = 0) {
  ConsumerLayersBuilder builder_(_fbb);
  builder_.add_temporalLayer(temporalLayer);
  builder_.add_spatialLayer(spatialLayer);
  return builder_.Finish();
}

inline const flatbuffers::TypeTable *ConsumerLayersTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "spatialLayer",
    "temporalLayer"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const FBS::Consumer::ConsumerLayers *GetConsumerLayers(const void *buf) {
  return flatbuffers::GetRoot<FBS::Consumer::ConsumerLayers>(buf);
}

inline const FBS::Consumer::ConsumerLayers *GetSizePrefixedConsumerLayers(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FBS::Consumer::ConsumerLayers>(buf);
}

inline bool VerifyConsumerLayersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBS::Consumer::ConsumerLayers>(nullptr);
}

inline bool VerifySizePrefixedConsumerLayersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBS::Consumer::ConsumerLayers>(nullptr);
}

inline void FinishConsumerLayersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Consumer::ConsumerLayers> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConsumerLayersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Consumer::ConsumerLayers> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Consumer
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_CONSUMER_FBS_CONSUMER_H_
