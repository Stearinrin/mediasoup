// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATAPRODUCER_FBS_DATAPRODUCER_H_
#define FLATBUFFERS_GENERATED_DATAPRODUCER_FBS_DATAPRODUCER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

#include "sctpParameters_generated.h"

namespace FBS {
namespace DataProducer {

struct DumpResponse;
struct DumpResponseBuilder;

inline const flatbuffers::TypeTable *DumpResponseTypeTable();

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_SCTPSTREAMPARAMETERS = 8,
    VT_LABEL = 10,
    VT_PROTOCOL = 12
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const FBS::SctpParameters::SctpStreamParameters *sctpStreamParameters() const {
    return GetPointer<const FBS::SctpParameters::SctpStreamParameters *>(VT_SCTPSTREAMPARAMETERS);
  }
  const flatbuffers::String *label() const {
    return GetPointer<const flatbuffers::String *>(VT_LABEL);
  }
  const flatbuffers::String *protocol() const {
    return GetPointer<const flatbuffers::String *>(VT_PROTOCOL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffsetRequired(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_SCTPSTREAMPARAMETERS) &&
           verifier.VerifyTable(sctpStreamParameters()) &&
           VerifyOffsetRequired(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffsetRequired(verifier, VT_PROTOCOL) &&
           verifier.VerifyString(protocol()) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(DumpResponse::VT_ID, id);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(DumpResponse::VT_TYPE, type);
  }
  void add_sctpStreamParameters(flatbuffers::Offset<FBS::SctpParameters::SctpStreamParameters> sctpStreamParameters) {
    fbb_.AddOffset(DumpResponse::VT_SCTPSTREAMPARAMETERS, sctpStreamParameters);
  }
  void add_label(flatbuffers::Offset<flatbuffers::String> label) {
    fbb_.AddOffset(DumpResponse::VT_LABEL, label);
  }
  void add_protocol(flatbuffers::Offset<flatbuffers::String> protocol) {
    fbb_.AddOffset(DumpResponse::VT_PROTOCOL, protocol);
  }
  explicit DumpResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpResponse>(end);
    fbb_.Required(o, DumpResponse::VT_ID);
    fbb_.Required(o, DumpResponse::VT_TYPE);
    fbb_.Required(o, DumpResponse::VT_LABEL);
    fbb_.Required(o, DumpResponse::VT_PROTOCOL);
    return o;
  }
};

inline flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<FBS::SctpParameters::SctpStreamParameters> sctpStreamParameters = 0,
    flatbuffers::Offset<flatbuffers::String> label = 0,
    flatbuffers::Offset<flatbuffers::String> protocol = 0) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_protocol(protocol);
  builder_.add_label(label);
  builder_.add_sctpStreamParameters(sctpStreamParameters);
  builder_.add_type(type);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<DumpResponse> CreateDumpResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *type = nullptr,
    flatbuffers::Offset<FBS::SctpParameters::SctpStreamParameters> sctpStreamParameters = 0,
    const char *label = nullptr,
    const char *protocol = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto protocol__ = protocol ? _fbb.CreateString(protocol) : 0;
  return FBS::DataProducer::CreateDumpResponse(
      _fbb,
      id__,
      type__,
      sctpStreamParameters,
      label__,
      protocol__);
}

inline const flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::SctpParameters::SctpStreamParametersTypeTable
  };
  static const char * const names[] = {
    "id",
    "type",
    "sctpStreamParameters",
    "label",
    "protocol"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace DataProducer
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_DATAPRODUCER_FBS_DATAPRODUCER_H_
