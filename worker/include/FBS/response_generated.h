// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSE_FBS_RESPONSE_H_
#define FLATBUFFERS_GENERATED_RESPONSE_FBS_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

#include "consumer_generated.h"
#include "dataConsumer_generated.h"
#include "dataProducer_generated.h"
#include "router_generated.h"
#include "transport_generated.h"
#include "webRtcServer_generated.h"
#include "worker_generated.h"

namespace FBS {
namespace Response {

struct Response;
struct ResponseBuilder;

inline const flatbuffers::TypeTable *ResponseTypeTable();

enum class Body : uint8_t {
  NONE = 0,
  FBS_Worker_DumpResponse = 1,
  FBS_Worker_ResourceUsageResponse = 2,
  FBS_WebRtcServer_DumpResponse = 3,
  FBS_Router_DumpResponse = 4,
  FBS_Transport_DumpResponse = 5,
  FBS_Transport_ProduceResponse = 6,
  FBS_Transport_ConsumeResponse = 7,
  FBS_Consumer_SetPreferredLayersResponse = 8,
  FBS_Consumer_SetPriorityResponse = 9,
  FBS_DataProducer_DumpResponse = 10,
  FBS_DataConsumer_GetBufferedAmountResponse = 11,
  FBS_DataConsumer_DumpResponse = 12,
  MIN = NONE,
  MAX = FBS_DataConsumer_DumpResponse
};

inline const Body (&EnumValuesBody())[13] {
  static const Body values[] = {
    Body::NONE,
    Body::FBS_Worker_DumpResponse,
    Body::FBS_Worker_ResourceUsageResponse,
    Body::FBS_WebRtcServer_DumpResponse,
    Body::FBS_Router_DumpResponse,
    Body::FBS_Transport_DumpResponse,
    Body::FBS_Transport_ProduceResponse,
    Body::FBS_Transport_ConsumeResponse,
    Body::FBS_Consumer_SetPreferredLayersResponse,
    Body::FBS_Consumer_SetPriorityResponse,
    Body::FBS_DataProducer_DumpResponse,
    Body::FBS_DataConsumer_GetBufferedAmountResponse,
    Body::FBS_DataConsumer_DumpResponse
  };
  return values;
}

inline const char * const *EnumNamesBody() {
  static const char * const names[14] = {
    "NONE",
    "FBS_Worker_DumpResponse",
    "FBS_Worker_ResourceUsageResponse",
    "FBS_WebRtcServer_DumpResponse",
    "FBS_Router_DumpResponse",
    "FBS_Transport_DumpResponse",
    "FBS_Transport_ProduceResponse",
    "FBS_Transport_ConsumeResponse",
    "FBS_Consumer_SetPreferredLayersResponse",
    "FBS_Consumer_SetPriorityResponse",
    "FBS_DataProducer_DumpResponse",
    "FBS_DataConsumer_GetBufferedAmountResponse",
    "FBS_DataConsumer_DumpResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameBody(Body e) {
  if (flatbuffers::IsOutRange(e, Body::NONE, Body::FBS_DataConsumer_DumpResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBody()[index];
}

template<typename T> struct BodyTraits {
  static const Body enum_value = Body::NONE;
};

template<> struct BodyTraits<FBS::Worker::DumpResponse> {
  static const Body enum_value = Body::FBS_Worker_DumpResponse;
};

template<> struct BodyTraits<FBS::Worker::ResourceUsageResponse> {
  static const Body enum_value = Body::FBS_Worker_ResourceUsageResponse;
};

template<> struct BodyTraits<FBS::WebRtcServer::DumpResponse> {
  static const Body enum_value = Body::FBS_WebRtcServer_DumpResponse;
};

template<> struct BodyTraits<FBS::Router::DumpResponse> {
  static const Body enum_value = Body::FBS_Router_DumpResponse;
};

template<> struct BodyTraits<FBS::Transport::DumpResponse> {
  static const Body enum_value = Body::FBS_Transport_DumpResponse;
};

template<> struct BodyTraits<FBS::Transport::ProduceResponse> {
  static const Body enum_value = Body::FBS_Transport_ProduceResponse;
};

template<> struct BodyTraits<FBS::Transport::ConsumeResponse> {
  static const Body enum_value = Body::FBS_Transport_ConsumeResponse;
};

template<> struct BodyTraits<FBS::Consumer::SetPreferredLayersResponse> {
  static const Body enum_value = Body::FBS_Consumer_SetPreferredLayersResponse;
};

template<> struct BodyTraits<FBS::Consumer::SetPriorityResponse> {
  static const Body enum_value = Body::FBS_Consumer_SetPriorityResponse;
};

template<> struct BodyTraits<FBS::DataProducer::DumpResponse> {
  static const Body enum_value = Body::FBS_DataProducer_DumpResponse;
};

template<> struct BodyTraits<FBS::DataConsumer::GetBufferedAmountResponse> {
  static const Body enum_value = Body::FBS_DataConsumer_GetBufferedAmountResponse;
};

template<> struct BodyTraits<FBS::DataConsumer::DumpResponse> {
  static const Body enum_value = Body::FBS_DataConsumer_DumpResponse;
};

bool VerifyBody(flatbuffers::Verifier &verifier, const void *obj, Body type);
bool VerifyBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<Body> *types);

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ACCEPTED = 6,
    VT_BODY_TYPE = 8,
    VT_BODY = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool accepted() const {
    return GetField<uint8_t>(VT_ACCEPTED, 0) != 0;
  }
  FBS::Response::Body body_type() const {
    return static_cast<FBS::Response::Body>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const FBS::Worker::DumpResponse *body_as_FBS_Worker_DumpResponse() const {
    return body_type() == FBS::Response::Body::FBS_Worker_DumpResponse ? static_cast<const FBS::Worker::DumpResponse *>(body()) : nullptr;
  }
  const FBS::Worker::ResourceUsageResponse *body_as_FBS_Worker_ResourceUsageResponse() const {
    return body_type() == FBS::Response::Body::FBS_Worker_ResourceUsageResponse ? static_cast<const FBS::Worker::ResourceUsageResponse *>(body()) : nullptr;
  }
  const FBS::WebRtcServer::DumpResponse *body_as_FBS_WebRtcServer_DumpResponse() const {
    return body_type() == FBS::Response::Body::FBS_WebRtcServer_DumpResponse ? static_cast<const FBS::WebRtcServer::DumpResponse *>(body()) : nullptr;
  }
  const FBS::Router::DumpResponse *body_as_FBS_Router_DumpResponse() const {
    return body_type() == FBS::Response::Body::FBS_Router_DumpResponse ? static_cast<const FBS::Router::DumpResponse *>(body()) : nullptr;
  }
  const FBS::Transport::DumpResponse *body_as_FBS_Transport_DumpResponse() const {
    return body_type() == FBS::Response::Body::FBS_Transport_DumpResponse ? static_cast<const FBS::Transport::DumpResponse *>(body()) : nullptr;
  }
  const FBS::Transport::ProduceResponse *body_as_FBS_Transport_ProduceResponse() const {
    return body_type() == FBS::Response::Body::FBS_Transport_ProduceResponse ? static_cast<const FBS::Transport::ProduceResponse *>(body()) : nullptr;
  }
  const FBS::Transport::ConsumeResponse *body_as_FBS_Transport_ConsumeResponse() const {
    return body_type() == FBS::Response::Body::FBS_Transport_ConsumeResponse ? static_cast<const FBS::Transport::ConsumeResponse *>(body()) : nullptr;
  }
  const FBS::Consumer::SetPreferredLayersResponse *body_as_FBS_Consumer_SetPreferredLayersResponse() const {
    return body_type() == FBS::Response::Body::FBS_Consumer_SetPreferredLayersResponse ? static_cast<const FBS::Consumer::SetPreferredLayersResponse *>(body()) : nullptr;
  }
  const FBS::Consumer::SetPriorityResponse *body_as_FBS_Consumer_SetPriorityResponse() const {
    return body_type() == FBS::Response::Body::FBS_Consumer_SetPriorityResponse ? static_cast<const FBS::Consumer::SetPriorityResponse *>(body()) : nullptr;
  }
  const FBS::DataProducer::DumpResponse *body_as_FBS_DataProducer_DumpResponse() const {
    return body_type() == FBS::Response::Body::FBS_DataProducer_DumpResponse ? static_cast<const FBS::DataProducer::DumpResponse *>(body()) : nullptr;
  }
  const FBS::DataConsumer::GetBufferedAmountResponse *body_as_FBS_DataConsumer_GetBufferedAmountResponse() const {
    return body_type() == FBS::Response::Body::FBS_DataConsumer_GetBufferedAmountResponse ? static_cast<const FBS::DataConsumer::GetBufferedAmountResponse *>(body()) : nullptr;
  }
  const FBS::DataConsumer::DumpResponse *body_as_FBS_DataConsumer_DumpResponse() const {
    return body_type() == FBS::Response::Body::FBS_DataConsumer_DumpResponse ? static_cast<const FBS::DataConsumer::DumpResponse *>(body()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_ACCEPTED, 1) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyBody(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::Worker::DumpResponse *Response::body_as<FBS::Worker::DumpResponse>() const {
  return body_as_FBS_Worker_DumpResponse();
}

template<> inline const FBS::Worker::ResourceUsageResponse *Response::body_as<FBS::Worker::ResourceUsageResponse>() const {
  return body_as_FBS_Worker_ResourceUsageResponse();
}

template<> inline const FBS::WebRtcServer::DumpResponse *Response::body_as<FBS::WebRtcServer::DumpResponse>() const {
  return body_as_FBS_WebRtcServer_DumpResponse();
}

template<> inline const FBS::Router::DumpResponse *Response::body_as<FBS::Router::DumpResponse>() const {
  return body_as_FBS_Router_DumpResponse();
}

template<> inline const FBS::Transport::DumpResponse *Response::body_as<FBS::Transport::DumpResponse>() const {
  return body_as_FBS_Transport_DumpResponse();
}

template<> inline const FBS::Transport::ProduceResponse *Response::body_as<FBS::Transport::ProduceResponse>() const {
  return body_as_FBS_Transport_ProduceResponse();
}

template<> inline const FBS::Transport::ConsumeResponse *Response::body_as<FBS::Transport::ConsumeResponse>() const {
  return body_as_FBS_Transport_ConsumeResponse();
}

template<> inline const FBS::Consumer::SetPreferredLayersResponse *Response::body_as<FBS::Consumer::SetPreferredLayersResponse>() const {
  return body_as_FBS_Consumer_SetPreferredLayersResponse();
}

template<> inline const FBS::Consumer::SetPriorityResponse *Response::body_as<FBS::Consumer::SetPriorityResponse>() const {
  return body_as_FBS_Consumer_SetPriorityResponse();
}

template<> inline const FBS::DataProducer::DumpResponse *Response::body_as<FBS::DataProducer::DumpResponse>() const {
  return body_as_FBS_DataProducer_DumpResponse();
}

template<> inline const FBS::DataConsumer::GetBufferedAmountResponse *Response::body_as<FBS::DataConsumer::GetBufferedAmountResponse>() const {
  return body_as_FBS_DataConsumer_GetBufferedAmountResponse();
}

template<> inline const FBS::DataConsumer::DumpResponse *Response::body_as<FBS::DataConsumer::DumpResponse>() const {
  return body_as_FBS_DataConsumer_DumpResponse();
}

struct ResponseBuilder {
  typedef Response Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Response::VT_ID, id, 0);
  }
  void add_accepted(bool accepted) {
    fbb_.AddElement<uint8_t>(Response::VT_ACCEPTED, static_cast<uint8_t>(accepted), 0);
  }
  void add_body_type(FBS::Response::Body body_type) {
    fbb_.AddElement<uint8_t>(Response::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Response::VT_BODY, body);
  }
  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    bool accepted = false,
    FBS::Response::Body body_type = FBS::Response::Body::NONE,
    flatbuffers::Offset<void> body = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_id(id);
  builder_.add_body_type(body_type);
  builder_.add_accepted(accepted);
  return builder_.Finish();
}

inline bool VerifyBody(flatbuffers::Verifier &verifier, const void *obj, Body type) {
  switch (type) {
    case Body::NONE: {
      return true;
    }
    case Body::FBS_Worker_DumpResponse: {
      auto ptr = reinterpret_cast<const FBS::Worker::DumpResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Worker_ResourceUsageResponse: {
      auto ptr = reinterpret_cast<const FBS::Worker::ResourceUsageResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_WebRtcServer_DumpResponse: {
      auto ptr = reinterpret_cast<const FBS::WebRtcServer::DumpResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Router_DumpResponse: {
      auto ptr = reinterpret_cast<const FBS::Router::DumpResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_DumpResponse: {
      auto ptr = reinterpret_cast<const FBS::Transport::DumpResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_ProduceResponse: {
      auto ptr = reinterpret_cast<const FBS::Transport::ProduceResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Transport_ConsumeResponse: {
      auto ptr = reinterpret_cast<const FBS::Transport::ConsumeResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_SetPreferredLayersResponse: {
      auto ptr = reinterpret_cast<const FBS::Consumer::SetPreferredLayersResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_Consumer_SetPriorityResponse: {
      auto ptr = reinterpret_cast<const FBS::Consumer::SetPriorityResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataProducer_DumpResponse: {
      auto ptr = reinterpret_cast<const FBS::DataProducer::DumpResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataConsumer_GetBufferedAmountResponse: {
      auto ptr = reinterpret_cast<const FBS::DataConsumer::GetBufferedAmountResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body::FBS_DataConsumer_DumpResponse: {
      auto ptr = reinterpret_cast<const FBS::DataConsumer::DumpResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<Body> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBody(
        verifier,  values->Get(i), types->GetEnum<Body>(i))) {
      return false;
    }
  }
  return true;
}

inline const flatbuffers::TypeTable *BodyTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_SEQUENCE, 0, 4 },
    { flatbuffers::ET_SEQUENCE, 0, 5 },
    { flatbuffers::ET_SEQUENCE, 0, 6 },
    { flatbuffers::ET_SEQUENCE, 0, 7 },
    { flatbuffers::ET_SEQUENCE, 0, 8 },
    { flatbuffers::ET_SEQUENCE, 0, 9 },
    { flatbuffers::ET_SEQUENCE, 0, 10 },
    { flatbuffers::ET_SEQUENCE, 0, 11 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Worker::DumpResponseTypeTable,
    FBS::Worker::ResourceUsageResponseTypeTable,
    FBS::WebRtcServer::DumpResponseTypeTable,
    FBS::Router::DumpResponseTypeTable,
    FBS::Transport::DumpResponseTypeTable,
    FBS::Transport::ProduceResponseTypeTable,
    FBS::Transport::ConsumeResponseTypeTable,
    FBS::Consumer::SetPreferredLayersResponseTypeTable,
    FBS::Consumer::SetPriorityResponseTypeTable,
    FBS::DataProducer::DumpResponseTypeTable,
    FBS::DataConsumer::GetBufferedAmountResponseTypeTable,
    FBS::DataConsumer::DumpResponseTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "FBS_Worker_DumpResponse",
    "FBS_Worker_ResourceUsageResponse",
    "FBS_WebRtcServer_DumpResponse",
    "FBS_Router_DumpResponse",
    "FBS_Transport_DumpResponse",
    "FBS_Transport_ProduceResponse",
    "FBS_Transport_ConsumeResponse",
    "FBS_Consumer_SetPreferredLayersResponse",
    "FBS_Consumer_SetPriorityResponse",
    "FBS_DataProducer_DumpResponse",
    "FBS_DataConsumer_GetBufferedAmountResponse",
    "FBS_DataConsumer_DumpResponse"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 13, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ResponseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Response::BodyTypeTable
  };
  static const char * const names[] = {
    "id",
    "accepted",
    "body_type",
    "body"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace Response
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_RESPONSE_FBS_RESPONSE_H_
