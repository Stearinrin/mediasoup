// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCTPPARAMETERS_FBS_SCTPPARAMETERS_H_
#define FLATBUFFERS_GENERATED_SCTPPARAMETERS_FBS_SCTPPARAMETERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace FBS {
namespace SctpParameters {

struct NumSctpStreams;
struct NumSctpStreamsBuilder;

inline const flatbuffers::TypeTable *NumSctpStreamsTypeTable();

struct NumSctpStreams FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NumSctpStreamsBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NumSctpStreamsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OS = 4,
    VT_MIS = 6
  };
  uint32_t os() const {
    return GetField<uint32_t>(VT_OS, 0);
  }
  uint32_t mis() const {
    return GetField<uint32_t>(VT_MIS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OS, 4) &&
           VerifyField<uint32_t>(verifier, VT_MIS, 4) &&
           verifier.EndTable();
  }
};

struct NumSctpStreamsBuilder {
  typedef NumSctpStreams Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_os(uint32_t os) {
    fbb_.AddElement<uint32_t>(NumSctpStreams::VT_OS, os, 0);
  }
  void add_mis(uint32_t mis) {
    fbb_.AddElement<uint32_t>(NumSctpStreams::VT_MIS, mis, 0);
  }
  explicit NumSctpStreamsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NumSctpStreams> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NumSctpStreams>(end);
    return o;
  }
};

inline flatbuffers::Offset<NumSctpStreams> CreateNumSctpStreams(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t os = 0,
    uint32_t mis = 0) {
  NumSctpStreamsBuilder builder_(_fbb);
  builder_.add_mis(mis);
  builder_.add_os(os);
  return builder_.Finish();
}

inline const flatbuffers::TypeTable *NumSctpStreamsTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const char * const names[] = {
    "os",
    "mis"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace SctpParameters
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_SCTPPARAMETERS_FBS_SCTPPARAMETERS_H_
