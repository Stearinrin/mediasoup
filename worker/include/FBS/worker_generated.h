// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORKER_FBS_WORKER_H_
#define FLATBUFFERS_GENERATED_WORKER_FBS_WORKER_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {
namespace Worker {

struct DumpRequest;
struct DumpRequestBuilder;

struct ChannelMessageHandlers;
struct ChannelMessageHandlersBuilder;

struct DumpResponse;
struct DumpResponseBuilder;

inline const flatbuffers::TypeTable *DumpRequestTypeTable();

inline const flatbuffers::TypeTable *ChannelMessageHandlersTypeTable();

inline const flatbuffers::TypeTable *DumpResponseTypeTable();

struct DumpRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpRequestBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpRequestTypeTable();
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct DumpRequestBuilder {
  typedef DumpRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit DumpRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DumpRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DumpRequest> CreateDumpRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  DumpRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ChannelMessageHandlers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChannelMessageHandlersBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ChannelMessageHandlersTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL_REQUEST_HANDLERS = 4,
    VT_PAYLOADCHANNEL_REQUEST_HANDLERS = 6,
    VT_PAYLOADCHANNEL_NOTIFICATION_HANDLERS = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *channel_request_handlers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CHANNEL_REQUEST_HANDLERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannel_request_handlers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PAYLOADCHANNEL_REQUEST_HANDLERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannel_notification_handlers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PAYLOADCHANNEL_NOTIFICATION_HANDLERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNEL_REQUEST_HANDLERS) &&
           verifier.VerifyVector(channel_request_handlers()) &&
           verifier.VerifyVectorOfStrings(channel_request_handlers()) &&
           VerifyOffset(verifier, VT_PAYLOADCHANNEL_REQUEST_HANDLERS) &&
           verifier.VerifyVector(payloadchannel_request_handlers()) &&
           verifier.VerifyVectorOfStrings(payloadchannel_request_handlers()) &&
           VerifyOffset(verifier, VT_PAYLOADCHANNEL_NOTIFICATION_HANDLERS) &&
           verifier.VerifyVector(payloadchannel_notification_handlers()) &&
           verifier.VerifyVectorOfStrings(payloadchannel_notification_handlers()) &&
           verifier.EndTable();
  }
};

struct ChannelMessageHandlersBuilder {
  typedef ChannelMessageHandlers Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_channel_request_handlers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channel_request_handlers) {
    fbb_.AddOffset(ChannelMessageHandlers::VT_CHANNEL_REQUEST_HANDLERS, channel_request_handlers);
  }
  void add_payloadchannel_request_handlers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannel_request_handlers) {
    fbb_.AddOffset(ChannelMessageHandlers::VT_PAYLOADCHANNEL_REQUEST_HANDLERS, payloadchannel_request_handlers);
  }
  void add_payloadchannel_notification_handlers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannel_notification_handlers) {
    fbb_.AddOffset(ChannelMessageHandlers::VT_PAYLOADCHANNEL_NOTIFICATION_HANDLERS, payloadchannel_notification_handlers);
  }
  explicit ChannelMessageHandlersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ChannelMessageHandlers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChannelMessageHandlers>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChannelMessageHandlers> CreateChannelMessageHandlers(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channel_request_handlers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannel_request_handlers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannel_notification_handlers = 0) {
  ChannelMessageHandlersBuilder builder_(_fbb);
  builder_.add_payloadchannel_notification_handlers(payloadchannel_notification_handlers);
  builder_.add_payloadchannel_request_handlers(payloadchannel_request_handlers);
  builder_.add_channel_request_handlers(channel_request_handlers);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChannelMessageHandlers> CreateChannelMessageHandlersDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *channel_request_handlers = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannel_request_handlers = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannel_notification_handlers = nullptr) {
  auto channel_request_handlers__ = channel_request_handlers ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*channel_request_handlers) : 0;
  auto payloadchannel_request_handlers__ = payloadchannel_request_handlers ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*payloadchannel_request_handlers) : 0;
  auto payloadchannel_notification_handlers__ = payloadchannel_notification_handlers ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*payloadchannel_notification_handlers) : 0;
  return FBS::Worker::CreateChannelMessageHandlers(
      _fbb,
      channel_request_handlers__,
      payloadchannel_request_handlers__,
      payloadchannel_notification_handlers__);
}

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_WEBRTC_SERVER_IDS = 6,
    VT_ROUTER_IDS = 8,
    VT_CHANNEL_MESSAGE_HANDLERS = 10
  };
  uint64_t pid() const {
    return GetField<uint64_t>(VT_PID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *webrtc_server_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_WEBRTC_SERVER_IDS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *router_ids() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ROUTER_IDS);
  }
  const FBS::Worker::ChannelMessageHandlers *channel_message_handlers() const {
    return GetPointer<const FBS::Worker::ChannelMessageHandlers *>(VT_CHANNEL_MESSAGE_HANDLERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PID, 8) &&
           VerifyOffset(verifier, VT_WEBRTC_SERVER_IDS) &&
           verifier.VerifyVector(webrtc_server_ids()) &&
           verifier.VerifyVectorOfStrings(webrtc_server_ids()) &&
           VerifyOffset(verifier, VT_ROUTER_IDS) &&
           verifier.VerifyVector(router_ids()) &&
           verifier.VerifyVectorOfStrings(router_ids()) &&
           VerifyOffset(verifier, VT_CHANNEL_MESSAGE_HANDLERS) &&
           verifier.VerifyTable(channel_message_handlers()) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pid(uint64_t pid) {
    fbb_.AddElement<uint64_t>(DumpResponse::VT_PID, pid, 0);
  }
  void add_webrtc_server_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> webrtc_server_ids) {
    fbb_.AddOffset(DumpResponse::VT_WEBRTC_SERVER_IDS, webrtc_server_ids);
  }
  void add_router_ids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> router_ids) {
    fbb_.AddOffset(DumpResponse::VT_ROUTER_IDS, router_ids);
  }
  void add_channel_message_handlers(flatbuffers::Offset<FBS::Worker::ChannelMessageHandlers> channel_message_handlers) {
    fbb_.AddOffset(DumpResponse::VT_CHANNEL_MESSAGE_HANDLERS, channel_message_handlers);
  }
  explicit DumpResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t pid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> webrtc_server_ids = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> router_ids = 0,
    flatbuffers::Offset<FBS::Worker::ChannelMessageHandlers> channel_message_handlers = 0) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_pid(pid);
  builder_.add_channel_message_handlers(channel_message_handlers);
  builder_.add_router_ids(router_ids);
  builder_.add_webrtc_server_ids(webrtc_server_ids);
  return builder_.Finish();
}

inline flatbuffers::Offset<DumpResponse> CreateDumpResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t pid = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *webrtc_server_ids = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *router_ids = nullptr,
    flatbuffers::Offset<FBS::Worker::ChannelMessageHandlers> channel_message_handlers = 0) {
  auto webrtc_server_ids__ = webrtc_server_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*webrtc_server_ids) : 0;
  auto router_ids__ = router_ids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*router_ids) : 0;
  return FBS::Worker::CreateDumpResponse(
      _fbb,
      pid,
      webrtc_server_ids__,
      router_ids__,
      channel_message_handlers);
}

inline const flatbuffers::TypeTable *DumpRequestTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ChannelMessageHandlersTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const char * const names[] = {
    "channel_request_handlers",
    "payloadchannel_request_handlers",
    "payloadchannel_notification_handlers"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Worker::ChannelMessageHandlersTypeTable
  };
  static const char * const names[] = {
    "pid",
    "webrtc_server_ids",
    "router_ids",
    "channel_message_handlers"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const FBS::Worker::DumpResponse *GetDumpResponse(const void *buf) {
  return flatbuffers::GetRoot<FBS::Worker::DumpResponse>(buf);
}

inline const FBS::Worker::DumpResponse *GetSizePrefixedDumpResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FBS::Worker::DumpResponse>(buf);
}

inline bool VerifyDumpResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBS::Worker::DumpResponse>(nullptr);
}

inline bool VerifySizePrefixedDumpResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBS::Worker::DumpResponse>(nullptr);
}

inline void FinishDumpResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Worker::DumpResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDumpResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Worker::DumpResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Worker
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_WORKER_FBS_WORKER_H_
