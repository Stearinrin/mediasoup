// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORKER_FBS_WORKER_H_
#define FLATBUFFERS_GENERATED_WORKER_FBS_WORKER_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {
namespace Worker {

struct DumpRequest;
struct DumpRequestBuilder;

struct ChannelMessageHandlers;
struct ChannelMessageHandlersBuilder;

struct DumpResponse;
struct DumpResponseBuilder;

inline const flatbuffers::TypeTable *DumpRequestTypeTable();

inline const flatbuffers::TypeTable *ChannelMessageHandlersTypeTable();

inline const flatbuffers::TypeTable *DumpResponseTypeTable();

struct DumpRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpRequestBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpRequestTypeTable();
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct DumpRequestBuilder {
  typedef DumpRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit DumpRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DumpRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DumpRequest> CreateDumpRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  DumpRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ChannelMessageHandlers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChannelMessageHandlersBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ChannelMessageHandlersTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNELREQUESTHANDLERS = 4,
    VT_PAYLOADCHANNELREQUESTHANDLERS = 6,
    VT_PAYLOADCHANNELNOTIFICATIONHANDLERS = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *channelRequestHandlers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CHANNELREQUESTHANDLERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannelRequestHandlers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PAYLOADCHANNELREQUESTHANDLERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannelNotificationHandlers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PAYLOADCHANNELNOTIFICATIONHANDLERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHANNELREQUESTHANDLERS) &&
           verifier.VerifyVector(channelRequestHandlers()) &&
           verifier.VerifyVectorOfStrings(channelRequestHandlers()) &&
           VerifyOffset(verifier, VT_PAYLOADCHANNELREQUESTHANDLERS) &&
           verifier.VerifyVector(payloadchannelRequestHandlers()) &&
           verifier.VerifyVectorOfStrings(payloadchannelRequestHandlers()) &&
           VerifyOffset(verifier, VT_PAYLOADCHANNELNOTIFICATIONHANDLERS) &&
           verifier.VerifyVector(payloadchannelNotificationHandlers()) &&
           verifier.VerifyVectorOfStrings(payloadchannelNotificationHandlers()) &&
           verifier.EndTable();
  }
};

struct ChannelMessageHandlersBuilder {
  typedef ChannelMessageHandlers Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_channelRequestHandlers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channelRequestHandlers) {
    fbb_.AddOffset(ChannelMessageHandlers::VT_CHANNELREQUESTHANDLERS, channelRequestHandlers);
  }
  void add_payloadchannelRequestHandlers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannelRequestHandlers) {
    fbb_.AddOffset(ChannelMessageHandlers::VT_PAYLOADCHANNELREQUESTHANDLERS, payloadchannelRequestHandlers);
  }
  void add_payloadchannelNotificationHandlers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannelNotificationHandlers) {
    fbb_.AddOffset(ChannelMessageHandlers::VT_PAYLOADCHANNELNOTIFICATIONHANDLERS, payloadchannelNotificationHandlers);
  }
  explicit ChannelMessageHandlersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ChannelMessageHandlers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChannelMessageHandlers>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChannelMessageHandlers> CreateChannelMessageHandlers(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> channelRequestHandlers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannelRequestHandlers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> payloadchannelNotificationHandlers = 0) {
  ChannelMessageHandlersBuilder builder_(_fbb);
  builder_.add_payloadchannelNotificationHandlers(payloadchannelNotificationHandlers);
  builder_.add_payloadchannelRequestHandlers(payloadchannelRequestHandlers);
  builder_.add_channelRequestHandlers(channelRequestHandlers);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChannelMessageHandlers> CreateChannelMessageHandlersDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *channelRequestHandlers = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannelRequestHandlers = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *payloadchannelNotificationHandlers = nullptr) {
  auto channelRequestHandlers__ = channelRequestHandlers ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*channelRequestHandlers) : 0;
  auto payloadchannelRequestHandlers__ = payloadchannelRequestHandlers ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*payloadchannelRequestHandlers) : 0;
  auto payloadchannelNotificationHandlers__ = payloadchannelNotificationHandlers ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*payloadchannelNotificationHandlers) : 0;
  return FBS::Worker::CreateChannelMessageHandlers(
      _fbb,
      channelRequestHandlers__,
      payloadchannelRequestHandlers__,
      payloadchannelNotificationHandlers__);
}

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_WEBRTCSERVERIDS = 6,
    VT_ROUTERIDS = 8,
    VT_CHANNELMESSAGEHANDLERS = 10
  };
  uint64_t pid() const {
    return GetField<uint64_t>(VT_PID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *webrtcServerIds() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_WEBRTCSERVERIDS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *routerIds() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ROUTERIDS);
  }
  const FBS::Worker::ChannelMessageHandlers *channelMessageHandlers() const {
    return GetPointer<const FBS::Worker::ChannelMessageHandlers *>(VT_CHANNELMESSAGEHANDLERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PID, 8) &&
           VerifyOffset(verifier, VT_WEBRTCSERVERIDS) &&
           verifier.VerifyVector(webrtcServerIds()) &&
           verifier.VerifyVectorOfStrings(webrtcServerIds()) &&
           VerifyOffset(verifier, VT_ROUTERIDS) &&
           verifier.VerifyVector(routerIds()) &&
           verifier.VerifyVectorOfStrings(routerIds()) &&
           VerifyOffset(verifier, VT_CHANNELMESSAGEHANDLERS) &&
           verifier.VerifyTable(channelMessageHandlers()) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pid(uint64_t pid) {
    fbb_.AddElement<uint64_t>(DumpResponse::VT_PID, pid, 0);
  }
  void add_webrtcServerIds(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> webrtcServerIds) {
    fbb_.AddOffset(DumpResponse::VT_WEBRTCSERVERIDS, webrtcServerIds);
  }
  void add_routerIds(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> routerIds) {
    fbb_.AddOffset(DumpResponse::VT_ROUTERIDS, routerIds);
  }
  void add_channelMessageHandlers(flatbuffers::Offset<FBS::Worker::ChannelMessageHandlers> channelMessageHandlers) {
    fbb_.AddOffset(DumpResponse::VT_CHANNELMESSAGEHANDLERS, channelMessageHandlers);
  }
  explicit DumpResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t pid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> webrtcServerIds = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> routerIds = 0,
    flatbuffers::Offset<FBS::Worker::ChannelMessageHandlers> channelMessageHandlers = 0) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_pid(pid);
  builder_.add_channelMessageHandlers(channelMessageHandlers);
  builder_.add_routerIds(routerIds);
  builder_.add_webrtcServerIds(webrtcServerIds);
  return builder_.Finish();
}

inline flatbuffers::Offset<DumpResponse> CreateDumpResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t pid = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *webrtcServerIds = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *routerIds = nullptr,
    flatbuffers::Offset<FBS::Worker::ChannelMessageHandlers> channelMessageHandlers = 0) {
  auto webrtcServerIds__ = webrtcServerIds ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*webrtcServerIds) : 0;
  auto routerIds__ = routerIds ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*routerIds) : 0;
  return FBS::Worker::CreateDumpResponse(
      _fbb,
      pid,
      webrtcServerIds__,
      routerIds__,
      channelMessageHandlers);
}

inline const flatbuffers::TypeTable *DumpRequestTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ChannelMessageHandlersTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const char * const names[] = {
    "channelRequestHandlers",
    "payloadchannelRequestHandlers",
    "payloadchannelNotificationHandlers"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Worker::ChannelMessageHandlersTypeTable
  };
  static const char * const names[] = {
    "pid",
    "webrtcServerIds",
    "routerIds",
    "channelMessageHandlers"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const FBS::Worker::DumpResponse *GetDumpResponse(const void *buf) {
  return flatbuffers::GetRoot<FBS::Worker::DumpResponse>(buf);
}

inline const FBS::Worker::DumpResponse *GetSizePrefixedDumpResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FBS::Worker::DumpResponse>(buf);
}

inline bool VerifyDumpResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBS::Worker::DumpResponse>(nullptr);
}

inline bool VerifySizePrefixedDumpResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBS::Worker::DumpResponse>(nullptr);
}

inline void FinishDumpResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Worker::DumpResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDumpResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Worker::DumpResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Worker
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_WORKER_FBS_WORKER_H_
