// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PIPETRANSPORT_FBS_PIPETRANSPORT_H_
#define FLATBUFFERS_GENERATED_PIPETRANSPORT_FBS_PIPETRANSPORT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

#include "transport_generated.h"

namespace FBS {
namespace PipeTransport {

struct PipeTransportOptions;
struct PipeTransportOptionsBuilder;

inline const flatbuffers::TypeTable *PipeTransportOptionsTypeTable();

struct PipeTransportOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PipeTransportOptionsBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PipeTransportOptionsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_LISTENIP = 6,
    VT_PORT = 8,
    VT_ENABLERTX = 10,
    VT_ENABLESRTP = 12
  };
  const FBS::Transport::BaseTransportOptions *base() const {
    return GetPointer<const FBS::Transport::BaseTransportOptions *>(VT_BASE);
  }
  const FBS::Transport::TransportListenIp *listenIp() const {
    return GetPointer<const FBS::Transport::TransportListenIp *>(VT_LISTENIP);
  }
  uint16_t port() const {
    return GetField<uint16_t>(VT_PORT, 0);
  }
  bool enableRtx() const {
    return GetField<uint8_t>(VT_ENABLERTX, 0) != 0;
  }
  bool enableSrtp() const {
    return GetField<uint8_t>(VT_ENABLESRTP, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffsetRequired(verifier, VT_LISTENIP) &&
           verifier.VerifyTable(listenIp()) &&
           VerifyField<uint16_t>(verifier, VT_PORT, 2) &&
           VerifyField<uint8_t>(verifier, VT_ENABLERTX, 1) &&
           VerifyField<uint8_t>(verifier, VT_ENABLESRTP, 1) &&
           verifier.EndTable();
  }
};

struct PipeTransportOptionsBuilder {
  typedef PipeTransportOptions Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<FBS::Transport::BaseTransportOptions> base) {
    fbb_.AddOffset(PipeTransportOptions::VT_BASE, base);
  }
  void add_listenIp(flatbuffers::Offset<FBS::Transport::TransportListenIp> listenIp) {
    fbb_.AddOffset(PipeTransportOptions::VT_LISTENIP, listenIp);
  }
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(PipeTransportOptions::VT_PORT, port, 0);
  }
  void add_enableRtx(bool enableRtx) {
    fbb_.AddElement<uint8_t>(PipeTransportOptions::VT_ENABLERTX, static_cast<uint8_t>(enableRtx), 0);
  }
  void add_enableSrtp(bool enableSrtp) {
    fbb_.AddElement<uint8_t>(PipeTransportOptions::VT_ENABLESRTP, static_cast<uint8_t>(enableSrtp), 0);
  }
  explicit PipeTransportOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PipeTransportOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PipeTransportOptions>(end);
    fbb_.Required(o, PipeTransportOptions::VT_LISTENIP);
    return o;
  }
};

inline flatbuffers::Offset<PipeTransportOptions> CreatePipeTransportOptions(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<FBS::Transport::BaseTransportOptions> base = 0,
    flatbuffers::Offset<FBS::Transport::TransportListenIp> listenIp = 0,
    uint16_t port = 0,
    bool enableRtx = false,
    bool enableSrtp = false) {
  PipeTransportOptionsBuilder builder_(_fbb);
  builder_.add_listenIp(listenIp);
  builder_.add_base(base);
  builder_.add_port(port);
  builder_.add_enableSrtp(enableSrtp);
  builder_.add_enableRtx(enableRtx);
  return builder_.Finish();
}

inline const flatbuffers::TypeTable *PipeTransportOptionsTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_USHORT, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Transport::BaseTransportOptionsTypeTable,
    FBS::Transport::TransportListenIpTypeTable
  };
  static const char * const names[] = {
    "base",
    "listenIp",
    "port",
    "enableRtx",
    "enableSrtp"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace PipeTransport
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_PIPETRANSPORT_FBS_PIPETRANSPORT_H_
