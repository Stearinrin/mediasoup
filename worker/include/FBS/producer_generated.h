// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PRODUCER_FBS_PRODUCER_H_
#define FLATBUFFERS_GENERATED_PRODUCER_FBS_PRODUCER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

#include "rtpParameters_generated.h"
#include "rtpStream_generated.h"

namespace FBS {
namespace Producer {

struct EnableTraceEventRequest;
struct EnableTraceEventRequestBuilder;

struct DumpResponse;
struct DumpResponseBuilder;

inline const flatbuffers::TypeTable *EnableTraceEventRequestTypeTable();

inline const flatbuffers::TypeTable *DumpResponseTypeTable();

struct EnableTraceEventRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EnableTraceEventRequestBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return EnableTraceEventRequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_EVENTS) &&
           verifier.VerifyVector(events()) &&
           verifier.VerifyVectorOfStrings(events()) &&
           verifier.EndTable();
  }
};

struct EnableTraceEventRequestBuilder {
  typedef EnableTraceEventRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> events) {
    fbb_.AddOffset(EnableTraceEventRequest::VT_EVENTS, events);
  }
  explicit EnableTraceEventRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EnableTraceEventRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EnableTraceEventRequest>(end);
    fbb_.Required(o, EnableTraceEventRequest::VT_EVENTS);
    return o;
  }
};

inline flatbuffers::Offset<EnableTraceEventRequest> CreateEnableTraceEventRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> events = 0) {
  EnableTraceEventRequestBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

inline flatbuffers::Offset<EnableTraceEventRequest> CreateEnableTraceEventRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *events = nullptr) {
  auto events__ = events ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*events) : 0;
  return FBS::Producer::CreateEnableTraceEventRequest(
      _fbb,
      events__);
}

struct DumpResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpResponseBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DumpResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_KIND = 6,
    VT_TYPE = 8,
    VT_RTPPARAMETERS = 10,
    VT_RTPMAPPING = 12,
    VT_RTPSTREAMS = 14,
    VT_TRACEEVENTTYPES = 16,
    VT_PAUSED = 18
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  FBS::RtpParameters::MediaKind kind() const {
    return static_cast<FBS::RtpParameters::MediaKind>(GetField<uint8_t>(VT_KIND, 0));
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const FBS::RtpParameters::RtpParameters *rtpParameters() const {
    return GetPointer<const FBS::RtpParameters::RtpParameters *>(VT_RTPPARAMETERS);
  }
  const FBS::RtpParameters::RtpMapping *rtpMapping() const {
    return GetPointer<const FBS::RtpParameters::RtpMapping *>(VT_RTPMAPPING);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FBS::RtpStream::Dump>> *rtpStreams() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBS::RtpStream::Dump>> *>(VT_RTPSTREAMS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *traceEventTypes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TRACEEVENTTYPES);
  }
  bool paused() const {
    return GetField<uint8_t>(VT_PAUSED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<uint8_t>(verifier, VT_KIND, 1) &&
           VerifyOffsetRequired(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffsetRequired(verifier, VT_RTPPARAMETERS) &&
           verifier.VerifyTable(rtpParameters()) &&
           VerifyOffsetRequired(verifier, VT_RTPMAPPING) &&
           verifier.VerifyTable(rtpMapping()) &&
           VerifyOffset(verifier, VT_RTPSTREAMS) &&
           verifier.VerifyVector(rtpStreams()) &&
           verifier.VerifyVectorOfTables(rtpStreams()) &&
           VerifyOffsetRequired(verifier, VT_TRACEEVENTTYPES) &&
           verifier.VerifyVector(traceEventTypes()) &&
           verifier.VerifyVectorOfStrings(traceEventTypes()) &&
           VerifyField<uint8_t>(verifier, VT_PAUSED, 1) &&
           verifier.EndTable();
  }
};

struct DumpResponseBuilder {
  typedef DumpResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(DumpResponse::VT_ID, id);
  }
  void add_kind(FBS::RtpParameters::MediaKind kind) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_KIND, static_cast<uint8_t>(kind), 0);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(DumpResponse::VT_TYPE, type);
  }
  void add_rtpParameters(flatbuffers::Offset<FBS::RtpParameters::RtpParameters> rtpParameters) {
    fbb_.AddOffset(DumpResponse::VT_RTPPARAMETERS, rtpParameters);
  }
  void add_rtpMapping(flatbuffers::Offset<FBS::RtpParameters::RtpMapping> rtpMapping) {
    fbb_.AddOffset(DumpResponse::VT_RTPMAPPING, rtpMapping);
  }
  void add_rtpStreams(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBS::RtpStream::Dump>>> rtpStreams) {
    fbb_.AddOffset(DumpResponse::VT_RTPSTREAMS, rtpStreams);
  }
  void add_traceEventTypes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> traceEventTypes) {
    fbb_.AddOffset(DumpResponse::VT_TRACEEVENTTYPES, traceEventTypes);
  }
  void add_paused(bool paused) {
    fbb_.AddElement<uint8_t>(DumpResponse::VT_PAUSED, static_cast<uint8_t>(paused), 0);
  }
  explicit DumpResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DumpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpResponse>(end);
    fbb_.Required(o, DumpResponse::VT_ID);
    fbb_.Required(o, DumpResponse::VT_TYPE);
    fbb_.Required(o, DumpResponse::VT_RTPPARAMETERS);
    fbb_.Required(o, DumpResponse::VT_RTPMAPPING);
    fbb_.Required(o, DumpResponse::VT_TRACEEVENTTYPES);
    return o;
  }
};

inline flatbuffers::Offset<DumpResponse> CreateDumpResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    FBS::RtpParameters::MediaKind kind = FBS::RtpParameters::MediaKind::ALL,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<FBS::RtpParameters::RtpParameters> rtpParameters = 0,
    flatbuffers::Offset<FBS::RtpParameters::RtpMapping> rtpMapping = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBS::RtpStream::Dump>>> rtpStreams = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> traceEventTypes = 0,
    bool paused = false) {
  DumpResponseBuilder builder_(_fbb);
  builder_.add_traceEventTypes(traceEventTypes);
  builder_.add_rtpStreams(rtpStreams);
  builder_.add_rtpMapping(rtpMapping);
  builder_.add_rtpParameters(rtpParameters);
  builder_.add_type(type);
  builder_.add_id(id);
  builder_.add_paused(paused);
  builder_.add_kind(kind);
  return builder_.Finish();
}

inline flatbuffers::Offset<DumpResponse> CreateDumpResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    FBS::RtpParameters::MediaKind kind = FBS::RtpParameters::MediaKind::ALL,
    const char *type = nullptr,
    flatbuffers::Offset<FBS::RtpParameters::RtpParameters> rtpParameters = 0,
    flatbuffers::Offset<FBS::RtpParameters::RtpMapping> rtpMapping = 0,
    const std::vector<flatbuffers::Offset<FBS::RtpStream::Dump>> *rtpStreams = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *traceEventTypes = nullptr,
    bool paused = false) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto rtpStreams__ = rtpStreams ? _fbb.CreateVector<flatbuffers::Offset<FBS::RtpStream::Dump>>(*rtpStreams) : 0;
  auto traceEventTypes__ = traceEventTypes ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*traceEventTypes) : 0;
  return FBS::Producer::CreateDumpResponse(
      _fbb,
      id__,
      kind,
      type__,
      rtpParameters,
      rtpMapping,
      rtpStreams__,
      traceEventTypes__,
      paused);
}

inline const flatbuffers::TypeTable *EnableTraceEventRequestTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const char * const names[] = {
    "events"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DumpResponseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 1, 3 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_BOOL, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::RtpParameters::MediaKindTypeTable,
    FBS::RtpParameters::RtpParametersTypeTable,
    FBS::RtpParameters::RtpMappingTypeTable,
    FBS::RtpStream::DumpTypeTable
  };
  static const char * const names[] = {
    "id",
    "kind",
    "type",
    "rtpParameters",
    "rtpMapping",
    "rtpStreams",
    "traceEventTypes",
    "paused"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 8, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace Producer
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_PRODUCER_FBS_PRODUCER_H_
