// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_
#define FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_

#include "flatbuffers/flatbuffers.h"

#include "worker_generated.h"

namespace FBS {
namespace Request {

struct Response;
struct ResponseBuilder;

inline const flatbuffers::TypeTable *ResponseTypeTable();

enum ResponseBody : uint8_t {
  ResponseBody_NONE = 0,
  ResponseBody_FBS_Worker_Dump = 1,
  ResponseBody_MIN = ResponseBody_NONE,
  ResponseBody_MAX = ResponseBody_FBS_Worker_Dump
};

inline const ResponseBody (&EnumValuesResponseBody())[2] {
  static const ResponseBody values[] = {
    ResponseBody_NONE,
    ResponseBody_FBS_Worker_Dump
  };
  return values;
}

inline const char * const *EnumNamesResponseBody() {
  static const char * const names[3] = {
    "NONE",
    "FBS_Worker_Dump",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponseBody(ResponseBody e) {
  if (flatbuffers::IsOutRange(e, ResponseBody_NONE, ResponseBody_FBS_Worker_Dump)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResponseBody()[index];
}

template<typename T> struct ResponseBodyTraits {
  static const ResponseBody enum_value = ResponseBody_NONE;
};

template<> struct ResponseBodyTraits<FBS::Worker::Dump> {
  static const ResponseBody enum_value = ResponseBody_FBS_Worker_Dump;
};

bool VerifyResponseBody(flatbuffers::Verifier &verifier, const void *obj, ResponseBody type);
bool VerifyResponseBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ACCEPTED = 6,
    VT_BODY_TYPE = 8,
    VT_BODY = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool accepted() const {
    return GetField<uint8_t>(VT_ACCEPTED, 0) != 0;
  }
  FBS::Request::ResponseBody body_type() const {
    return static_cast<FBS::Request::ResponseBody>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const FBS::Worker::Dump *body_as_FBS_Worker_Dump() const {
    return body_type() == FBS::Request::ResponseBody_FBS_Worker_Dump ? static_cast<const FBS::Worker::Dump *>(body()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_ACCEPTED, 1) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyResponseBody(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::Worker::Dump *Response::body_as<FBS::Worker::Dump>() const {
  return body_as_FBS_Worker_Dump();
}

struct ResponseBuilder {
  typedef Response Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Response::VT_ID, id, 0);
  }
  void add_accepted(bool accepted) {
    fbb_.AddElement<uint8_t>(Response::VT_ACCEPTED, static_cast<uint8_t>(accepted), 0);
  }
  void add_body_type(FBS::Request::ResponseBody body_type) {
    fbb_.AddElement<uint8_t>(Response::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Response::VT_BODY, body);
  }
  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    bool accepted = false,
    FBS::Request::ResponseBody body_type = FBS::Request::ResponseBody_NONE,
    flatbuffers::Offset<void> body = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_id(id);
  builder_.add_body_type(body_type);
  builder_.add_accepted(accepted);
  return builder_.Finish();
}

inline bool VerifyResponseBody(flatbuffers::Verifier &verifier, const void *obj, ResponseBody type) {
  switch (type) {
    case ResponseBody_NONE: {
      return true;
    }
    case ResponseBody_FBS_Worker_Dump: {
      auto ptr = reinterpret_cast<const FBS::Worker::Dump *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyResponseBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResponseBody(
        verifier,  values->Get(i), types->GetEnum<ResponseBody>(i))) {
      return false;
    }
  }
  return true;
}

inline const flatbuffers::TypeTable *ResponseBodyTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Worker::DumpTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "FBS_Worker_Dump"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ResponseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Request::ResponseBodyTypeTable
  };
  static const char * const names[] = {
    "id",
    "accepted",
    "body_type",
    "body"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const FBS::Request::Response *GetResponse(const void *buf) {
  return flatbuffers::GetRoot<FBS::Request::Response>(buf);
}

inline const FBS::Request::Response *GetSizePrefixedResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FBS::Request::Response>(buf);
}

inline bool VerifyResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBS::Request::Response>(nullptr);
}

inline bool VerifySizePrefixedResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBS::Request::Response>(nullptr);
}

inline void FinishResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Request::Response> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Request::Response> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Request
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_
