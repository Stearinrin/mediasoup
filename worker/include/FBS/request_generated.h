// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_
#define FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_

#include "flatbuffers/flatbuffers.h"

#include "rtpParameters_generated.h"
#include "consumer_generated.h"
#include "transport_generated.h"
#include "worker_generated.h"

namespace FBS {
namespace Request {

struct Request;
struct RequestBuilder;

inline const flatbuffers::TypeTable *RequestTypeTable();

enum Body : uint8_t {
  Body_NONE = 0,
  Body_FBS_Worker_DumpRequest = 1,
  Body_FBS_Transport_ConsumeRequest = 2,
  Body_MIN = Body_NONE,
  Body_MAX = Body_FBS_Transport_ConsumeRequest
};

inline const Body (&EnumValuesBody())[3] {
  static const Body values[] = {
    Body_NONE,
    Body_FBS_Worker_DumpRequest,
    Body_FBS_Transport_ConsumeRequest
  };
  return values;
}

inline const char * const *EnumNamesBody() {
  static const char * const names[4] = {
    "NONE",
    "FBS_Worker_DumpRequest",
    "FBS_Transport_ConsumeRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameBody(Body e) {
  if (flatbuffers::IsOutRange(e, Body_NONE, Body_FBS_Transport_ConsumeRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBody()[index];
}

template<typename T> struct BodyTraits {
  static const Body enum_value = Body_NONE;
};

template<> struct BodyTraits<FBS::Worker::DumpRequest> {
  static const Body enum_value = Body_FBS_Worker_DumpRequest;
};

template<> struct BodyTraits<FBS::Transport::ConsumeRequest> {
  static const Body enum_value = Body_FBS_Transport_ConsumeRequest;
};

bool VerifyBody(flatbuffers::Verifier &verifier, const void *obj, Body type);
bool VerifyBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_HANDLERID = 6,
    VT_BODY_TYPE = 8,
    VT_BODY = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *handlerId() const {
    return GetPointer<const flatbuffers::String *>(VT_HANDLERID);
  }
  FBS::Request::Body body_type() const {
    return static_cast<FBS::Request::Body>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const FBS::Worker::DumpRequest *body_as_FBS_Worker_DumpRequest() const {
    return body_type() == FBS::Request::Body_FBS_Worker_DumpRequest ? static_cast<const FBS::Worker::DumpRequest *>(body()) : nullptr;
  }
  const FBS::Transport::ConsumeRequest *body_as_FBS_Transport_ConsumeRequest() const {
    return body_type() == FBS::Request::Body_FBS_Transport_ConsumeRequest ? static_cast<const FBS::Transport::ConsumeRequest *>(body()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_HANDLERID) &&
           verifier.VerifyString(handlerId()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyBody(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FBS::Worker::DumpRequest *Request::body_as<FBS::Worker::DumpRequest>() const {
  return body_as_FBS_Worker_DumpRequest();
}

template<> inline const FBS::Transport::ConsumeRequest *Request::body_as<FBS::Transport::ConsumeRequest>() const {
  return body_as_FBS_Transport_ConsumeRequest();
}

struct RequestBuilder {
  typedef Request Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Request::VT_ID, id, 0);
  }
  void add_handlerId(flatbuffers::Offset<flatbuffers::String> handlerId) {
    fbb_.AddOffset(Request::VT_HANDLERID, handlerId);
  }
  void add_body_type(FBS::Request::Body body_type) {
    fbb_.AddElement<uint8_t>(Request::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Request::VT_BODY, body);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> handlerId = 0,
    FBS::Request::Body body_type = FBS::Request::Body_NONE,
    flatbuffers::Offset<void> body = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_handlerId(handlerId);
  builder_.add_id(id);
  builder_.add_body_type(body_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Request> CreateRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *handlerId = nullptr,
    FBS::Request::Body body_type = FBS::Request::Body_NONE,
    flatbuffers::Offset<void> body = 0) {
  auto handlerId__ = handlerId ? _fbb.CreateString(handlerId) : 0;
  return FBS::Request::CreateRequest(
      _fbb,
      id,
      handlerId__,
      body_type,
      body);
}

inline bool VerifyBody(flatbuffers::Verifier &verifier, const void *obj, Body type) {
  switch (type) {
    case Body_NONE: {
      return true;
    }
    case Body_FBS_Worker_DumpRequest: {
      auto ptr = reinterpret_cast<const FBS::Worker::DumpRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Body_FBS_Transport_ConsumeRequest: {
      auto ptr = reinterpret_cast<const FBS::Transport::ConsumeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBody(
        verifier,  values->Get(i), types->GetEnum<Body>(i))) {
      return false;
    }
  }
  return true;
}

inline const flatbuffers::TypeTable *BodyTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Worker::DumpRequestTypeTable,
    FBS::Transport::ConsumeRequestTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "FBS_Worker_DumpRequest",
    "FBS_Transport_ConsumeRequest"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *RequestTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FBS::Request::BodyTypeTable
  };
  static const char * const names[] = {
    "id",
    "handlerId",
    "body_type",
    "body"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const FBS::Request::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<FBS::Request::Request>(buf);
}

inline const FBS::Request::Request *GetSizePrefixedRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FBS::Request::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBS::Request::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBS::Request::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Request::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBS::Request::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Request
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_REQUEST_FBS_REQUEST_H_
